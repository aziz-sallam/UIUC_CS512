__high-level__
__data_structures__
__data_structure__
__source_code__
__low-level__
__object-oriented__
__programming_languages__
__domain-specific__
__programming_language__
__rule-based__
__paper_presents__
__design_patterns__
__data_model__
__user-defined__
__high_level__
__data_flow__
__data_structures__.
__an_object-oriented__
__data_types__
__context-sensitive__
__use_cases__
__automatically_generated__
__programming_languages__.
__real-time_systems__.
__higher-level__
__static_analysis__
__real-time_systems__
__building_blocks__
__process_models__
__source_code__.
__data_base__
__an_extensible__
__code_generation__
__object-based__
__information_flow__
__control_flow__
__software_components__.
__data_structures__,
__event-based__
__query_language__
__automatically_generates__
__business_rules__
__timing_constraints__
__model_checking__.
__programming_language__.
__data_models__
__higher_level__
__constraint-based__
__domain_specific__
__low_level__
__computer_programs__
__reason_about__
__test_case__
__programming_environment__
__analysis_tools__
__formal_verification__
__data_structure__.
__automatically_generate__
__specification_language__
__object-oriented_programming__
__black-box__
__programming_languages__,
__conceptual_models__
__Java_programs__
__tool_support__
__automatically_generating__
__OWL-S__
__state-based__
__Java_programs__.
__test_suites__
__aspect-oriented__
__functional_requirements__
__exception_handling__
__data_type__
__software_package__
__test_suite__
__formal_specifications__
__concurrent_programs__
__Model_checking__
__modeling_language__
__source_code__,
__pattern-based__
__XML_Schema__
__UML_models__
__object_model__
__development_environment__
__existing_tools__
__domain-independent__
__program_analysis__
__logic-based__
__fully_automated__
__simulation_models__.
__design_patterns__.
__an_open-source__
__self-contained__
__control_structures__
__performance_models__
__from_scratch__.
__design_pattern__
__freely_available__
__syntactic_and_semantic__
__model_transformations__
__the_Unified_Modeling_Language__
__timing_constraints__.
__concurrent_systems__
__C_programs__
__state_machines__
__UML_diagrams__
__High-level__
__symbolic_execution__
__programming_language__,
__graphical_user_interface__
__communication_protocols__.
__concurrent_systems__.
__Object-oriented__
__regression_testing__
__data-flow__
__functional_programming__
__control-flow__
__tool_called__
__Perl__
__Verilog__
__database_management_system__
__language_features__
__design_rules__
__software_artifacts__
__program_transformations__
__meta-model__
__approach_combines__
__C#__
__UML_2.0__
__model_transformation__
__test_cases__,
__formal_models__
__Linda__
__analysis_tool__
__conceptual_model__
__reusable_components__
__requirements_specification__
__data_model__,
__IDE__
__lower-level__
__concurrent_programming__
__concurrent_programs__.
__partial_evaluation__
__language_constructs__
__implementation_details__
__pattern_matching__.
__description_language__
__reactive_systems__
__first-class__
__component_model__
__an_XML-based__
__security_protocols__.
__modeling_technique__
__analysis_technique__
__type_checking__
__building_blocks__.
__parallel_programming__.
__binary_code__
__WS-BPEL__
__reactive_systems__.
__dynamic_analysis__
__programming_paradigm__
__state_machine__
__formal_verification__.
__aspect-oriented_programming__
__control_structure__
__language-independent__
__Web_application__
__abstract_data_types__
__data_model__.
__visual_languages__
__object_models__
__Mathematica__
__modeling_languages__
__model_checker__
__XML_schema__
__Unified_Modeling_Language__
__data_abstraction__
__unit_testing__
__use_cases__.
__program_development__
__crosscutting_concerns__
__programming_environments__
__code_fragments__
__paper_introduces__
__design_models__
__computer_programs__.
__tool_support__.
__C_programs__.
__formal_specification__
__behavioral_models__
__development_environment__.
__component_models__
__model_checkers__
__relies_upon__
__program_verification__
__programming_environment__.
__program_transformation__
__concurrent_processes__
__step-by-step__
__embedded_software__.
__object_oriented__
__lines_of_code__
__machine_code__
__program_code__
__TTCN-3__
__hand-coded__
__consistency_checking__
__program_understanding__
__data_transformation__
__programming_techniques__
__specification_languages__
__version_control__
__function_calls__
__code_generation__.
__verification_techniques__
__type_information__
__feature_models__
__object-oriented_languages__
__object-oriented_programming__.
__platform-independent__
__Simulink__
__data_types__,
__type-safe__
__Java_code__
__class_diagrams__
__finite_state_machine__
__independently_developed__
__model_transformations__.
__program_slicing__
__data_manipulation__
__Java_applications__.
__object-oriented_design__
__analysis_techniques__.
__control_flow__,
__Aspect-Oriented_Programming__
__access_control_policies__.
__security_properties__.
__formal_analysis__
__separation_of_concerns__
__sequence_diagrams__
__Java_bytecode__
__task_models__
__design_patterns__,
__UML-based__
__individual_components__
__verification_tools__
__specifically_designed__
__analysis_tools__.
__legacy_code__
__execution_traces__
__dynamic_behavior__
__memory_model__
__language_extensions__
__scripting_language__
__static_analysis__.
__building_blocks__,
__visual_language__
__executable_code__
__UML_models__.
__source_codes__
__language-specific__
__functional_languages__
__schedulability_analysis__
__AJAX__
__greatly_simplifies__
__interaction_protocols__
__abstract_models__
__automated_tools__
__program_analysis__.
__test_suites__.
__design_tool__
__query_language__.
__high-level_language__
__distributed_algorithms__.
__assembly_language__
__Standard_ML__
__automatic_differentiation__
__markup_language__
__formal_semantics__
__Ajax__
__hardware_designs__
__Java_Card__
__pattern-matching__
__data_models__.
__discrete_event__
__plug-ins__
__top-level__
__programming_style__
__requirements_specifications__
__coverage_criteria__
__fully_implemented__
__modeling_tool__
__inference_engine__
__distributed_programs__
__database_schema__
__data_format__
__functionally_equivalent__
__automated_reasoning__
__data_flow_analysis__
__Ada_95__
__implementation_details__.
__implementation_techniques__
__platform_independent__
__step_by_step__
__UML_class_diagrams__
__An_object-oriented__
__modelling_language__
__design_environment__
__software_models__
__object-oriented_software__
__programming_model__.
__key_features__
__functional_language__
__Fortran_90__
__object_orientation__
__use_cases__,
__object-oriented_programs__
__dependency_analysis__
__computer_algebra__
__experience_shows__
__safety_analysis__
__abstract_machine__
__business_process_models__
__performance_model__
__object-oriented_systems__
__domain_models__
__large_software_systems__
__modeler__
__assembly_code__
__multiple_inheritance__
__history-based__
__native_code__
__formal_specifications__.
__existing_software__
__context_sensitive__
__structured_programming__
__dynamic_binding__
__XML_processing__
__generated_automatically__
__crosscutting_concerns__.
__application_programmers__
__semantic_model__
__XML_schemas__
__source-level__
__data_structures_and_algorithms__
__efficient_implementations__
__formal_model__
__graph_transformation__
__component-based_systems__
__UML_diagrams__.
__user_defined__
__test_inputs__
__contributions_include__
__architectural_styles__
__PRISM__
__provably_correct__
__structural_constraints__
__formal_techniques__
__object-oriented_programs__.
__test_case_generation__
__Visual_Basic__
__functional_decomposition__
__modeling_language__.
__object-oriented_programming__,
__predicate_abstraction__
__Event-B__
__level_of_abstraction__
__static_analyses__
__primitive_operations__
__object-oriented__,
__high-level__,
__easily_extended__
__multi-language__
__reusable_components__.
__model_checking_techniques__
__VHDL-AMS__
__program_design__
__clone_detection__
__concurrency_control__.
__black_box__
__generation_process__
__advanced_features__
__business_rules__.
__inter-object__
__state_machines__.
__analysis_framework__
__context_model__
__written_in_Java__
__language-based__
__dependence_analysis__
__Abstract_State_Machines__
__model_generation__
__task_model__
__control_flow__.
__architectural_models__
__pointer_analysis__
__code_generation__,
__safety_requirements__
__program_analysis__,
__type-based__
__web_service_composition__
__formally_specified__
__type-checking__
__industrial-strength__
__flow_analysis__
__functional_programming__.
__Modeling_Language__
__visual_programming__
__grammar-based__
__unit_tests__
__process_models__,
__semantic_models__
__XML_Schema__.
__greatly_simplify__
__programming_paradigms__
__software_environment__
__abstraction_level__
__data_models__,
__error_handling__
__Standard_ML__.
__distributed_programs__.
__database_schemas__
__performance_models__.
__data_representation__.
__specification_language__,
__Java_classes__
__full-fledged__
__mutation_testing__
__test_suite__.
__easy_to_understand__
__verification_method__
__Object-Z__
__component_composition__
__machine-independent__
__rule-based_systems__
__re-usable__
__problem_domain__
__CASE_tool__
__Article_Summaries__.
__Message_Sequence_Charts__
__data_representations__
__code_generators__
__abstraction_levels__
__domain_concepts__
__sequential_programs__.
__query_language__,
__dataflow_analysis__
__software_tools__,
__type_safety__
__active_rules__
__test_scenarios__
__code_generator__
__Common_Lisp__
__function-based__
__integrity_checking__
__domain-specific_languages__
__programming_tools__
__discrete-event__
__program_structure__
__formal_verification__,
__formal_method__
__industry_standard__
__SQL_statements__
__Java_programs__,
__semantic_constraints__
__code_reuse__
__domain_model__
__program_transformations__.
__requirement_specifications__
__object_code__
__program_synthesis__
__language_design__
__complexity_metrics__
__data_transformations__
__conformance_testing__
__programming_interface__
__algorithms_and_data_structures__
__static_analysis__,
__legacy_software__
__attack_scenarios__
__exception_handling__.
__programming_model__,
__programming_environment__,
__specification_language__.
__plan_execution__
__front_end__
__control_structures__.
__behavior_models__
__software_verification__
__formal_language__
__safety_properties__.
__an_object_oriented__
__intermediate_representation__
__multithreaded_programs__.
__functional_languages__.
__simulation_models__,
__programming_constructs__
__workflow_models__
__concurrent_processes__.
__going_beyond__
__knowledge_representation_and_reasoning__
__verification_methods__
__program_understanding__.
__database_system__,
__parallel_programs__,
__test_execution__
__constraint_solvers__
__high-level_languages__
__control_flows__
__programming_environments__.
__SQL_query__
__Program_slicing__
__design_methodology__,
__Low-level__
__automatically_generated__.
__concurrent_programming__.
__analysis_tools__,
__modelling_languages__
__mathematical_functions__
__object-oriented_language__
__regression_testing__.
__program_analyses__
__program_verification__.
__architectural_style__
__functional_requirements__.
__platform-specific__
__WS-CDL__
__enables_developers__
__semi-formal__
__definition_language__
__database_queries__.
__The_Unified_Modeling_Language__
__graphical_interface__
__type_systems__.
__formal_reasoning__
__Java_program__
__main_features__
__mutation_analysis__
__activity_diagrams__
__PL/I__
__call_graph__
__originally_designed__
__originally_developed__
__integration_testing__
__UML_model__
__data_flow__,
__automated_testing__
__modeling_constructs__
__Extensible_Markup_Language__
__reasoning_techniques__
__development_tools__.
__existing_code__
__low-level__,
__complex_data_structures__
__model_transformation__.
__test_data_generation__
__Real-time_systems__
__object-oriented_software__.
__generic_programming__
__requirements_specification__.
__program_development__.
__graph_algorithms__.
__feature_model__
__security_aspects__
__program_representation__
__language_called__
__inter-procedural__
__SQL_queries__.
__prototype_tool__
__scripting_languages__
__conceptual_schema__
__program_modules__
__workflow_model__
__UML-RT__
__meta-models__
__file_format__
__concrete_examples__
__Tcl__
__Test_cases__
__verification_tools__.
__verification_tool__
__development_tool__
__control_software__
__protocol_specifications__
__ANSI_C__
__flow-sensitive__
__concurrent_objects__
__conceptual_models__.
__dynamic_slicing__
__virtual_machine__,
__meta-programming__
__constraint_solver__
__class_hierarchy__
__application_code__.
__Design_by_Contract__
__model_checker__.
__object-oriented_languages__.
__application_programming_interface__
__abstract_data_types__.
__exception_handling__,
__database_management_system__.
__Aspect-oriented_programming__
__C#__.
__object-oriented_concepts__
__sequence_diagrams__.
__business_process_models__.
__execution_traces__.
__program_transformation__.
__Coloured_Petri_Nets__
__data-flow_analysis__
__behavioral_model__
__runtime_monitoring__
__reasoning_engine__
__unique_features__
__feature_models__.
__runtime_verification__
__cross-cutting__
__calling_context__
__architectural_elements__
__synchronous_communication__
__conceptual_model__.
__functional_programming_languages__
__semantic_description__
__structural_testing__
__state_diagrams__
__mapping_rules__
__compiled_code__
__testing_strategy__
__correctness_proofs__
__visual_languages__.
__Rose__
__large_programs__.
__protocol_analysis__
__execution_engine__
__class_hierarchies__
__Java_code__.
__UML_class_diagrams__.
__Promela__
__declarative_language__
__join_points__
__levels_of_abstraction__
__XML_schema__.
__schema_integration__
__existing_implementations__
__abstraction_techniques__
__compiler_construction__
__high-level_design__
__architectural_patterns__
__Java_bytecode__.
__editing_operations__
__dynamic_behavior__.
__Programming_languages__
__Estelle__
__shared_variables__.
__graphical_representation__
__OWL-S__.
__control_knowledge__
__refinement_process__
__decision_diagram__
__Domain-specific__
__memory_safety__
__written_in_Java__.
__synthesis_approach__
__Object-oriented_programming__
__formally_verified__
__machine_language__
__object_model__.
__description_language__.
__program_code__.
__dependency_graphs__
__software_modules__.
__functional_specifications__
__Data_structures__
__tool_set__
__functional_requirements__,
__class_diagram__
__step_by_step__.
__mobile_code__.
__great_flexibility__
__closely_resembles__
__test_environment__
__architecture-level__
__an_object-oriented_language__
__core_assets__
__database_application__
__application_programs__,
__change_propagation__
__code_base__
__implementation_details__,
__plan_generation__
__declarative_programming__
__policy_language__
__basic_components__
__object_models__.
__completely_automated__
__greatly_facilitates__
__Java_application__
__symbolic_analysis__
__knowledge_engineers__
__program_optimization__
__Modelica__
__verification_process__
__executable_models__
__static_program_analysis__
__tool_support__,
__input_validation__
__process_model__,
__legacy_code__.
__architectural_models__.
__analysis_methods__.
__hardware_verification__
__distributed_programming__
__object-oriented_databases__.
__Object-Z__.
__test_suites__,
__Smalltalk-80__
__easily_understandable__
__level_of_abstraction__.
__state_machines__,
__modeling_language__,
__modeling_tools__.
__object-oriented_databases__
__policy_specification__
__SQL/XML__
__attribute_grammars__.
__software_libraries__
__QoS_properties__
__source_programs__
__software_development_tools__
__dynamic_properties__
__business_rules__,
__testing_techniques__.
__meta-model__,
__function_points__
__static_checking__
__application_programming_interfaces__
__aspect-oriented_programming__.
__Petri_net-based__
__mapping_approach__
__individual_components__.
__hierarchical_model__
__design_specifications__
__abstraction_levels__.
__query_optimizer__
__concurrent_execution__
__reactive_systems__,
__coverage_metrics__
__pay_special_attention_to__
__information_models__
__test_oracles__
__formal_verification_techniques__
__constraint_solvers__.
__sufficiently_general__
__program_slicing__.
__graph_transformations__.
__verification_technique__
__modular_design__
__dynamic_linking__
__requirements_specifications__.
__source-code__
__automatically_constructs__
__step-wise__
__object-oriented_programming_languages__
__control_structures__,
__generated_automatically__.
__transformation_rules__.
__executable_specifications__
__white-box__
__Formal_verification__
__software_designs__
__interface_specifications__
__imperative_programs__.
__rule-based_systems__.
__design_models__.
__simulation_language__
__ECA_rules__
__model_checkers__.
__reusable_software_components__
__IMS_LD__
__timing_properties__
__branch_coverage__
__nested_transactions__
__object_based__
(__IDE__)
__testing_tools__
__Aspect_Oriented_Programming__
__hierarchical_structures__.
__experience_suggests__
__hardware_designs__.
__intermediate_language__
__tool_suite__
__class_library__
__performance_tuning__.
__theorem_prover__.
__agent_interactions__
__complex_behavior__
__specification-based__
__self-contained__,
__control_and_data_flow__
__static_analysis_tools__
__behavior_model__
__multi-threaded_programs__
__security_patterns__
__Java_language__
__program_generation__
__interaction_protocols__.
__program_logic__
__concurrent_programs__,
__software_specifications__
__WS-BPEL__.
__hardware_description_languages__
__program_points__
__scripting_language__.
__domain-oriented__
__reusable_components__,
__internal_structure__.
__functional_coverage__
__development_tools__,
__functional_models__
__software_model_checking__
__behavioral_models__.
__visual_models__
__description_language__,
__abstract_data__
__Software_components__
__design_intent__
__automatic_verification__
__data_independence__
__easily_extensible__
__alias_analysis__
__C_programs__,
__data_abstractions__
__method_invocation__
__generation_process__.
__consistency_model__
__automatically_deriving__
__bottom-up__,
__abstraction_mechanisms__
__class_libraries__
__modeling_languages__,
__protocol_implementations__
__software_library__
__development_environment__,
__execution_model__.
__UML_sequence_diagrams__
__control_structure__.
__hardware_synthesis__
__component_model__.
__Aspect-oriented__
__executable_code__.
__execution_environment__,
__existing_tools__,
__software_artifacts__,
__dependence_graphs__
__functional_properties__
__consistency_checks__
__statically_typed__
__partial_evaluation__,
__program_executions__.
__reusable_software__
__run-time_checks__
__XML_Schemas__.
__attribute_grammar__
__abstract_data_type__
__object-oriented_modeling__
__program_fragments__
__modeling_concepts__
__fault-tolerant_systems__.
__intermediate_representations__
__formally_verifying__
__Colored_Petri_Nets__
__software_module__
__an_object-oriented_database__
__abstract_representations__
__formally_verify__
__extends_traditional__
__runtime_support__
__information_flow__,
__formal_specification__.
__purely_functional__
__language_constructs__.
__information_hiding__,
__domain-specific_language__
__control_flow_graph__
__basic_functions__
__OMNeT++__
__multiple_languages__
__data_abstraction__.
__coverage_analysis__
__dynamic_analysis__.
__pocket_reference__:
__UPPAAL__
__relational_operations__
__modeling_paradigm__
__design_decision__
__library_functions__
__highly_expressive__
__production_rules__.
__interface_specification__
__assembly_language__.
__Estelle__.
__information_hiding__.
__formal_tools__
__efficiently_implementing__
__programming_methodology__
__fault_trees__
__design_tools__,
__requirement_specification__
__Java_applets__
__requirements_specification__,
__intermediate_level__
__Java_source_code__
__trace_analysis__
__reference_implementation__
__specification_languages__.
__component-level__
__goal_models__
__programming_technique__
__access_rules__
__software_construction__
__code_mobility__
__traceability_links__
__visual_modeling__
__domain-specific_languages__.
__Jade__
__Static_analysis__
__IMS-LD__
__symbolic_execution__.
__automata-based__
__task_models__.
__testing_framework__
__software_specification__
__type_analysis__
__property_checking__
__description_languages__
__main_feature__
__property-based__
__easily_understood__
__architecture_description_language__
__abstract_model__
__existing_programs__
__object-oriented_database__
__layout_information__
__top-down__,
__optimized_code__
__software_package__,
__protocol_specification__
__concrete_syntax__
__source_code_analysis__
__research_prototype__
__Visual_Studio__
__interprocess_communication__.
__Ada_2005__
__implementation_techniques__.
__DAML-S__
__automatically_produces__
__complex_object__
__probabilistic_model_checking__
__behavioral_descriptions__
__object-oriented_languages__,
__design_artifacts__
__memory_consistency__
__formal_semantics__.
__UML_profile__
__procedural_knowledge__
__theorem-proving__
__Model_transformations__
__language_extension__
__communicating_processes__.
__Gaia__
__data_bases__,
__design_language__
__object-oriented_analysis__
__ISIS__
__communicative_acts__
__software_programs__.
__class_diagrams__.
__coverage_criteria__.
__development_method__
__consistency_rules__
__ASTRAL__
__first_class__
__DAML+OIL__
__inter-component__
__tailor-made__
__Ada_9X__
__programming_style__.
__written_in_Java__,
__sequence_diagrams__,
__verification_techniques__.
__transformation_language__
__escape_analysis__
__multiple_inheritance__.
__composite_objects__
__writing_programs__
__high-level_abstractions__
__process_descriptions__
__Microsoft_Excel__
__model_composition__
__implementation_strategy__
__generic_models__
__coordination_models__
__representation_model__
__programming_approach__
__meta-model__.
__helps_designers__
__program_analysis_techniques__
__process_definition__
__reactive_behavior__
__memory_model__.
__consistency_constraints__
__specification_techniques__
__transformation_process__
__object_models__,
__generic_functions__
__program_components__
__code-level__
__tool_developers__
__command-line__
__join_point__
__test_scenarios__.
__modeling_framework__,
__runtime_environment__.
__event_models__
__transformation_technique__
__specification_languages__,
__Perl__,
__strongly_typed__
__complement_existing__
__SSA_form__
__levels_of_abstraction__.
__transformation_steps__
__agent_behavior__.
__acceptance_tests__
__asynchronous_circuit__
__verification_algorithms__
__event_model__
__language_constructs__,
__concurrent_objects__.
__type_annotations__
__timed_systems__.
__data_abstraction__,
__formal_foundations__
__data_type__,
__cross-cutting_concerns__
__semantically_correct__
__existing_frameworks__
__object-oriented_programming_languages__.
__UML/OCL__
__easy_to_understand__.
__software_structure__
__race_detection__
__internal_representation__
__platform-dependent__
__whole-program__
__plug-ins__.
__optimizing_compilers__.
__regression_testing__,
__complex_data_structures__.
__dynamically_generates__
__XML_DTDs__
__Handel-C__
__consistency_checking__.
__control_program__
__BDI_agent__
__concurrent_program__
__dynamic_data_structures__.
__code_generators__.
__modeling_languages__.
__inference_engine__.
__structured_design__
__schedulability_analysis__.
__nonfunctional_requirements__
__fault_tree__
__the_Coq_proof_assistant__.
__dynamically_loaded__
__workflow_patterns__
__sorting_algorithms__.
__generic_model__
__verification_methodology__
__OCL_constraints__
__parallel_programming__,
__straight_forward__
__Verilog__.
__UML_2.0__.
__integration_process__
__component_framework__
__language_features__,
__execution_models__
__code_generator__.
__reasoning_systems__
__behavioral_properties__
__COBRA__
__existing_code__.
__refactoring_tools__
__command_language__
__automatically_translates__
__asynchronous_communication__.
__code_reuse__,
__generic_framework__
__test_scripts__
__GPSS/H__
__ontology_language__
__greatly_simplified__
__analysis_framework__.
__highly_modular__
__formal_models__.
__object_model__,
__SQL-based__
__graphical_tools__
__level_of_abstraction__,
__rapid_prototyping__,
__architectural_views__
__test_models__
__evaluation_mechanism__
__HTN_planning__
__components_and_connectors__
__test_case_generation__.
__software_composition__
__architectural_constraints__
__stack_inspection__
__reverse_engineering_tools__
__automatically_derives__
__object-oriented_techniques__
__program_structures__
__basic_features__
__database_schemas__.
__Fortran_90__.
__rule_engine__
__Ptolemy_II__
__specifically_tailored__
__temporal_requirements__
__translation_process__
__testing_criteria__
__computational_processes__
__parameter_passing__
__program_understanding__,
__refinement_steps__
__hardware_description_language__
__automatically_transforms__
__instance-level__
__file_structure__
__sequential_programs__,
__software_verification__.
__social_commitments__
__active_databases__
__vulnerability_analysis__
__workflow_design__
__reverse_engineered__
__functional_correctness__
__Remote_Method_Invocation__
__distributed_protocols__.
__component_systems__.
__modeling_tool__,
__code_base__.
__formal_approach__
__relational_DBMS__
__automated_verification__
__access_control_policies__,
__abstract_specifications__
__transformation_functions__
__behavioral_specification__
__automatic_analysis__
__software_behavior__
__automatically_synthesized__
__variation_points__
__machine_code__.
__test_specifications__
__unit_test__
__abstract_syntax_trees__
__class_models__
__run-time_environment__
__code_reuse__.
__method_calls__.
__web_service_compositions__
__SQL_queries__,
__source_level__
__Java_implementation__
__basic_building_blocks__
__Enterprise_Java_Beans__
__Use_Case_Maps__
__design_pattern__.
__SMT_solvers__
__symbolic_techniques__
__recent_extensions__
__synchronous_dataflow__
__structural_coverage__
__method_calls__,
__block_diagram__
__process_algebra__,
__Exception_handling__
__mutation_testing__.
__dynamic_adaptation__.
__OWL_ontologies__.
__protocol_implementation__
__execution_trace__
__pattern_language__
__detailed_design__
__Web_Ontology_Language__
__separate_compilation__
__state_space_exploration__
__extraction_techniques__
__accepts_as_input__
__design_stage__.
__Sun_Microsystems__
__Formal_specifications__
__imperative_programming__
__concurrent_software__
__static_typing__
__code_optimization__.
__control_constructs__
__agent_behaviors__
__distributed_programming__.
__test_paths__
__requirements_document__
__future_extensions__
__model_checking_techniques__.
__dynamic_updating__
__concurrent_activities__
__compositional_reasoning__
__aspect_weaving__
__intermediate_code__
__automatically_produce__
__reasoning_services__
__data_flow_analysis__.
__query_evaluation__,
__conflict_analysis__
__dynamic_feedback__
__verification_results__
__computation_model__.
__service_specifications__
__context-sensitive__,
__problem_specific__
__behavioral_specifications__
__model_transformations__,
__component_model__,
__language_semantics__
__procedural_programming__
__temporal_specifications__
__dynamic_loading__
__sufficiently_powerful__
__Common_Lisp__.
__language_specific__
__post-mortem__
__BPEL_process__
__language_design__,
__rule_language__
__IDE__.
__functional_programming_language__
__proof_assistants__
__production-quality__
__rule-based__,
__object-oriented_methods__
__Prolog_programs__.
__Experience_report__:
__platform_independence__
__crosscutting_concerns__,
__meta-modeling__
__conceptual_model__,
__ANSI-C__
__agent_behaviour__
__reusable_assets__
__program_testing__
__main_aim__
__memory_model__,
__ready-made__
__generic_types__
__test_requirements__
__string_processing__
__security_specifications__
__type_safety__.
__UML_profiles__
__logic_programming_language__
__user-configurable__
__code_inspection__
__PRISM__.
__operational_requirements__
__protocol_verification__
__program_design__.
__user-definable__
__Event-Condition-Action__
__an_extendable__
__component_interfaces__
__pseudo-code__
__modular_structure__
__programming_techniques__.
__user-defined_functions__
__software_artefacts__
__VISTA__
__syntax-directed__
__C#__,
__exception-handling__
__security_objectives__
__performance_data__,
__code_instrumentation__
__meta_model__
__program_specialization__
__Formal_specification__
__object-oriented_development__
__file_structures__
__formal_modelling__
__program_construction__
__core_components__
__program_verification__,
__composite_event__
__assembly_code__.
__component_assembly__
__testing_tool__
__event_traces__
__process_networks__
__tool_chain__
__dynamic_aspects__
__production_quality__
__OWL-S__,
__JBoss__
__spatial_operations__
__abstraction_level__.
__modeling_notations__
__execution_semantics__
__founded_upon__
__primary_contribution__
__type_information__.
__atomic_blocks__
__Markup_Language__)
__sufficiently_flexible__
__software_documents__
__XML_technology__
__program_transformations__,
__domain_models__.
__domain-specific__,
__data_manipulation__.
__performance_models__,
__correct-by-construction__
__critical_properties__
__translation_rules__
__internal_structure__,
__execution_model__,
__platform_specific__
__separation_of_concerns__.
__collectively_called__
__automatic_test_generation__
__Java_classes__.
__specification-based_testing__
__interacting_components__.
__dynamic_information__.
__hardware_and_software_components__.
__design_specification__
__WS-Policy__
__highly_portable__
__process_definitions__
__requirements_documents__
__constraint_based__
__significantly_simplifies__
__Concurrent_programming__
__language_definition__
__real_time_systems__
__formally_specifying__
__algorithm_design__,
__business_rule__
__operational_models__
__safety_requirements__.
__imperative_languages__
__sequence_diagram__
__functional_aspects__
__design_pattern__,
__hardware_description__
__context-insensitive__
__Matlab/Simulink__
__markup_languages__
__byte_code__
__process_activities__
__procedural_languages__
__syntactically_correct__
__program_synthesis__.
__Object_oriented__
__individual_modules__
__helps_programmers__
__program_source_code__.
__Domain_Specific_Languages__
__multiple_inheritance__,
__VHDL_code__
__coverage_criterion__
__object_orientation__.
__flow_analysis__.
__control_programs__
__Verilog_HDL__
__aspect_mining__
__control_structure__,
__rule-based_systems__,
__Action_Language__
__aspect-oriented_programs__.
__application_framework__.
__language_features__.
__object-oriented_applications__
__automatic_programming__
__design_phases__
__data_formats__.
__API_usage__
__program_debugging__
__Aspect-Oriented_Software_Development__
__lets_developers__
__generation_tool__
__compiler_construction__.
__Fortran_95__
__tedious_and_error-prone__.
__high-level_languages__.
__program_correctness__.
__integrated_development_environment__
__object-oriented_design__,
__translation_validation__
__literate_programming__
__command_line__
__Java_5.0__
__non-functional_requirements__,
__Business_rules__
__incremental_development__
__abstraction_technique__
__abstract_classes__
__object-oriented_systems__,
__Attribute_grammars__
__software_specifications__.
__UML_diagrams__,
__efficient_implementations__.
__natural_language_interface__
__OO_design__
__architecture-independent__
__component_models__.
__source-to-source__
(__Unified_Modeling_Language__)
__dataflow_graph__
__feature_interactions__.
__abstraction_refinement__
__detailed_examples__
__greatly_simplifying__
__real-time_distributed_systems__.
__Symbolic_execution__
__relational_database_system__
__architecture_description__
__synchronization_constraints__
__module-level__
__object_code__.
__formal_description__
__test_purposes__
__continuation-based__
__code_analysis__
__component_behavior__
__component_adaptation__
__active_rule__
__type-directed__
__information-flow__
__bytecode_verification__
__behaviour_models__
__verification_strategy__
__inheritance_hierarchies__
__component_library__
__pre-built__
__automatic_generation__
__verification_environment__
__re-engineered__
__modelling_tool__
__automatically_inferring__
__device-specific__
__requirements_models__
__composite_events__
__dynamic_analyses__
__program_specifications__
__constraint_checking__
__modular_approach__
__an_object-oriented__,
__architectural_description__
__tool_suite__.
__context_sensitivity__
__message_sequence_charts__
__plug-ins__,
__vendor-specific__
__performance_model__.
__an_object-oriented_language__.
__JESS__
__service_specification__
__Ruby_on_Rails__
__control_elements__
__specification_formalisms__
__type-specific__
__hardware_systems__.
__array_access__
__Tool_support__
__formal_specifications__,
__dynamic_binding__,
__active_objects__.
__XML_schemas__,
__the_Coq_proof_assistant__
__access_control_models__.
__high-level_specifications__
__Automatically_generating__
__design_level__
__compliance_checking__
__quality_properties__
__program_constructs__
__interaction_scenarios__
__Type-based__
__Jess__
__visualization_tool__,
__generated_code__
__import_and_export__
__access_control_rules__
__multithreaded_programming__
__step_by_step__,
__change_history__
__self-correcting__
__Programming_language__
__black-box_testing__
__software_models__.
__parallel_programming_environment__
__composition_rules__
__use_case__,
__formal_models__,
__CORAL__
__object_interaction__
__constraint_solver__.
__AspectJ_programs__.
__acceptance_test__
__process_networks__.
__specific_details__
__type_qualifiers__
__version_1.0__
__concurrency_control_mechanisms__
__abstraction_levels__,
__design_requirements__,
__event_patterns__
__Active_XML__
__complex_constraints__
__Java_implementations__
__compile-time_analysis__
__workload_model__
__property_verification__
__data_representations__.
__highly_reusable__
__data_structuring__
__finite_state_machines__,
__UML_activity_diagrams__
__extension_mechanisms__
__Object_Oriented_Programming__
__imperative_languages__.
__behavioral_semantics__
__sequential_code__.
__concurrent_software__.
__formal_notations__
__fully_implemented__,
__information-hiding__
__dependence_analysis__.
__passive_testing__
__proof_checking__
__Cell-DEVS__
__authorization_policies__.
__manually_written__
__multiple_languages__.
__code_transformation__
__open-source__,
__UML_models__,
__communications_protocols__
__unit_tests__.
__automatically_generated__,
__composition_mechanisms__
__Petri_net_based__
__core_language__
__aspect-oriented_programming__,
__Business_Process_Execution_Language__
__test_case_generation__,
__remote_method_invocation__
__finite-state_machines__.
__higher-order__,
__code_bases__
__technology_independent__
__automatic_code_generation__.
__error-handling__
__event_handlers__
__Uppaal__
__UML_class_diagram__
__automatic_code_generation__
__commonly_agreed__
__software_requirements__,
__test_specification__
__model_transformation__,
__Handel-C__.
__Object_Constraint_Language__
__program_code__,
__Java_libraries__
__pre-processor__
__the_Unified_Modeling_Language__.
__function_block__
__class-level__
__an_executable_specification__
__simple_programs__
__communicating_systems__
__test-case__
__specific_implementations__
__language_specification__
__test_plans__
__compositional_verification__
__workflow_models__.
__design-level__
__Java_API__
__unit_testing__,
__automatically_builds__
__relational_database_management_system__
__template_based__
__dimensional_analysis__
__version_2.0__
__higher_flexibility__
__component_interaction__
__DEVS_models__
__class_hierarchies__.
__computation_models__
__communicating_systems__.
__language-level__
__safety_and_liveness_properties__.
__self-modifying__
__tedious_and_error-prone__
__automatic_translation__
__version_control__,
__functional_model__
__program_generators__
__automatically_translate__
__anti-patterns__
__intra-object__
__SystemC_models__
__automatically_synthesizing__
__freely_available__.
__program_structure__.
__high-level_models__
__reusing_existing__
__graphical_notations__
__semi-automatically__.
__component_reuse__.
__Concurrent_Pascal__
__modelling_language__.
__modeler__.
__object_orientation__,
__safety_and_liveness__
__optimized_code__.
__concurrent_applications__.
__biological_models__.
__script-based__
__high_level_language__
__primitive_functions__
__modeling_primitives__
__briefly_introduced__.
__operational_profiles__
__re-engineer__
__textual_and_graphical__
__programming_paradigms__.
__Predicate_abstraction__
__functional_specification__
__object_reference__
__object-oriented_language__.
__component_interactions__
__JavaScript_code__
__mathematical_equations__
__syntax_and_semantics__,
__data_dictionary__
__fully_automated__.
__non-functional_properties__.
__Internet_Explorer__
__syntactic_constraints__
__DEVS-based__
__design_environment__,
__model_checking_tools__
__parsing_strategies__
__Domain-specific_languages__
__state_machine__.
__intermediate_representation__.
__security-relevant__
__module-based__
__Java_PathFinder__
__program_analysis_tools__
__programming_interface__,
__ORA-SS__
__Functional_programming__
__object_oriented_programming__
__modular_verification__
__data_flow_information__
__nested_transactions__.
__structural_and_behavioural__
__standard_software__
__class_loading__
__run-time_monitoring__
__component-based_systems__,
__inference_engines__
__meta-models__.
__generic_programming__.
__structuring_mechanisms__
__virtual_synchrony__
__semantic_analysis__,
__coding_style__
__proof_of_correctness__.
__behavior_specification__
__reverse_engineer__
__functional_language__.
__simulation_program__.
__procedural_languages__.
__Control_Flow_Graph__
__dynamic_dispatch__
__assertion_checking__
__generic_components__
__program_behaviour__
__security_rules__
__bottom_up__
__rule_systems__
__automatically_verify__
__target_languages__
__implementation_techniques__,
__operational_profile__
__tightly_integrates__
__TLA+__
__design_specifications__.
__program_documentation__
__Petri_net_models__
__human_designers__
__language_designers__
__Java_software__
__robust_parsing__
__path-sensitive__
__procedural_language__
__program_semantics__.
__security_hardening__
__separation_of_concerns__,
__Ode__
__abstraction_mechanism__
__state_exploration__
__high_level__,
__model_checker__,
__design_tool__,
__abstract_level__
__procedural_programs__
__UML_class_diagrams__,
__design_phase__,
__PL/I__.
__abstracts_away__
__model-checkers__
__Emerald__
__back-end__.
__UML_based__
__Mathematica__,
__graphical_representation__.
__aspect-based__
__control_software__.
__grammar_rules__,
__activity_diagrams__.
__a-posteriori__
__automatically_converts__
__Static_Single_Assignment__
__symbolic_execution__,
__model-checking__,
__Test_data__
__class_libraries__.
__top_down__
__diagram_types__
__programming_paradigm__,
__reverse-engineered__
__programming_paradigms__,
__hardware_verification__.
__domain_model__.
__test_criteria__
__information_model__.
__formal_requirements__
__programming_constructs__.
__distributed_programs__,
__safety_analysis__.
__abstracting_away__
__coordination_language__
__Java™__
__dataflow_models__
__base_classes__
__program_source_code__
__graph_transformation_rules__
__target_languages__.
__programming_interface__.
__process_instance__
__visual_programming_language__
__requirements_specifications__,
__class_definitions__
__IEC_61131-3__
__interaction_sequences__
__correctness_proofs__.
__Action_Semantics__
__message-passing__.
__test_oracles__.
__platform-independent__,
__Code_generation__
__CTL_model_checking__
__explicit_semantics__
__recovery_process__
__software_model_checking__.
__semantic_constraints__.
__verification_task__
__functional_behavior__
__verification_methods__.
__machine_independent__
__formally_defines__
__composition_model__
__software_libraries__.
__low-level_programming__
__sequencing_constraints__
__advanced_applications__.
__problem_statement__
__performance_estimation__.
__component_interactions__.
__CSP-based__
__parallel_language__
__automatically_infers__
__programming_language_constructs__
__XQuery_queries__
__Java_compiler__
__resource-oriented__
__complex_software__.
__program_specification__
__Message_Sequence_Chart__
__problem_solvers__.
__component_connectors__
__inference_engine__,
__object-oriented_models__
__coupling_and_cohesion__
__live_sequence_charts__
__automatically_transforming__
__abstract_models__.
__abstract_state_machines__
__late_binding__
__interchange_format__
__consistency_check__
__production_code__
__data-structures__
__program_transformation__,
__automatically_synthesize__
__RESTful_services__
__software_design_patterns__
__automatically_inferred__
__schema_evolution__,
__object-oriented_programming_language__
__process_algebraic__
__test_framework__
__consistency_checking__,
__easy-to-understand__
__task_model__.
__architectural_style__.
__high-level_programming__
__formal_analysis__.
__static_semantics__
__Java_Beans__
__formal_notation__
__dynamic_analysis__,
__HW_and_SW__
__UML_state_machines__
__real_time_systems__.
__UML_specification__
__UML_statecharts__
__commercial_tools__.
__externally_observable__
__join_points__.
__Unified_Modelling_Language__
__object_behavior__
__state_models__
__parallel_constructs__
__SMT-based__
__formal_specification__,
__verification_framework__
__automated_tests__
__CPN_Tools__
__program_slicing__,
__static_verification__
__modeling_notation__
__hierarchical_planning__
__hardware_circuits__
__modelling_languages__.
__hardware_description_languages__.
__recent_improvements__
__UML_model__.
__equivalence_checking__.
__design_documents__
__program_optimization__.
__test_execution__,
__conflict_detection__.
__bug_detection__
__UML_class__
__information_flow_security__
__OCL_expressions__
__testing_techniques__,
__assertion-based__
__dynamic_languages__
__dependency_model__
__automatically_converting__
__program_analyses__.
__method_invocation__.
__call_stack__
__design_elements__.
__method_invocations__.
__state_based__
__leverage_existing__
__Smalltalk-80__.
__configuration_language__
__pointer_variables__
__low-level_code__
__Modula-3__
__declarative_languages__
__domain_specific_languages__
__XML_trees__
__expression_evaluation__
__program_development__,
__abstracted_away__
__optimizing_transformations__
__proof_obligations__.
__data_base_management_system__
__unified_model__
__tool_set__.
__XML_applications__
__scoped_memory__
__relational_queries__.
__large-grained__
__temporal_database__
__product_variants__
__functional_decomposition__.
__Ada_tasking__
__modelling_formalism__
__logic_based__
__task_models__,
__language_independent__,
__protocol_specifications__.
__scripting_language__,
__data_structures__:
__hardware_descriptions__
__state_diagrams__.
__Visual_Basic__.
__recently_standardized__
__programming_languages__:
__interaction_diagrams__
__test_oracle__
__an_object-oriented_data_model__
__memory_models__.
__machine_instructions__.
__target_code__
__symbolic_reasoning__
__test_inputs__.
__planning_domains__.
__scripting_languages__.
__aspect-orientation__
__dynamic_behaviour__.
__simulation_engine__.
__design_representations__
__Coral__
__problem_domain__,
__development_tool__.
__register-transfer__
__CD++__
__parallel_programming_language__
__conformance_checking__
__abstract_objects__
__dependability_evaluation__
__design_by_contract__
__transformation_engine__
__source_files__.
__machine_code__,
__procedural_and_object-oriented__
__source_program__
__inter-relationships__
__block_diagrams__
__component_models__,
.__NET_framework__.
__grammar_rules__.
__dynamically_typed__
__static_analysis_techniques__
__descriptive_power__
__Enterprise_Edition__
__concurrent_programming__,
__subsequent_analysis__
__mathematical_notation__
__markup_languages__.
__data_structures_and_algorithms__.
__development_platform__.
__Erlang/OTP__
__separate_compilation__.
__object_structures__
__runtime_environment__,
__secure_applications__
__language_concepts__
__source_transformation__
__modeling_paradigms__
__context_model__,
__organizational_model__
__meta-language__
__implementation-independent__
__XML_formats__
__workflow_specification__
__interactive_application__
__FSM-based__
__basic_rules__
__semantic_data_models__
__active_databases__.
__data_format__.
__Standard_ML__,
__LR_parser__
__application_program__.
__model-based_testing__.
__rigorously_defined__
__component_architectures__
__generation_module__
__process_description__
__formal_framework__.
__dynamic_features__.
__language_support__
__component_interfaces__.
__computational_components__
__complex_data_structures__,
__bug_patterns__
__forward_engineering__
__visual_composition__
__computational_logic__
__satisfiability_modulo_theories__
__modular_reasoning__
__binary_instrumentation__
__Ada_2005__.
__event_calculus__
__model_generation__.
__UML_diagram__
__base-level__
__type-safety__
__class_invariants__
__dependence_analysis__,
__data_flow_diagrams__
__constraint_models__
__unified_modeling_language__
__platform_independent__.
__source_programs__.
__aspect-oriented_programs__
__multithreaded_programs__,
__partial_specifications__
__software_component__.
__static_slicing__
__database_querying__
__class_level__
__Conformance_testing__
__syntactic_constructs__
__XML_query_language__
__object-oriented_features__
__architectural_properties__
__component_types__
__predictable_behavior__
__goal_models__.
__XML_files__.
__object-oriented_designs__
__abstract_concepts__.
__architectural_abstractions__
__script_language__
__high_level_of_abstraction__
__conceptual_level__
__DEVS_models__.
__object-oriented_framework__
__structured_analysis__
__run-time_checks__.
__markup_language__.
__visual_language__.
__design_intent__.
__prototypical_implementation__
__Petri-net__
__proofs_of_correctness__
__Model-based_testing__
__architectural_style__,
__the_SPIN_model_checker__.
__program_slices__
__workflow_instances__
__relational_systems__.
__programming_support__
__model-checker__
__multiple_interpretations__
__Partial_evaluation__
__crosscutting_concern__
__test_purposes__.
__design_level__.
__conversion_rules__
__concolic_testing__
__class_diagram__.
__transactional_behavior__
__UML_Statecharts__
__agent_programs__
__runtime_systems__.
__assembly_language__,
__debugging_techniques__
__document_format__
__semantic_net__
__Java_class__
__originally_defined__
__levels_of_abstraction__,
__component_development__
__symbolic_computations__
__requirement_specifications__.
__dependence-based__
__interaction_protocols__,
__WebSphere®__
__generate_test_cases__
__modular_programming__
__compilation_process__
__RBAC_model__.
__extension_mechanism__
__dependency_graph__.
__shared_libraries__
__hardware_and_software_components__,
__code_synthesis__
__timing_diagrams__
__multi-threaded_programs__.
__state_diagram__
__formal_definition__
__object-oriented__.
__Tcl/Tk__
__simulation_traces__
__formal_specification_languages__
__rule-based_programming__
__CAD_software__
__aspect_oriented__
__configuration_files__.
__Rational_Rose__
__meta-modelling__
__text_editing__.
__pattern_instances__
__language_syntax__
__synthesis_algorithm__.
__proof_assistant__
__automatically_checks__
__concurrent_Java_programs__.
__software_designs__.
__variation_points__.
__systematically_derive__
__Objective_Caml__
__safety_critical_software__
__safety_guarantees__
__program_modules__.
__object_distribution__
__workflow_patterns__.
__active_rules__.
__colored_Petri_nets__
__execution_plans__.
__architectural_requirements__
__refinement-based__
__scheduling_constraints__
__reference_implementation__.
__UML_sequence_diagrams__.
__mapping_tool__
__low-level_details__
__specification_formalism__
__OWL-based__
__structural_analysis__,
__state_graph__
__white_box__
__meta-models__,
__formal_description_techniques__
__reverse_engineering_tools__.
__functional_language__,
__virtual_classes__
__Program_analysis__
__verification_methodologies__
__object-oriented_code__
__programming_abstraction__
__mathematical_proofs__.
__knowledge_structures__,
__layered_approach__
__VDM++__
__strong_atomicity__
__description_languages__,
__Web_service_compositions__
__glue_code__
__conflict_detection__,
__profiling_tools__
__Formal_analysis__
__memory_consistency_model__
__static_analyses__.
__dynamic_class_loading__
__adaptation_strategy__
__parallel/distributed__
__workflow_language__
__FORTRAN_IV__
__visual_programming__.
__component_interface__
__activity_diagram__
__interface_language__
__compiler_implementation__
__model_integration__
__load_testing__
__ETL_processes__
__storage_structures__.
__file_format__,
__security_patterns__.
__proven_correct__.
__pipelined_machine__
__web_browser__,
__multiple_dispatch__
.__NET_Framework__
__Integrated_Development_Environment__
__numerical_programs__
__cross-cutting_concerns__.
__assembly_code__,
__secure_information_flow__.
__test_coverage_criteria__
__extension_points__
__symbolic_manipulation__
__technical_contribution__
__component_specifications__
__protocol_implementations__.
__event-based_systems__.
__Specification_and_Description_Language__
__reachability_testing__
__compiler_transformations__
__linked_data_structures__.
__exception_handling_mechanisms__
__style_sheets__
__domain_models__,
__inheritance_mechanisms__
__constituent_elements__
__functional_descriptions__
__code_transformations__.
__development_paradigm__
__language_extensions__.
__Security_policy__
__implementation_considerations__
__run-time_checking__
__strongly-typed__
__data_transformations__.
__object-oriented_data_models__
__domain-specific_languages__,
__data_manipulation_language__
__concurrent_language__
__file_formats__.
__Data_flow__
__model_checked__
__language_processors__
__recently_approved__
__XACML_policy__
__closed-source__
__functional_validation__
__object-oriented_concepts__.
__synchronous_languages__
__business_process_model__
__Little-JIL__
__workflow_specifications__
__verification_tool__.
__Automatically_generated__
__high-level_languages__,
__query_optimizer__.
__intermediate_form__
__object_databases__
__interaction_objects__
__building_block__.
__BDI-based__
__object_systems__
__shared_objects__,
__structurally_complex__
__Verilog__,
__interface_descriptions__
__partially_implemented__
__formally_describing__
__OWL_ontology__
__dynamic_code_generation__
__sequencing_rules__
__relational_database_management_systems__.
__debugging_tool__
__theorem_provers__,
__visual_notations__
__object-oriented_software_development__.
__unit-level__
__Event_Graphs__
__abstraction-based__
__meta_models__
__PROMELA__
__OO_languages__
__pointer_analysis__.
__Haskell_programs__
__extended_finite_state_machines__
__sufficiently_rich__
__Java_applet__
__representing_knowledge__
__timing_properties__.
__domain-specific_modeling__
__Signal_Transition_Graphs__
__conformance_testing__.
__design_philosophy__,
__independent_modules__
__an_object-oriented_approach__.
__class_loader__
__Discrete_Event_System_Specification__
__Java_bytecode__,
__fault_trees__.
__software_engineering_environments__.
__programming_tools__,
__language-independent__,
__programming_patterns__
__hardware_description_language__.
__reasoning_framework__
__composite_objects__.
__aspect-oriented_modeling__
__optimisation_techniques__.
__high-level_programming_languages__
__abstract_syntax_tree__
__information_flow_analysis__
__formal_development__
__conditional_compilation__
__class_diagrams__,
__test_derivation__
__security_labels__
__business_logic__,
__semantic_integrity__
__planning_tasks__
__software_behavior__.
__business_policies__
__expert_system_shell__
__recurring_patterns__
__argumentation_schemes__
__programming_tools__.
__correctly_implements__
__relational_database_management_system__.
__parser_generator__
__business_domain__.
__pre-_and_postconditions__
__specification_technique__
__application_profiles__
__functional_level__
__XML_processing__.
__logical_components__
__compiler_technology__.
__activity_diagrams__,
__concurrent_components__
__communication_structure__.
__object_diagrams__
__Z_specifications__.
__Linda__,
__XSL-FO__
__ANSI_SQL__
__high-level_Petri_nets__.
__APL_programs__
__attribute_evaluation__
__state_coverage__
__formal_descriptions__
__architectural_styles__,
__message_formats__
__model-checking_techniques__
__COSMIC-FFP__
__functionally_correct__
__automatic_test__
__reasoning_capabilities__.
__service_orchestrations__
__feature_models__,
__previously_developed__.
__library_components__
__statement-level__
__generic_classes__
__scheduling_tool__
__Lustre__,
__mathematically_based__
__evaluation_strategy__.
__timed_properties__
__architectural_pattern__
__context_model__.
__abstract_representation__
__performance_properties__
__WS-BPEL__,
__host_language__
__coverage_metrics__.
__Feature_modeling__
__standard_Java__
__transformation_approach__
__hand_written__
__flexibility_and_extensibility__.
__decision_logic__
__formal_ontologies__
__automatically_translating__
__widely_applicable__.
__language_translation__
__graphical_output__
__modular_design__.
__transformation_tools__
__process_interaction__
__originally_written__
__architectural_specification__
__object_interactions__
__CORBA_components__
__static_single_assignment__
__implementation_language__
__modeling_environment__,
__Petri_net_model__
__policy_language__.
__Simulink_models__
__Web_application__,
__visual_languages__,
__behavioral_descriptions__.
__object-oriented_methodology__
__architectural_specifications__
__constraint_solving__,
__modern_programming_languages__
__static_code_analysis__
__programming_systems__.
__database_transactions__.
__Type_checking__
__comparatively_simple__
__execution_history__
__model_check__
__PRISM__,
__declarative_queries__
__naming_conventions__
__CA_model__
__pre-_and_post-conditions__
__Proteus__
__imperative_language__
__variability_models__
__sequential_equivalence_checking__
__key_features__.
__formal_knowledge__
__pre-compiled__
__sequential_processes__.
__dynamic_properties__.
__visual_notation__
__user-written__
__relational_data_base__
__speech_act_theory__
__design_phases__.
__data_flow_analysis__,
__conceptual_schema__.
__scattered_and_tangled__
__declarative_rules__
__control_statements__
__program_optimizations__
__policy_specifications__
__design_models__,
__software_model_checkers__
__geometric_computing__
__schema_version__
__UPPAAL__.
__event-based__,
__stored_procedures__
__SWRL_rules__
__Oracle_database__
__multi-staged__
__text_generation__.
__modelling_language__,
__basic_patterns__
__RT-LOTOS__
__SMIL_2.0__
__final_goal__
__assertion-based_verification__
__knowledge-level__
__intermediate_languages__
__state-machine__
__static_analysis_tool__
__process_specifications__
__naturally_lends__
__design_documentation__
__WSDL_documents__
__template_library__
__slicing_technique__
__region-based_memory_management__
__Architecture_Description_Language__
__model_checking_tools__.
__rule_languages__
__higher_levels_of_abstraction__
__graphical_editor__
__statically_analyze__
__proof_planning__
__control_model__,
__language_extensions__,
__atomic_services__
__Java_components__
__timing_aspects__
__type_safe__
__composite_events__.
__VLSI_layouts__.
__computational_algebra__
__RTL_design__
__Pascal_programs__
__Timed_automata__
__generated_automatically__,
__application_independent__
__class_hierarchies__,
__main_features__,
__semantic_query_optimization__
__SMT_solvers__.
__rests_upon__
__static_type_checking__
__C-XSC__
__database_update__
__structural_subtyping__
__module_interfaces__
__stepwise_refinement__
__inheritance_relationships__
__programming_idioms__
__software_engineering_tools__.
__actor-based__
__XML_applications__.
__HTML_forms__
__plan_execution__,
__ontology_engineers__
__program_units__
__executable_specification__
__domain-independent__,
__functional_description__
__modeling_formalisms__
__pointcut_language__
__symbolic_language__
__transaction_level_models__
__declarative_specification__
__execution_engine__.
__efficiently_detecting__
__static_analyzer__
__array_bound__
__performance_testing__.
__IDE__,
__major_parts__
__UML_tools__
__test_purpose__
__core_functionality__
__machine-code__
__logical_design__
__coverage_testing__
__language_definitions__
__concurrent_behavior__
__common_coupling__
__join_points__,
__Natural_Semantics__
__graphical_representations__.
__graphical_interface__.
__client_code__
__specific_concepts__
__imperative_programming_language__
__legal_rules__
__exception_handler__
__query_facilities__
__symbolic_algebra__
__user_guidance__
__database_designers__
__compiler_generates__
__assume-guarantee_reasoning__
__protocol_description__
__pointer_arithmetic__
__executable_code__,
__concrete_implementation__
__Application_Programming_Interfaces__
__conceptual_data_models__
__code_metrics__
__reusable_code__
__comprehension_tasks__
__task_level__
__Java_program__.
__validation_tool__
__finite-state_models__
__automated_program__
__synchronization_code__
__Visual_languages__
__Proof-Carrying_Code__
__atomic_action__
__parallel_programming_languages__.
__Program_transformation__
__Multiway_Decision_Graphs__
__transformation_languages__
__interactive_debugging__
__BDI_model__
__policy_specification__.
__behavioral_models__,
__application_semantics__.
__visual_syntax__
__extremely_flexible__
__relevant_aspects__
__automated_process__
__event-driven_systems__.
__pattern-directed__
__database_languages__
__paper_extends__
__stream-processing__
__graphical_editors__
__agent_interaction_protocols__
__interactive_programs__
__imperative_programming_languages__.
__Domain_Specific_Language__
__query_expression__
__extremely_compact__
__XML_markup__
__compiled_code__.
__pattern-oriented__
__component_implementations__
__machine-interpretable__
__architectural_descriptions__
__programmer-defined__
__generation_techniques__.
__higher_order_functions__
__object-oriented_programs__,
__statically_analyzing__
__externally_visible__
__software_libraries__,
__architecturally_significant__
__real-time_systems__:
__diagrammatic_reasoning__
__plan_generation__.
__structural_decomposition__
__rule_engines__
__graphical_notation__
__specification_methodology__
__execution_control__
__Visual_Basic__,
__input/output__,
__Logic_programs__
__traceability_relations__
__language_primitives__
__program_representations__
__Agent_UML__
__base_code__
__object-oriented_simulation__
__code_generator__,
__semantic_definition__
__programming_framework__
__simple_rules__.
__adequacy_criteria__
__function_level__
__Petri_net_models__.
__class_libraries__,
__adaptation_rules__.
__automatically_producing__
__schema_languages__
__Java_Servlets__
__modelling_approach__,
__debugging_environment__
__Proteus__,
__added_functionality__
__concurrent_execution__.
__write-once__
__Ada_programs__
__Verilog_RTL__
__executable_programs__
__Contract-based__
__operational_scenarios__
__easily_customized__
__multiple_component__
__practically_applicable__
__deadlock_free__.
__entry_point__
.__NET_platform__.
__aspect_languages__
__successive_refinements__
__domain_theories__
__round-trip_engineering__
__step-by-step__,
__Promela__,
__suitable_abstractions__
__import/export__
__shared-variable__
__architectural_constraints__.
__collaboration_diagrams__
__standard_language__
__graphical_tool__
__graph-oriented__
__partial_evaluators__
__domain-specific_modeling_languages__
__automatically_verified__
__data_abstractions__.
__program_testing__.
__consistency_verification__
__automatic_synthesis__
__execution_profiles__
__discrete_event_models__
__database_language__
__synchronous_programs__.
__Java_code__,
__dataflow_analyses__
__action_semantics__
__XML_DTD__
__configuration_file__
__OS/360__
__formal_language__.
__separate_modules__
__Prior_approaches__
__Java_Swing__
__multiple_phases__
__CORBA_Component_Model__
__database_structures__
__model_transformation_language__
__verification_techniques__,
__schema_design__
__Mutation_analysis__
__backward_chaining__
__debugging_support__
__specially_adapted__
__Random_testing__
__compiler_generation__
__parsing_techniques__
__testing_requirements__
__QVT_Relations__
__pattern_matcher__
__behavioral_features__
__list-processing__
__semantic_model__.
__functional_components__.
__high-level_specifications__.
__content-dependent__
__cognitively_plausible__
__concept_location__
__design_languages__
__correctness_properties__.
__reasoning_engines__
__Common_Lisp__,
__Context_sensitive__
__query_engines__.
__synthesis_procedures__
__high-level_descriptions__
__automatically_checking__
__MPEG-21_REL__
__model_refinement__.
__validation_technique__
__general_framework__,
__behavioral_specification__.
__document_structures__.
__Schema_evolution__
__ISO_standards__
__automated_tools__.
__Concurrent_Pascal__.
__target_machine__
__CPN_model__
__slicing_algorithm__
__test_harness__
__existing_code__,
__constraint_solver__,
__proof_assistant__.
__functional_abstraction__
__negotiation_protocol__.
__behavioral_properties__.
__UML_activity_diagrams__.
__program_construction__.
__Prolog-based__
__command_language__.
__automated_support__.
__detailed_timing__
__program_representation__,
__testing_criteria__.
__UML_sequence_diagrams__,
__legacy_code__,
__property_specifications__
__high_level_languages__
__probabilistic_model_checking__.
__circuit_description__
__requirement_specification__.
__E-LOTOS__
__functional_specifications__.
__language_independent__.
__logical_database__
__automated_test_case_generation__
__cleanly_separates__
__cohesion_metrics__
__functional_characteristics__
__language_processor__
__generic_knowledge__
__XML_transformations__
__non-functional_properties__,
__ODMG-93__
__computational_reflection__
__rapid_feedback__
__representation_formalisms__
__lets_programmers__
__graphical_design__
__BPEL_process__.
__design-by-contract__
__meta-programming__.
__representation_model__.
__high-level_synthesis_tools__
__key_features__,
__readily_usable__
__application_generators__
__implicit_invocation__
__model_checkers__,
__complex_dependencies__
__Formal_languages__
__dynamic_typing__
__QoS-based_WS__
__certified_code__
__event-condition-action__
__parse_table__
__object-oriented_programming_languages__,
__graphics_library__
__component_specification__
__APL_functions__
__modeling_process__,
__mapping_technique__,
__action_descriptions__
__distinctive_feature__
__program_text__
__architectural_views__.
__multiparty_interactions__
__multiparty_interaction__
__transition_coverage__
__strong_typing__
__TLA+__.
__semi-automatic__,
__stack_inspection__.
__member_functions__
__mobile_computation__.
__formal_reasoning__.
__proof-carrying_code__
__concurrent_computations__
__thread_library__
__image_processing_algorithms__,
__architecture_description_language__.
__Lustre__.
__performance_properties__.
__program_generation__.
__Hydra__,
__Ada_program__
__formal_specification_language__
__SICStus_Prolog__
__reasoning_about__,
__front_end__,
__concurrent_programming_language__
__global_variables__.
__event_traces__.
__graphical_editing__
__database_programming_language__
__graphical_views__
__primitive_operations__.
__qualitative_models__.
__test_scenario__
__top-down_parsing__
__logic_programming_language__.
__Program_transformations__
__proof_construction__
__Data_flow_analysis__
__clone_detection_tool__
__entity-relationship_diagrams__
__refinement_steps__.
__file_store__
__physical_database__
__coordination_primitives__
__Haskell_programs__.
__parser_generator__.
__compatibility_checking__
__event_propagation__
__program_flow__
__UML_activity_diagram__
__AspectC++__
__logic_reasoning__
__informal_descriptions__
__dynamic_metrics__
__safety_conditions__
__typed_assembly_language__
__object-orientation__,
__UML_statechart_diagrams__
__correctness_criteria__.
__high-level_constructs__
__pre-_and_post-conditions__.
__generic_programming__,
__finite_state_machine__.
__the_Coq_proof_assistant__,
__XML_parser__
__graphical_language__
__imperative_language__,
__Abstract_State_Machine__
__formal_model__,
__functional_programming_language__.
__concurrency-related__
__verification_tool__,
__dependency_relationships__
__realtime_systems__.
__precise_semantics__
__state-space_exploration__
__Process_algebras__
__query_decomposition__
__relevant_properties__
__efficient_incremental__
__automatic_verification__.
__spatial_operators__
__event_trace__
__imperative_programming_languages__
__hardware_synthesis__.
__service_specification__.
__control_flows__,
__automatic_test_generation__.
__semantic_actions__
__requirement_documents__
__Behavior_Trees__
__Property_Specification_Language__
__highly-concurrent__
__join_point_model__
__runtime_library__.
__directly_executable__
__model_generation__,
__standard_library__
__theorem_prover__,
__Symbolic_simulation__
__programming_notation__
__binary_code__,
__program_generator__
__deterministic_execution__
__bidirectional_transformation__
__reasoning_capability__
__W3C_recommendation__
__analysis_framework__,
__text_editors__
__high-level_programming_language__
__procedural_abstraction__
__Tango__
__existing_frameworks__.
__Z_specifications__
__Java_library__
__strong_typing__,
__flow_charts__
__bottom-up_parsing__
__safety_policy__
__Model-View-Controller__
__UML_constructs__
__incremental_design__
__event_models__.
__API_documentation__
__intermediate_code__.
__imperative_programs__,
__persistent_objects__,
__interprocedural_analysis__.
__exception_handling_mechanism__
__Constraint_based__
__Structured_Query_Language__
__XACML_policies__
__interaction_mechanisms__.
__Elucidative_Programming__
__bytecode_programs__
__numerical_programs__.
__synchronous_data-flow__
__semantic_constructs__
__conceptual_space__
__agent_concepts__
__description_languages__.
__platform-independent__.
__aspect-oriented_design__
__component_based_systems__.
__interactive_components__
__software_updates__.
__primary_goals__
__formal_analysis__,
__language-neutral__
__stochastic_process_algebra__
__prototyping_environment__
__synchronization_constraints__.
__slicing_techniques__
__Java_class_files__
__business_communication__
__information-flow_security__
__Symbolic_model_checking__
__dynamic_workflow__
__facilitates_easy__
__mapping_rules__.
__commitment_protocols__
__newly_released__
__testing_tools__.
__reactive_behaviour__
__state_transition_diagrams__
__test_adequacy_criteria__
__search_tool__.
__software_specification__.
__automatic_refinement__
__Concurrent_programs__
__message_sequences__
__user_friendliness__
__software_specifications__,
__software_metrics__,
__naturally_suited__
__lines_of_code__)
__free_software__.
__modern_languages__
__separately_compiled__
(__Business_Process_Execution_Language__)
__event-oriented__
__tuple-based__
__machine_organization__
__pre-_and_postconditions__.
__BPEL_engine__
__configuration_files__,
__continuation-passing_style__
__UML_sequence_diagram__
__maintenance_task__.
__dataflow_analysis__,
__process_logic__
__Change_impact_analysis__
__instance_level__
__protocol_analysis__,
__moderate-sized__
__trace_file__
__algorithmic_schemes__
__statically_checking__
__ISO_10303__
__algorithmic_skeletons__
__actor-oriented__
__structured_query_language__
__scripting_languages__,
__Visualization_Toolkit__
__correct_by_construction__.
__event_graph__
__relational_query__
__type_hierarchies__
(__run-time__)
__interface_specification__.
__parser_generators__
__symbol_manipulation__
__concrete_evidence__
__behavioral_aspects__
__expert_programmers__
__memory-management__
__type_checker__
__derivation_process__
__Object-oriented_databases__
__mathematical_notation__,
__shape_descriptions__
__mathematical_texts__
__runtime_verification__.
__capture_and_replay__
__faithfully_represent__
__domain_model__,
__annotation_language__
__dynamic_linking__.
__extended_finite_state_machine__
__filing_system__
__automatically_check__
__Session_types__
__higher-order_programs__.
__WS-CDL__.
__statically-typed__
__Design_rules__
__modelling_concepts__
__language_implementation__
__operational_transformation__
__language-based_security__
__hardware_compilation__
__ontology_merging__
__programming_logic__
__byte-code__
__parsing_algorithms__.
__rule_execution__
__coupling_measures__
__synchronous_programs__
__metamodel-based__
__defined_precisely__
__compiler_translates__
__W3C_standards__
__CO-OPN__
__practically_useful__.
__meta-objects__
__internal_representation__.
__behavioral_specifications__.
__formal_refinement__
__operational_mode__
__closely_mimics__
__unified_model__.
__tool_builders__
__program_transformation_technique__
__dialogue_manager__
__numerical_software__.
__Conceptual_graphs__
__reference_implementations__
__macro_language__
__synchronization_primitives__,
__object-oriented_approach__
__Category_theory__
__Oracle_10g__
__totally_independent__
__code_segments__,
.__NET_framework__
__code-generation__
__data_encapsulation__
__semantic_models__,
__data_definition_language__
__handling_multiple__
__language_dependent__
__precise_specifications__
__active_object__
__register_transfer__
__ontological_framework__
__type_extension__
__PDE_solvers__.
__simulation_languages__.
__UML_specifications__
__interface_specifications__,
__test_script__
__push-button__
__test_execution__.
__source_code_transformation__
__control_flow_analysis__
__transformation_process__.
__enabling_and_disabling__
__regression_test_suite__
__eager_and_lazy__
__conceptual_database__
__user-defined_types__
__compilation_strategy__
__petri_net__
__data_flow_and_control_flow__
__program_dependencies__
__architectural_structure__
__software_application__,
__migration_process__
__descriptive_models__
__transformation_language__.
__reference_material__
__type_check__
__programming_language_semantics__
__static_checks__
__tedious_and_error_prone__.
__component_interfaces__,
__formally_specified__,
__extension_language__
__framework_instantiation__
__programmer_writes__
__OCL_constraints__.
__Carrying_out__
__analysis.This_paper__
__view_definition__
__refinement_calculus__
__Java_software__.
__asynchronous_message_passing__.
__constraint_solvers__,
__proxy_objects__
__protocol_specification__.
__source_files__,
__specification_mining__
__temporal_analysis__
__abstract_specification__
__graphical_rendering__
__version_history__
__storage_allocation__.
__generative_programming__
__declarative_goals__
__program_logic__.
__automatic_theorem_proving__
__PL/I__,
__solid_modelling__.
__implementation_language__.
__run-time_code_generation__
__query_execution_engine__
__property_specification__
__control_abstraction__
__meta-circular__
__behavioural_specifications__
__mathematical_foundations__
__Higher_level__
__separate_concerns__
__test_strategies__.
__ETL_process__
__rule_processing__
__formal_design__
__class_structures__
__procedural_models__
__evaluation_functions__,
__loop_invariants__.
__World_Wide_Web_Consortium__
__composite_components__
__XQuery_1.0__
__authoring_environment__.
__program_components__.
__aspect_models__
__unit_testing_framework__
__modelling_tools__.
__diagram-based__
__GUI_applications__
__design_notations__
__completely_automatically__.
__formal_verification_techniques__.
__consistency-based_diagnosis__
__Objective_Caml__.
__OMG_standard__
__model_transformation_languages__
__process_definitions__.
__consistency_checks__.
__Semantic_Web_languages__
__execution_engine__,
__type-safe__,
__resource-sensitive__
__long-running_transactions__
__inference_engines__.
__semantic_model__,
__meta-information__,
__logical_representation__
__self-adjusting_computation__
__bottom-up__.
__heap-allocated__
__logical_model__
__Choreography_Description_Language__
(__Web_Services__
__execution_context__
__public_domain_software__
__message-passing_programs__.
__workflow_process__.
__object-based__,
__Vienna_Fortran__
__sufficiently_precise__
__central_idea__
__compositional_verification__.
__Higher-level__
__single-assignment__
__preconditions_and_postconditions__
__object_structure__.
__code_bases__.
__intermediate_models__
__divide-and-conquer_algorithms__.
__Java_byte_code__
__Evolutionary_testing__
__remote_method_invocation__.
__high_level_design__
__dataflow_programs__.
__code_generators__,
__workflow_design__.
__Design_pattern__
__autonomic_capabilities__
__communications_protocols__.
__ANSI_C__.
__Java_EE__
__subject-oriented__
__data_abstractions__,
__code_evolution__
__UML_design__
__user-input__
__Java_language__,
__algorithmic_details__
__design_elements__,
__control_flow_and_data_flow__
__components_and_connectors__.
__reusable_modules__
__translation_tool__
__state_machine__,
__temporal_specifications__.
__test_driver__
__formal_rules__
__concurrent_Java_programs__
__operator_overloading__
__container_classes__
__reuse_potential__
__program_manipulation__
__implementation_strategies__,
__Object-orientation__
__program_units__.
__OO_programming__
__object_persistence__
__sequential_programming__
__clean_semantics__
__parallel_programming_paradigms__
__platform_dependent__
__modelling_languages__,
__modeling_formalism__
__declarative_models__
__Automated_debugging__
__Dyalog_APL__
__conceptual_level__.
__linguistic_tools__
__Reference_Manual__
__XSLT_stylesheets__
__test_scripts__.
__update_processing__
__program_slice__
__Graph_transformation__
__diagram_editor__
__textual_languages__
__interactive_editing__
__knowledge_representation_scheme__
__higher_level_abstractions__
__AOSE_methodologies__
__unified_modelling_language__
__easily_extendable__
__atomic_components__
__relational_storage__
__declarative_languages__.
__Mobile_UNITY__
__model_checking__)
__data_flow_analyses__
__counter_example__
__graphics_interface__
__reactive_programs__
__consistency_rules__.
__visual_modelling__
__Simulink__,
__feature_composition__
__workflow_components__
__physical_schema__
__remote_procedure_calls__.
__kernel_language__
__process_specification__
__Model_management__
__flow_chart__
__XQuery_expressions__.
__ebXML_BPSS__
__reusability_and_extensibility__
__fully-fledged__
__XML_syntax__
__workflow_specifications__.
__main_features__.
__concurrent_object-oriented__
__high_cohesion__
__complex_entities__
__runtime_type__
__SQL_language__
__transformation_framework__
__Erlang_programs__
__service_ontology__
__knowledge_representation_languages__
__meaning-preserving__
__scenario-based_specifications__
__social_commitment__
__program_structures__,
__formal_method__.
__object-oriented_code__.
__Functional_Reactive_Programming__
__synthesis_tool__,
__concrete_implementations__.
__policy_language__,
__structure_diagrams__
__modeler__,
__mathematical_concepts__.
__Object-Role_Modeling__
__XML_transformations__.
__pattern-driven__
__XQuery_engine__
__deriving_test_cases__
__SystemC_designs__.
__Semistructured_data__
__multimedia_presentations__,
__structural_concepts__
__refinement_techniques__
__generating_explanations__
__real-time_reactive_systems__.
__SQL_extension__
__Java_language__.
__source_code_metrics__
__multithreaded_programming__.
__testing_environment__,
__safety_requirements__,
__natural_language_requirements__
__Eclipse-based__
__functional_representation__
__Haskell_98__
__parser_generation__
__process_descriptions__,
__relaxed_memory_models__.
__language_semantics__.
__constraint-solving__
__programmers_write__
__object_database__
__security_specification__
__logic_variables__
__complex_data_types__
__FORTRAN_II__
__Static_checking__
__code_instrumentation__,
__abstract_syntax_trees__.
__domain-specific_models__
__module_interconnection__
__delegation_and_revocation__
__architectural_descriptions__.
__procedural_programming__.
__numerical_codes__.
__logical_level__
__Java_applets__,
__query_processing_and_optimization__
__class_inheritance__
__formal_theories__
__side-effect_free__
__service_description_language__
__reactive_programs__.
__reverse_engineering_tool__
(__high-level__)
__UML/SPT__
__generation_tool__.
__dependency_analysis__,
__concurrent_objects__,
__byte_codes__
__actual_implementations__.
__weaving_process__
__event_handler__
__aspect_composition__
__ownership-aware__
__functional_specification__,
"__off-the-shelf__"
__model_generator__
__Promela__.
__coordination_models__.
__tool-set__
__formal_validation__
__answer_set_solvers__
__extensibility_mechanisms__
__bug_finding__
__static_program__
__multidimensional_data_model__
__concurrent_object-oriented_programs__.
__machine_description__
__amorphous_slicing__
__control_model__.
__graphical_representation__,
__white-box_testing__
__syntax-preserving__
__abstract_level__.
__JavaServer_Pages__
__XML_encoding__
__workflow_model__.
__anomalous_situations__
__objected-oriented__
__consistency_criteria__
__Extended_Finite_State_Machine__
__object-oriented_techniques__.
__model_verification__,
__self-adjusting_computation__.
__atomic_transactions__.
__modern_programming_languages__.
__Kahn_Process_Network__
__active_rules__,
__Access_control_policies__
__declarative_networking__
__knowledge_representation_language__
__use_case_scenarios__
__object-oriented_programming_language__.
__previously_unrelated__
__language_definition__.
__Dynamic_slicing__
__multiple_paradigms__
__source-language__
__service_interfaces__,
__implementation_independent__
__implicit_parallelism__
__vendor-neutral__
__formal_grammar__
__programming-language__
__simulation_engine__,
__UML_2.0__,
__bit-true__
__transformation_operators__
__adaptation_policies__.
__compensation_mechanism__
__service_choreography__
__active_objects__,
__Control_flow__
__model-driven_approach__
__database_schema__,
__composition_languages__
__Semantic_Web_Rule_Language__
__WS-BPEL_2.0__
__verification_procedure__.
__Component_Object_Model__
__Tcl__.
(__JADE__)
__language_description__
__generic_libraries__
__safety_case__
__assembly_languages__
__natural_language_description__
__propagation_patterns__
__database_languages__.
__XML_access_control__
__briefly_reviewed__,
__atomic_objects__
__program_synthesis__,
__algorithms_and_data_structures__,
__security_views__
__multithreaded_Java_programs__.
__efficient_runtime__
__query_optimizers__.
__propagation_algorithm__.
__XPath_and_XQuery__
__database_views__
__API_documentation__.
__design_level__,
__graphical_languages__.
__interaction_models__,
__symbolic_logic__
__behavioural_model__
__database_models__.
__implementation_language__,
__parallel_image_processing__.
__control_programs__.
__manipulation_language__
__reuses_existing__
__behaviour_modelling__
__textual_languages__,
__design_documents__,
__model-to-model_transformation__
__database_transactions__,
__symbolic_model_checker__
__GAN__
__source-to-source_transformations__
__executable_assertions__
__VDM-SL__
__abstraction_techniques__.
__automated_code_generation__
__change_propagation__,
__symbolic_simulation__,
__PDP-8__
__modeling_concepts__.
__formally_represent__
__logical_inference__.
__visual_programming_environment__
__object-oriented_modelling__
__full-blown__
__programmable_logic_controllers__
__design_artefacts__
__software_requirements_specifications__
__code_bases__,
__stream_X-machine__
__code_analysis__.
__dynamic_impact_analysis__
__execution_framework__.
__Java_source_code__.
__FT-MPI__
__Real-Time_Maude__
__lets_designers__
__message-passing_programs__
__semantic_models__.
__authorization_logic__
__Windows_applications__
__automated_theorem_prover__
__automatic_differentiation__,
__interprocedural_dataflow_analysis__
__text_formatting__
__design_documents__.
__SAT_solving__.
__programming_styles__,
__behavior_description__
__unit_test_cases__
__model_checking__:
__extended_transaction_models__
__dynamic_languages__.
__MATLAB®__
__transformation_functions__.
__ER_diagram__
__object-oriented_software_design__
__text_editors__.
(__Software_Cost_Reduction__)
__pattern_matchers__
__protocol_implementation__.
__automatically_inserts__
__static_single_assignment_form__
__additional_facilities__
__fairly_complicated__
__re-architecting__
__code_integrity__
__graphical_documentation__
__adaptation_techniques__.
__CSP-OZ__
__DL_reasoning__
__HDL_code__
__program_parallelization__.
__java_programs__.
__tool_chain__,
__programming_style__,
__object_interactions__.
__timing_schema__
__Dynamic_binary_translation__
__logic_language__
__smoothly_integrates__
__implicit_constraints__
__orthogonal_persistence__
__data_transformations__,
__concurrent_object__
__message_sending__
__formal_verification_methods__
__type_analysis__.
__simulation_traces__.
__flow_diagrams__
__value_passing__
__structuring_techniques__
__application_functionality__,
__abstraction-refinement__
__shared_dataspace__
__mixin-based__
__syntax-driven__
__XML_publishing__
__bytecode_instrumentation__
__architectural_model__,
__exception_analysis__
__agent_behaviours__
__conditioned_slicing__
__Hadoop_MapReduce__
__skeleton_based__
__architectural_tactics__
__pearl__
__modular_architectures__
__program_structure__,
__modular_structure__.
__PLC_programs__
__distributed_programming__,
__Functional_requirements__
__ProM__
__data_structures__;
__biomolecular_systems__.
__target_platform__
__design_intent__,
__web_interactions__.
__language_interpreter__
__logic_programming_languages__.
__code_transformations__,
__dataflow_programming__
__wrapper_generation__
__RDF/RDFS__
__object_encapsulation__
__Smalltalk-80__,
__primary_contributions__
__file_organizations__.
__business_protocols__.
__test_input_generation__
__heuristic_rules__,
__Platform_Independent_Models__
__software_connectors__.
__test_programs__,
__interactive_user_interface__
__generation_tools__
__intermediate_language__,
__COBOL_programs__
__program_analyses__,
__source-to-source_transformation__
__logically_sound__
__Parallel_systems__
__visual_query__
__algorithm_animation__.
__Lisp_programs__
__theoretical_basis__,
__FIPA_ACL__
__easily_configurable__
__code_generation_tool__
__text_editor__.
__modular_design__,
__process_definition_language__
__semantic_data_model__
__modular_architecture__,
__correctness_proof__.
__made_easy__
__Interface_Definition_Language__
__CORBA_IDL__
__communicative_acts__,
__contract_specifications__
__highly_readable__
__graph_pattern_matching__
__verification_environment__.
__shading_language__
__fault_sets__
__WSDL-S__
__access_control_requirements__.
__agent_communication_language__
__use_case_descriptions__
__test_generation_tool__
__closely_reflects__
__markup_languages__,
__transformation_operators__.
__model_composition__.
__intermediate_language__.
__concrete_syntaxes__
__Modeling_languages__
__specification_notation__
__query-answering__
__Java_components__.
__scientific_programming__
__Formal_Tropos__
__behavioral_VHDL__
__code_analysis__,
__load_generator__
__MAS-ML__
__queueing_network_model__
__declarative_query_language__
__stored_program__
__complex_information_systems__
__Microsoft_Access__
__functional_model__.
__test_case_generator__
__domain_independent__,
__automatically_proving__
__IEEE_Std_1471__
__Stratego/XT__
__abstract_views__
__student_programs__.
__knowledge_acquisition_tools__
__colored_Petri_nets__.
__distributed_execution__.
__procedural_programs__.
__object_systems__.
__static_analyzers__
__transformational_programming__
__expected_behavior__.
__graphical_languages__
__version_2.0__.
__software_specification__,
__agent_reasoning__
__typed_intermediate_language__
__file_structure__,
__class_hierarchy__.
__dynamic_rebinding__
__Concurrent_ML__
__constraint_specification__
__modeling_constructs__.
__Ptolemy_II__.
__automated_test_data_generation__
__aspect-oriented_programming_languages__
__highly_modular__,
__view_mechanism__
__grid_service_composition__
__semantic_specification__
__editing_operations__,
__Generic_Haskell__
__Type_classes__
__UML_statechart__
__strongly_typed__,
__distinguishing_feature__
__based_simulation__
__document_reader__
__inference_techniques__,
__Erlang_programs__.
__agent_interaction__.
__related_languages__.
__design_aid__
__digital_system_design__
__fits_naturally__
__clear_definitions__
__source_program__.
__implementation_strategy__.
__smart_pointers__
__domain_specific_language__
__automated_code_generation__.
__Assertion-based__
__program_fragments__,
__Unix_systems__
__highly_optimised__
__higher-order_languages__
__object-oriented_language__,
__statechart_diagrams__
__Java_APIs__
__type-checked__
__timing_analyzer__
__design_specifications__,
__analysis_methodology__,
__graphical_presentation__
__separate_compilation__,
__distinguishing_properties__
__macro_data_flow__
__BPEL_processes__,
__Input_validation__
__specification-based_testing__.
__model-checking_tools__
__interface_definitions__
__object-oriented_analysis__,
__service_description__.
__static_properties__
__machine_interpretable__
__development_method__,
__deductive_verification__
__integration_testing__,
__recent_enhancements__
__metric_suite__
__Minerva__
__program_composition__
__higher-level_abstractions__
__policy_specification_language__
__automated_analysis__.
__modular_systems__.
__conceptual_framework__,
__business_artifacts__
__automatic_verification__,
__Rule_Markup_Language__
__object-oriented_database_management_system__
__effect_analysis__
__fault-intolerant__
__statically_verify__
__functional_logic_languages__.
__language.This_paper__
__statistical_computing__
__Ada_compiler__
__Ownership_types__
__protected_objects__
__formal_method__,
__Proof-carrying_code__
__header_files__
__XQuery_processing__
__geometric_tolerances__
__hypermedia_authoring__
__related_languages__
__logical_language__,
__highly_interactive__.
__collateral_evolutions__
__synchronous_language__
__proof_checker__.
__feature_modeling__,
__aspect_model__
__Low_level__
__Coverage_metrics__
__user-programmable__
__visual_interaction__.
__Formal_models__
__design_phases__,
__programming_effort__,
__syntax_tree__
__Extended_Static_Checking__
__execution_models__,
__UML_and_OCL__
__declarative_and_procedural__
__conceptual_representation__
__Lexical_Functional_Grammar__
__version_3.0__
__dynamic_service_composition__.
__specific_features__,
__automatic_programming__.
__RTL_designs__.
__mathematical_expressions__,
__code_fragments__,
__an_Eclipse_plugin__
__CPN_Tools__.
__SQL/DS__
__PERL__
__semantic_descriptions__,
__feature_dependencies__
__reference_manual__.
__agent_interaction_protocols__.
__mapping_tool__.
__formally_correct__
__analysis_engine__
__knowledge_representation_formalisms__.
__automated_static_analysis__
__workflow_patterns__,
__executable_codes__
__RTL_descriptions__
__the_SPIN_model_checker__
__linguistic_phenomena__.
__runtime_verification__,
__temporal_behavior__.
__pointcut_languages__
__explicitly_formulated__
__integration_patterns__
__relational_database_schemas__
__testability_transformation__
__uncertain_knowledge__.
__hardware_organization__
__dynamic_class_loading__.
__scientific_programming__.
__software_watermarking__.
__mutation_analysis__.
__Micro_Edition__
__query_facilities__.
__ontology_editor__
__file-level__
__software_documents__.
__debugging_programs__
__defeasible_reasoning__,
__UML_2.1__
__Java_class_files__.
__change_history__.
__execution_semantics__.
__communication_behavior__.
__basic_requirements__
__generating_test_cases__
__easily_extensible__,
__dynamic_adaptation__,
__UML_designs__.
__user-interface__,
__programming_framework__.
__data_sublanguage__
__Ada_packages__
__hierarchical_model__,
__declarative_debugger__
__Intermediate_Format__
__obligation_policies__
__RBAC_policy__
__Domain_ontologies__
__Java_reflection__
__Java_Applet__
__HRT-HOOD__
__design_abstractions__
__security_specifications__.
__communicating_sequential_processes__
__information_flow_policies__
__basic_primitives__
__dynamic_symbolic_execution__
__Proof_planning__
__specific_concerns__
__runtime_information__.
__testing_process__,
__visibility_control__
__aspect_language__
__concrete_execution__
__program_transformation_techniques__
__frequently_asked_questions__
__version_management__,
__design_representations__.
__Bitstream_Syntax_Description__
__schema_creation__
__memory_consistency__.
__symbolic_processing__
__Java_developers__
__document_type_definitions__
__functional_design__.
__architectural_description_language__
__automatically_recovers__
__hypermedia_design__
__fruitfully_applied__
__well-formedness_rules__
__belief-desire-intention__
__concurrency_issues__
__first_order_predicate_logic__
__preliminary_performance_results__.
__abstract_actions__
__ER_schema__
__Microsoft_Visual_Studio__
__modeling_notations__.
__high_level_programming_languages__
__MySQL_database__
__design_automation_tools__.
__easy_to_read__,
__visual_programming__,
__fully_symbolic__
__Z_notation__
__standard_Prolog__
__UML_state_machines__.
__deductive_synthesis__
__Abstract_data_types__
__user-interactive__
__dynamic_web_applications__.
__declarative_specifications__
__extended_finite_state_machines__.
__interaction_protocol__.
__query_optimizer__,
__parameter_passing__,
__PR-OWL__
__pseudo_code__
__recursive_data_structures__,
__developed_independently__.
__aspect-oriented_composition__
__user-friendly_interface__
__flow_diagram__
__multi-threaded_Java_programs__.
__tool_suite__,
__forward-chaining__
__modeling_concepts__,
__property_specification_language__
__synchronization_constructs__
__conceptual_data_model__
__abstract_syntax__,
__requirement-driven__
__controlled_natural_language__
__object-oriented_database_system__
__autonomous_units__
__parallel_libraries__
__temporal_extensions__
__bare-bones__
__test_program_generator__
__tool_chains__
__typed_languages__
__Fortran_90__,
__programmer_specifies__
__running_programs__.
__colored_Petri_net__
__code_level__
__security_kernel__
__atomic_execution__
__graph_queries__.
(__object-oriented__
__layout_tools__
__problem_solving_tasks__.
__coverage_based__
__statically_analyzes__
__functional_logic_languages__
__physics-based_animation__
__compilation_techniques__,
__formal_requirements_specification__
__symbol_table__
__protocol_synthesis__
__HDL_description__
__fault-tolerant_systems__,
__Petri-net-based__
__general_purpose_languages__
__CAD_environment__
__synchronous_message-passing__
__gradual_refinement__
__control_flow_graph__.
__rule_engine__.
__queuing_models__,
__declarative_language__.
__spatio-temporal_constraints__.
__machine_descriptions__
__OO_systems__.
__rule_templates__
__IMS_QTI__
__parallel_programming_environment__.
__communication_traces__.
__Problem-oriented__
__ESC/Java2__
__context_sensitive__,
__simulation_language__,
__answer_set_solver__
__DB2__'s
__interprocedural_program__
__low-level_languages__
__dynamically-generated__
__assembly_language_programs__
__closure_conversion__,
__static_typechecking__
__the_Spin_model_checker__
__abstract_types__.
__informal_requirements__
__protocol_converters__
__interpreted_language__
__WS-CDL__,
__declarative_languages__,
__LUSTRE__
__exception_propagation__
__state-based_testing__
__software_requirements_specification__
__component_description__
__WSDL_description__
__tree_data_structures__
__diagrammatic_notations__
__formal-methods__
__Semantic_Web_ontologies__.
__intra-module__
__higher_abstraction_level__
__meta-object__
__pointer_programs__
__generic_structures__
__state-based__,
__Simulink/Stateflow__
__XML-compliant__
__tabled_evaluation__
__shallow_embedding__
__timing_specifications__
__commit_protocol__,
__concurrent_data_structure__
__intermediate_format__
__program_inputs__.
__protocol_validation__
__program_elements__,
__parse_tables__
__eXtensible_Stylesheet_Language__
__UML_designs__
__component_interactions__,
__real-time_operating_systems__,
__automatic_test_data_generation__
__a_transformational_approach__
__transactional_workflow__
__validation_purposes__.
__software_frameworks__,
__program_optimizations__.
__misuse_case__
__dead_variable__
__certifying_compilation__
__symbolic_techniques__.
__specific_functionality__.
__formal_specification_languages__.
__final_design__
__distributed_application__,
__automatic_model_generation__
__activity_models__.
__relational_database_technology__.
__machine_architectures__.
__rapid_application_development__.
__Graph_transformations__
__conceptual_integrity__
__GUI_components__
__declarative_multi-paradigm__
__diagnosis_method__,
__conformance_test__
__graphics_editor__
__reasoning_engine__.
__CORBA-compliant__
__circuit_description__.
__easily_understood__.
__stream_processing_engine__
__follow-me__
__external_schema__
__validation_tool__.
__goal-directed__,
__stepwise_refinement__.
__Jeliot_3__
__class_loaders__
__SCR_requirements__
__static_type_systems__
__conceptual_schemas__.
__QVT-R__
__object_modelling__
__dead_code__
__hardware_interface__.
__language_level__
__asynchronous_processes__.
__Message_sequence_charts__
__communication_acts__
__definition_formalism__
__Verilog-AMS__
__Object_Modeling_Technique__
__UML_statecharts__.
__Java_application__,
__stakeholder_goals__.
__automatic_discovery__
__UML_notation__
__static_code_analysis__.
__assembly_instructions__.
__Java_Expert_System_Shell__
__constraint_solving_techniques__
__static_typing__,
__pre-_and_postconditions__,
__automatically_locates__
__interactive_theorem_proving__
__Jade__,
__provably_safe__
__rule_execution__.
__ER_diagrams__
__automated_reasoning_systems__
__Automated_tools__
__SQL_tuning__
__behavioral_requirements__
__Analysis_techniques__
__Answer_Set_Programming__,
__Answer_set_programming__
__program_efficiency__
__associative_processing__
__Isabelle/HOL__,
__Ada_83__
__Clone_detection__
__temporally_extended__
__finding_bugs__
__test_inputs__,
__software_life-cycle__
__A-7__
__intermediate_representation__,
__executable_program__
__Fortran_77__.
__high_level_Petri_nets__
__state_model__,
__model_builder__
__parallel_language__.
__typed_feature_structure__
__ellipsis_resolution__
__source_language__.
__graph_transformation_techniques__
__Parametric_polymorphism__
__frame_structures__
__late_binding__,
__object_oriented_languages__.
__oriented_language__
__inheritance_mechanism__
__hardware_description_language__,
__process_composition__
__algorithmic_language__
__grammar_based__
__COBOL_programs__.
__symbolic_expressions__,
__communicating_processes__,
__logical_rules__,
__assembly_instructions__
__Concurrent_systems__
__object-oriented_programming__:
__debugging_tool__.
__Algol-like__
__easily_modifiable__
__relational_database_design__
__reasoning_capability__.
__program_construction__,
__list_structures__.
__library_calls__
__permission-role__
__Design_by_Contract__,
__Data_types__
__interface_specification__,
__weakly_typed__
__familiar_concepts__
__type_casts__
__test_adequacy__
__protocol_specification__,
__code_level__.
__statically_typed__,
__development_phases__,
__process-algebraic__
__state_space_analysis__
__application_development_environment__
__algebraic_transformations__.
__a_Petri_net-based__
__exceptional_behavior__
__an_object-oriented_data_model__,
__UML_class_models__
__declarative_query_languages__
__at_Carnegie-Mellon_University__.
__program_text__.
"__high-level__"
__data_conversion__.
__logic_programming_language__,
__organizational_policies__
__generic_framework__.
__component_libraries__
__executable_specifications__.
__cross-cut__
__user_requirement__.
__textual_language__
__extensible_markup_language__
__Full_Maude__
__Arden_Syntax__
__custom_tailored__
__service_specifications__.
__diagramming_tool__
__manual_refinement__
__SCORM_2004__
__logic-based__,
__automatic_code_generation__,
__performance_estimation__,
__conceptual_data_modeling__
__conformance_testing__,
(__Scalable_Vector_Graphics__)
__proof_assistants__.
__based_models__,
__Process_algebra__
__technical_domains__
__efficient_simulation__.
__graphical_tools__.
__base_classes__.
__cross-cutting_concerns__,
__Hyper/J__
__aspect-oriented_concepts__
__intermediate_languages__.
__language_extension__.
__use_case_scenarios__.
__explicit_state__
__development_methodologies__,
__exception_flow__
__LOTOS_specifications__.
__functional_behavior__.
__behavioural_description__
__procedural_program__
__Data_structure__
__APL_functions__.
__design_tradeoffs__,
__mathematical_concepts__,
__assignment_statements__,
__programming_examples__
__Protocol_analysis__
__procedural_languages__,
__abstraction_mechanisms__.
__testing_method__,
__specification_documents__.
__automated_translation__
__SDL_specification__
__assist_developers__
__Formal_techniques__
__adds_additional__
__software_measures__.
__requirement_specifications__,
__architectural_constraints__,
__ontology_language__,
__architectural_view__
__Problem_frames__
__function_blocks__.
__automatic_mapping__
__software_birthmark__
__binary_executables__
__ill-typed__
__modelling_environment__
__VHDL_or_Verilog__.
__graph_manipulation__
__concrete_syntax__.
__markup_language__,
__modelling_constructs__
__object-relational_mapping__
__procedural_code__
__components_and_connectors__,
__code_inspection__.
__agent_programming__.
__weakly-coupled__
__plugin-based__
__monitoring_facilities__
__mainstream_programming_languages__
__rational_agents__,
__reactive_layer__
__programming_framework__,
__specification_tool__
__partially_automate__
__test_paths__.
__SystemC_designs__
__fault_injection_tool__
__heap-allocated_data__
__greatly_aid__
__significantly_eases__
__timed_Petri_net__
__visual_query_language__
__front_ends__.
__program_behaviors__.
__easily_added__.
__visual_form__.
__User_Interface_Description_Language__
__relational_models__.
__specific_views__
__pointer_programs__.
__statechart-based__
__relational_DBMS__.
__business_level__
__executable_processes__.
__Business_Process_Modeling_Notation__
__Object-oriented_design__
__First-order_logic__
__modeling_constructs__,
__functional_correctness__,
__specification_techniques__.
__OO_programs__.
__readily_understandable__
__object-oriented_features__.
__derived_classes__
__object_views__,
__basic_principles__,
__program_execution_traces__
__bus_interfaces__
__Linux_device_drivers__
__automatic_test_case_generation__
__dynamic_class_loading__,
__type-preserving_compiler__
__GRID_superscalar__
__software_toolkit__
__high-level_primitives__
__operating_system_kernel__.
__proof-carrying_code__.
__Remote_attestation__
__secure_channels__.
__flow-oriented__
__multiple_contexts__.
__visual_programming_environments__
__interaction_types__
__XQuery_processor__.
__object-oriented_methodologies__
__multimedia_ontology__
__automatically_translated__
__negotiation_model__.
__Probabilistic_model_checking__
__SDL_specifications__
__Real-Time_Calculus__
__compositional_analysis__
__linguistic_description__
__GUI_programming__
__high-level_programming_languages__.
__strictly_defined__
__W3C_XML_Schema__
__Java_Server_Pages__
__specification_and_description_language__
__Testing_Profile__
__instrumentation_framework__
(__Web_Ontology_Language__)
__tool-assisted__
__fuzzy_Petri_nets__
__orchestration_language__
__formal_specification_language__.
__composition_language__
__maintainability_and_reusability__
__version_2.0__,
__formal_definitions__.
__architectural_model__.
__Ada_code__
__checking_properties__
__data-type__
__program_dependence_graph__
__reverse_engineering_techniques__.
__Use_case__
__SAS_macro__
__program.This_paper__
__incrementally_add__
__reference_documentation__
__multiparadigm_programming__
__silicon_compiler__
__open_source_components__.
__packet_sniffer__
__design_specification__.
__function_points__.
__object_invariants__
__compatibility_analysis__
__component_composition__,
__VHDL_descriptions__.
__concise_manner__.
__runtime_systems__,
__secure_systems__,
__bulk_types__
__XML_languages__
__physical_units__
__separating_concerns__
__integrity_checking__,
__class_hierarchy__,
__XQuery_Update_Facility__
__architectural_level__.
__interchange_formats__
__standard_SQL__.
__abstract_data_structures__
__program_representation__.
__substantially_simplify__
__reflexion_model__
__architectural_principles__,
__CSP_specifications__
__MOF-based__
__UML_models__:
__formal_framework__,
__testing_tool__,
__object_hierarchies__
__reference_immutability__
__reuse_technique__
__exploration_tool__
__document_type_definition__
__platform_independent_models__
__composite_operations__
__ontology_representation__
__executable_model__
__composite_states__
__Event-driven_Process_Chains__
__runtime_checks__.
__object_oriented__,
__automatically_verifies__
__requirements_engineer__
__Naked_Objects__
__graphical_formalism__
__formally_modeled__
__Industrial_strength__
__functional_logic_programming__
__termination_analyzer__
__security_protocol_implementations__.
__component_connectors__.
__program_checking__
__formalized_knowledge__
__modeling_formalism__.
__Snort_rules__
__concurrent_process__
__Provably_correct__
__modularity_and_reusability__
__irregular_pyramid__
__extension_mechanism__.
__calling_contexts__.
__code.This_paper__
__thread-modular__
__production_code__.
__transactional_execution__
__generic_procedures__
__error_checking__,
__process_executions__
__predicate_dispatch__
__method_inlining__
__method_lookup__
__Eclipse_plugin__
__computational_algorithms__.
__directly_executed__
__coordination_patterns__.
__OO_language__
__rule_language__.
__process_descriptions__.
__channel_passing__
__formal_proofs__.
__change_propagation__.
__fault_types__,
__primarily_intended__
__component_framework__,
__formal_approaches__.
__diagram_notation__
__refinement_calculus__.
__high_abstraction_level__
__Extended_abstract__:
__abstract_interfaces__
__plan_representation__
__dataflow_diagrams__
__programming_language_constructs__.
__reusable_building_blocks__
__library_components__.
__performance_analysis_tools__.
__report_generation__.
__symbolic_names__
__explicitly_separates__
__probabilistic_representations__
__dynamic_linking__,
__test_case_execution__
__planning_component__
__Safety_Critical_Java__
__game_logic__
__spatio-temporal_constraints__
__anti-patterns__.
__trace_analysis__,
__real_time_scheduling_theory__
__WSDL_descriptions__
__editing_tools__.
__scripting_environment__
__architectural_analysis__.
__late_binding__.
__programming_primitives__
__WS-SecurityPolicy__
__an_object_oriented_language__
__structuring_concepts__
__array_language__
__safety_property__,
__chart-based__
__applicative_languages__.
__graphic_editor__
__widely_accepted_standards__
__ODE__,
__compositional_semantics__,
__highly_extensible__
__test_plan__.
__program_elements__.
__database_structures__.
__formally-defined__
__command_set__
__visual_programs__
__hardware_descriptions__.
__MSC-based__
__abstract_syntax_trees__,
__database_model__.
__menu_driven__
__bug_detection_tools__
__proof-carrying__
__counting_rules__
__formal_frameworks__
__Information_models__
__exception_detection__
__data_flow_diagram__
__program_development_environment__.
__XML_language__
__vector_graphics__.
__object_manager__
__Formal_semantics__
__lexical_scoping__
__state_space_traversal__.
__expression_language__
__formally_specifies__
__control_design__,
__physical_domains__
__behavioural_specification__
__integration_test__
__process_modeling_language__
__An_object_oriented__
__numerical_code__
__synchronization_constructs__.
__application_binaries__
__performance_predictor__
__state_transition_models__
__bytecode_verifier__
__lexical_analyzer__
__SIMAN_simulation__
__database_views__.
__definition_languages__
__OO_concepts__
__shared-state__
__semantically-rich__
__C++0x__
__Extensible_Stylesheet_Language__
__concurrency_primitives__
__concurrent_object-oriented_languages__
__verification_method__,
__UML_state_diagrams__
__mutable_data_structures__
__heap-manipulating_programs__.
__compositional_approach__
__program_analysis_tools__.
__easily_instantiated__
__clone_detection__,
__object_oriented_programming_languages__
__execution_strategies__.
__attack_graphs__,
__Object-oriented_programs__
__program_design__,
__algorithms.This_paper__
__selective_undo__
__self-modifying_code__.
__core_functionality__.
__native_code__,
__error-tolerance__.
__agent_communication_languages__.
__Crosscutting_concerns__
__workflow_diagrams__
__template_engine__
__forward_recovery__
__Java_servlets__
__programming_knowledge__.
__GUI_applications__.
__data-flow__,
__object_code__,
__test_designer__
__component-based_design__.
__safety_analyses__
__Java_class_library__.
__graph_rewriting_systems__.
__transformation_engine__.
__model_creation__,
__executable_tests__
__verification_methodology__,
__XML_signature__
__hierarchical_planner__
__visual_styles__
__regular_expression_pattern_matching__
__automatically_composing__
__Rational_Software_Architect__
__unified_representation__
__composite_objects__,
__Layered_Queueing_Network__
__BPMN_models__
__composite_process__
__subtype_polymorphism__
__product_engineers__
__Two-Level_Grammar__
__deadlock_analysis__
__pattern_specification__
__orchestration_engine__
__Ada_programs__.
__XML_representations__.
__message_sequence_chart__
__high-level_descriptions__.
__modular_components__.
__PL/SQL__
__mechanical_devices__.
__structuring_mechanism__
__state_machine_model__
__implied_scenarios__.
__class_testing__
__BDD_based__
__product_line_variability__
__the_probabilistic_model_checker_PRISM__
__UPPAAL__,
__action_based__
__layout_generator__
__grid_service_composition__.
__macro_expansion__
__structural_reflection__
__statically_compiled__
__declarative_language__,
__refactoring_tool__
__reusable_software_component__
__logical_formalisms__.
__resource_based__
__compiler_implementation__.
__record-oriented__
__Fault_tree__
__dataflow-oriented__
__Semantic_MediaWiki__
__human_expertise__,
__LCF-style__
__Concurrent_Haskell__
(__object-oriented__)
__user-extensible__
__coordination_language__.
__automated_composition__
__type_checkers__
__Google's_MapReduce__
__incremental_modification__
__object_graphs__.
__fault-intolerant_program__
__OLE_DB__
__explicitly_parallel_programs__
__true_concurrency__.
__AspectC++__.
__abstract_state__
__hierarchical_refinement__
__partial_validation__
__transition_path__
__co-simulation__,
__type_definition__
__low-level_software__
__Conceptual_Dependency__
__WS-Policy__.
__Description_Language__)
__automatic_abstraction__
__Semantic_Web_ontologies__
__Fortran_95__.
__exogenous_coordination_language__
__data-flow_information__
__Apache_Ant__
__program_refinement__
__Abstract_Syntax_Trees__
__Object-Z__,
__trait-based__
__orchestration_languages__
__contract_checking__
__high-level_Petri_net__
__Sun's_Java__
__aspect-oriented_languages__
__Java_servlet__
__code_instrumentation__.
__textual_requirement__
__business_contracts__.
__object-oriented_style__
__parameterized_classes__
__action_description_language__
__automated_synthesis__
(__XML-based__
__automatic_monitoring__
__ontology_reuse__.
__&psi__;-__SSA_representation__
__proof_transformation__
__CSP-OZ-DC__
__open_nesting__
__object-oriented_concepts__,
__concurrency_constructs__
__black-box_components__
__verification_process__,
__Interface_Mutation__
__safety_proofs__
__JavaBeans_components__
__extension_mechanisms__.
__Test_case_generation__
__Pathway_Tools__
__program_dependence_graphs__.
__similarity-based_reasoning__
__checking_compatibility__
__automated_test_generation__
__parametric_geometry__
__freeform_feature__
__SoC_design_flow__
__binding_times__
__task_modelling__
__semantic_constraints__,
__event-driven_programming__.
__ownership_types__
__business_components__.
__reasoning_mechanism__,
__fine-grained_concurrency__
__an_object-oriented_language__,
__deliberation_process__
__Ariadne__,
__inheritance_and_polymorphism__.
__minimal_effort__
__object-oriented_models__.
__conversation_patterns__
__the_unified_modeling_language__
__modeling_notation__.
__hierarchically_organised__
__explicit_connectors__
__relative_debugging__
__dynamically_modifiable__
__structuring_principles__
__formal_reasoning__,
__dynamic_instrumentation__.
__level.This_paper__
__inexact_reasoning__
__briefly_introduced__,
__event-condition-action_rules__
__RDF/XML__
__dataflow_graph__.
__inconsistency_and_incompleteness__
__formal_methodology__
__architectural_component__
__Conflict_analysis__
(__compile-time__)
__hardware-software_systems__.
__class_descriptions__
__XML_language__.
__working_draft__
__structure_editor__
__software_models__,
__ARINC_653__
__design_language__.
__assembly_level__
__programming_methodology__,
__world_views__
__the_Glasgow_Haskell_Compiler__.
__memory_leak_detection__
__machine_language__.
__numerically_efficient__
__takes_into_account__,
__Structured_programming__
__side-effect-free__
__Co-Array_Fortran__
__business_semantics__
__Functional_Classes__
__rewriting_techniques__,
__dynamic_memory__.
__design_exploration__,
__Open_OODB__
__web_service_orchestration__.
__component_configuration__
__ASF+SDF__
__Fortran_77__,
__program_specializer__
__MPI_programs__,
__interacting_features__
__differencing_algorithm__
__usage_models__.
__Definite_Clause_Grammar__
__client_programs__.
__development_toolkit__
__formally_verifiable__
__well-typed__.
__Model_Builder__
__SP-GiST__
__high-level_description__
__UML_notation__.
__specification_based__
__architectural_power__
__rewriting_engine__
__higher_level__,
__inter-procedural_analysis__
__assembly_structure__
__Stochastic_Activity_Networks__
__Web_workload__
__rich_vocabulary__
__meta-level_reasoning__
__updating_process__.
__execution_monitoring__,
__update_language__
__independent_processes__.
__designed_specially__
__concurrency_primitives__.
__transition-based__
__Test_data_generation__
__Protocol_synthesis__
__exchange_format__
__workflow_views__
__strength_reduction__.
__Scenario-based_specifications__
__informal_specification__
__schema_definitions__
__higher_abstraction_levels__
__control_rules__.
__operational_specifications__
__reflective_programming__
__SWRL_rules__.
__augmenting_traditional__
__Microsoft®__
__database_query_language__
__stochastic_Petri_nets__,
__definition_language__,
__core_functionalities__
__domain_specific_languages__.
__easy-to-read__
__abstraction_mechanisms__,
__conceptual_queries__
__easily_modified__.
__workflow_logic__
__compiler_back-end__
__syntactically_valid__
__hardware_compilation__.
__host_programming_language__.
__irregular_parallelism__
__perfectly_fits__
__updating_mechanism__
__diagram_editors__.
__exception_handlers__.
__hierarchical_decomposition__,
__synthesizable_RTL__
__auto-completion__
__software_visualization__,
__restructuring_transformations__
__network_programming__.
__star_diagram__
__logical_specifications__
__interface_builder__
__considerable_flexibility__
__SBML_models__
__program_families__
__synchronous_communication__,
__visual_programming_environments__,
__behavior_specifications__
__Pasta-3__
__behavioural_descriptions__
__syntax_trees__.
__Microsoft_Word__,
__static_checker__
__static_views__
__firewall_policies__.
__class_definitions__,
__asynchronous_communications__
.__NET_Common_Language_Runtime__.
__transaction_level_modeling__.
__atomic_steps__
__object-oriented_approach__.
__hierarchical_graph__
__privilege_separation__
__formal_techniques__,
__syntax_checking__
__verification_framework__.
__informal_description__
__mathematical_notation__.
__Common_Gateway_Interface__
__syntax-aware__
__arbitrary_domains__.
__black-box__,
__Partial_redundancy_elimination__
__applies_equally__
__Declarative_Networking__
__refactoring_rules__
__large_ontologies__.
__SQL-92__
__semantic_data_models__.
__nested_array__
__high-level_design__,
__database_programming_language__.
__agent_programming_languages__.
__ODMG-compliant__
__extraction_patterns__,
__Application_code__
__transformation_steps__,
__syntactic_errors__.
__schema_transformations__.
__XQuery_Full-Text__
__ECA_rules__,
__declaratively_specified__
__supporting_tool__,
__multi-dimensional_arrays__,
__dynamically_loadable__
__higher-order_programming__
__underlying_semantics__
__partial_behavioral_reflection__
__ontology_versions__
__functional_programming_language__,
__high_level_languages__.
__stepwise_refinement__,
__DBMS_architecture__
__Estelle__,
__State_machines__
__evolvable_systems__.
__workflow_schemas__
__formally_represented__
(__OWL-S__)
__Web_programming__
__alternative_semantics__
__SystemC/TLM__
__functional_verification__,
__stochastic_process_algebras__.
__access_paths__,
__requirements_documentation__
__code_producer__
__object_oriented_databases__
__schema-aware__
__the_very_idea__
__multi-shot__
__interesting_features__:
__UML_tool__
__CORBA-based_applications__.
__intermediate_representations__,
__pointer_variables__.
__synchronous_and_asynchronous__.
__finite-domain_constraint__
__variability_analysis__.
__design_recovery__.
__social_simulations__
__program_specifications__.
__imperative_constructs__
__dynamic_program_analysis__
__device_emulation__
__answer_set_programs__
__model-checking_tools__.
__XML_languages__.
__program_analysis__:
__database_programming__
__object_composition__,
__language-independent__.
__Component_models__
__agent_programming_language__.
__statement_sequences__
__visual_scripting__
__Object_oriented_programming__
__structural_views__
__workflow_specification__,
__code_portability__
__interaction_protocol__,
__ALGOL_60__,
__module_calculus__
__Concept_analysis__
__process-oriented__,
__interrupt_handling__,
__product_line_requirements__
__syntax-directed_editors__
__visual_modeling_language__
__generative_design_patterns__
__Query/View/Transformation__
__process_manager__
__pretty-printing__
__dynamic_weaving__
__synchronous_reactive__
__formal_language__,
__Sound_and_complete__
__imperative_code__
__Simulink_model__
__java_programs__
__software_artefact__
__checked_automatically__
__sequence_diagram__.
__data_structures__)
__functional_programming_languages__,
__language_support__.
__main_characteristics__.
__program_structures__.
__Haskell's_type__
__concurrent_object-oriented_programming__.
__bug_patterns__.
__object_oriented_database__
__uncaught_exceptions__
__partial_evaluators__,
__evolving_programs__.
__existing_APIs__
__instruction_sequences__,
__OSI_protocol__
__composition_operators__,
__dynamic_semantics__.
__description_format__
__object_oriented_programming_languages__.
__XSLT_transformation__
__task_descriptions__.
__host_language__.
__running_code__.
__pre-defined__,
__Smalltalk-80&trade__;
__static_type-checking__
(__black_box__)
__Semantic_Web_Rule_Language__.
__Z_notation__.
__active_database_systems__.
__command_language__,
__bi-directional_translation__
__message_exchanging__
__state_transition_systems__
__Modula-2__,
__metaobject_protocol__
__forward_engineering__,
__dynamic_description_logic__
__oriented_programming__
__standard_libraries__.
__Trellis/Owl__
__modular_extensions__
__access_permissions__.
__separation_kernel__
__ExpertFit_distribution-fitting__
__&lgr__;-DB
__virtual_sensors__.
__communication_refinement__
__business_contract__
__diagnostic_program__
__high-level_architecture__
__code_refactoring__
__performance_profiles__.
__conflict_handling__
__reusable_libraries__
__distributed_data_structures__.
__static_typing__.
__base_class__.
__ANSI_C__,
__related_documentation__
__syntactic_matching__
__deduction_systems__
__system-level_design_methodology__
__synchronous_models__
__Microsoft_Word__.
__modelling_tool__,
__program_documentation__,
__automated_analysis__,
__model_transformation_languages__.
__gradually_refined__
__library_functions__.
__collection_types__
__context_models__,
__SPIDER__,
__component_specifications__.
__hierarchical_design__,
__logic-programming__
__dynamic_allocation__,
__synchronous_languages__.
__tool_environment__,
__workflow_definition__.
__modular_reasoning__.
__fully_mechanized__
__static_program_analysis__,
__higher_level_language__
__algorithm_animation__,
__scenario_diagrams__
__formally_specified__.
__Computational_reflection__
__parsing_technique__.
__net-lists__
__executable_UML__
__tracer__,
__ill-formed_input__
__source_code__:
__graph_reduction__,
__mock_objects__
__basic_arithmetic__
__stress_testing__,
__coverage_criteria__,
__modular_programs__
__goal_decomposition__
__UML_metamodel__
__constraint_logic_programming__,
__machine_language__,
__temporal_requirements__.
__software_quality_models__.
__XML_transformation__
__shell_scripts__
__functional_models__,
__grammar_writing__
__object-oriented_classes__.
__model_reduction__,
__Java_programmers__.
__reactive_rules__
__constraint_database__
__statically_scoped__
__process_definition__.
__procedure_summaries__
__well_suited__.
__Object-Oriented_Action_Semantics__
__statically_checked__
__modelling_framework__,
__Ada_programs__,
__generative_programming__.
__symbolic_model_checkers__
__operator_overloading__.
__device_specific__
__MetaEdit+__
__augmented_transition_network__
__pipelined_microprocessors__.
__program_variants__
__BDI_agent_model__
__constraint-based_local_search__
__language_implementations__.
__method_call_sequences__
__interaction_overview__
__definition_language__.
__relational_systems__,
__aspect-oriented_systems__
__database_environments__,
__Grammatical_Framework__
__precise_semantics__.
__automated_theorem_provers__.
__composition_mechanisms__,
__COMDES-II__
__UML_standard__
__site-independent__
__a_Petri_net_based__
__performance_measurement_tool__
__Web_Services_composition__
__state_models__.
__software_structure__,
__data_interchange__,
__imperative_program__
__interchange_format__.
__Java_classes__,
__ontological_analysis__
__locking_mechanisms__
__XSLT_programs__
__reliable_systems__,
__query_specification__.
__commonsense_knowledge__,
__integrity_policy__
__nursing_terminology__
__refinement_checking__
__inheritance_graph__
__specification_refinement__
__test-generation__
__MOF-compliant__
__imposes_strict__
(__Object_Management_Group__)
__correctness_checking__
__Commodity_Grid__
__Region-based_memory_management__
__feature_diagrams__
__generic_types__.
__business_contracts__
__prototype_compiler__
__IBM_370__
__type-safety__.
__performance_benchmark__
__pre-built_components__
__source-to-source_translation__
__lazy_functional_languages__.
__object_viewers__
__verifying_security_properties__
__XML_representation__
__low-level_implementation_details__
__concurrent_programming_languages__.
__parsing_techniques__.
__STM_implementation__
__sequential_languages__
__Symmetric_Lisp__
__SML/NJ__
__message_sequence__
__Mining_software_repositories__
__language_processors__.
__source_code_repository__
__intuitively_clear__
__Bird-Meertens__
__concurrent_software_systems__
__procedural_interface__
__dynamic_reconfigurations__
__software_architecture_description__
__O-MaSE__
__description_techniques__
__temporal_behaviour__
__descriptive_power__.
__PROMELA__,
__historical_queries__.
__GUI_software__
__UML_statechart_diagrams__.
__module_concept__
__machine_simulator__
__program_maintenance__.
__recent_additions__
__composite_structure__
__CPN_models__
__UNIX_environment__.
__semantic_representations__,
__Information_Retrieval_techniques__
__rigorous_specification__
__business_process_specifications__
__description_framework__
__procedural_programming_languages__
__dynamically_typed_languages__
__MOF_2.0__
__pointer_alias_analysis__
__Visual_modeling__
__Control-flow__
__use-cases__.
__requirements_models__,
__deductive_database_systems__
__error_repair__
__medium-level__
__Eclipse_plug-ins__
__control_program__.
__Labeled_Transition_System__
__state_charts__
__document_formatting__
__behavior_model__.
__visual_notations__.
__table_driven__
__perspective-based_reading__
__object_bases__.
__Protégé_ontology__
__architectural_description__,
__Activity_diagrams__
__signature_creation__
__high_abstraction_level__.
__information_flow_properties__.
__Syntactic_analysis__
__Visual_Basic_6.0__
__programming_patterns__,
__interacting_finite_state_machines__
__Common_LISP__
__state_transition_machines__
__probabilistic_behaviour__
__refactoring-aware__
__data_dependency_analysis__
__semantic_layer__
__dynamic_taint_analysis__
__bytecode_interpreter__
__binary_encoded__
__DEN-ng__
__transformation_languages__.
__self_contained__
__programming_conventions__
__Program_synthesis__
__direct_manipulation_interface__
__Relation-based__
__graphical_output__.
__integrity_enforcement__
__procedure_invocation__
__Eclipse_IDE__
__AOP-based__
__operator_faults__
__TCL__
__data_flow_graph__,
__transformational_approach__
__state_graphs__.
__external_interfaces__.
__component_library__,
__specification_technique__,
__workflow_models__,
__external_functions__
__specification_matching__
__unit_test__,
__deductive_inference__
__international_standard__.
__look-and-feel__
__dynamic_typing__,
__interaction_diagrams__.
__primary_objectives__
__Java_objects__.
__reverse_execution__
__object_oriented_software__
__Automated_verification__
__state_diagram__.
__abstract_interpreter__
__visual_formalisms__
__verification_conditions__,
__application-independent__,
__test_scenarios__,
__portable_software__
__deployment_descriptors__
__library_routines__,
__detailed_reports__
__security_labelling__
__UML_extensions__
__synthetic_workload_generator__
__context-sensitivity__.
__bytecode_language__
__type-checking__.
__class_library__.
__computational_reflection__,
__visual_sentences__
__object-oriented_technology__,
__IDL_compiler__
__control_flow_graph__,
__message_exchange_patterns__
__architectural_requirements__.
__procedural_style__
__test_purposes__,
__high_level_abstractions__
__security_concepts__.
__WAC_model__
__Formal_systems__
__efficiently_executable__
__Prolog_program__
__runtime_monitoring__.
__object-oriented_classes__
__basic_components__.
__executable_models__.
__functional_specification__.
__mathematically_defined__
__high-level_abstraction__
__selective_regression_testing__
__user_customization__
__ESC/Java__
__efficient_code_generation__
__IBM®_DB2®__
__bytecode_instrumentation__.
__an_automatic_theorem_prover__
__race_detection__.
__parallel_programming_assistant__
__commercial_grade__
__unified_framework__,
__reflection_mechanism__
__teaching_programming__.
__compiler_backend__
__abstract_model__,
__reusable_parts__
__SQL_standard__
__split-transaction__
__simulation_program__,
__Firefox_browser__
__baroque__
__formal_logic__,
__upward_compatible__
__Data_model__
__architecture_description__,
__CoSMoS__
__program_instrumentation__.
__debugging_facilities__.
__Data_abstraction__
__query_optimization_techniques__.
__compatibility_checks__
__history-sensitive__
__Modula-3__.
__object-oriented_techniques__,
__generating_test_sequences__
__product_specific__
__web_service_interfaces__.
__semantic_analyses__
__APL_code__
__Executable_UML__
__stakeholder_concerns__
__rule_language__,
__component_interconnection__
__deliberative_agents__.
__vulnerability_signature__
__temporal_query_language__
__module_algebra__
__library_modules__
__Execution_traces__
__visualisation_tool__,
__model_transformation_techniques__
__hardware_description__.
__powerful_abstractions__
__RDFS_and_OWL__
__behavioural_properties__
__functional_features__.
__program_decomposition__
__visual_programming_environments__.
__semantic_correctness__
__QoS_specifications__
__Transformation_techniques__
__Reference_Model_for_Open_Distributed_Processing__
__rewriting_logic_semantics__
__RTL_circuit__
__conditional_statements__,
__reusable_library__
__speculative_optimizations__.
__Lisp_implementation__
__composition_mechanisms__.
__basic_principles__.
__virtual_class__
__apparel_products__.
__Aspect-orientation__
__language_specifications__
__dependability_models__
__TPC-App__
__microcode_compiler__
__code_templates__
__geographical_database__
__well-structured__,
__program_specialization__,
__architectural_elements__,
__Prism-MW__
(__Graphical_User_Interface__)
__forward_error_recovery__
__Web_services_compositions__
__JVM_bytecode__
__data_translation__.
__semantic_integration__,
__BPEL_specifications__
__queuing_networks__,
__substantial_benefit__
__memory_safety__.
__test_adequacy_criterion__
__Dynamic_linking__
__real-time_process_algebra__
__Performance_Model_Interchange_Format__
__conversion_tool__
__contention_management__.
__Hindley-Milner_type_inference__
__Handel-C__,
__Web_ontologies__
__forward_reasoning_engine__
__XML_syntax__.
__Basic_Profile__
__traditional_RDBMS__
__program_specification__,
__coordination_artifacts__
__programming_examples__.
__repair_actions__.
__visual_models__,
__Type_theory__
__interface_specifications__.
__Prolog_engine__
__flow-sensitive__,
__definition_facility__
__communicating_finite_state_machines__.
__platform-specific_models__
__external_interfaces__
__correctness_proofs__,
__incremental_construction__
__Microsoft_Visual_Basic__
__pointer-manipulating__
__source-level_debugging__
__rule-based_languages__
__basic_components__,
__object-relational_database_systems__
__concurrency_semantics__
__evolutionary_design__.
__object-oriented_paradigm__
__composite_WS__
__CSP_specifications__.
__requirements_document__,
__sequential_dependencies__
__modular_programming__.
__axiomatic_specifications__
__memory_layouts__.
__protocol_specification_language__
__program_source_code__,
__VHDL_code__.
__local_scope__.
__graphical_programming_language__
__conceptual_MD__
__bounds_checking__.
__domain-specific_language__.
__HPF/JA__
__theorem_proving_techniques__
__abstraction_mechanism__,
__coarse-grain_dataflow__
__EER_model__
__black-box_and_white-box__
__coding_conventions__,
__primary_component__
__quality_attribute_requirements__
__Linux_distribution__
__DARPA_Agent_Markup_Language__
__MDA_framework__
__behavioral_profiles__
__pointer_operations__
__composition_patterns__.
__compliance_verification__.
__nested_transaction_model__
__creating_animations__
__modeling_formalisms__.
__Graphical_Interval_Logic__
__layout_engine__,
__tabular_expressions__
__debugging_purposes__.
__concurrent_software_systems__.
__pointer_based__
__OO_programs__
__color_management__
__main_innovations__
__object-oriented_methods__.
__Java_Native_Interface__
__function_generator__
__automatic_instrumentation__
__SCR_specification__
__Java_packages__
__incremental_parser__
__optimising_compiler__
__dominance_trees__
__Semantic_Web_reasoning__
__declarative_specifications__.
__UML_state_machine__
__runtime_execution__.
__Description_Logic_reasoning__
__testing_framework__,
__user_interface_specifications__
__meta-objects__.
__coding_standards__,
__affine_partitioning__
__Formally_verifying__
__PADS/ML__
__Data_dependencies__
__domain-centric__
__embedded_control_applications__.
__Hoare's_CSP__
__queueing_network_model__.
__MPEG-21_Digital_Item_Declaration__
__join_calculus__
__passive_testing__.
__development_framework__,
__behavior-preserving__
__source-to-source_transformations__.
__FSM_model__
__Rockwell_Collins__
__test_oracle__.
__Provenance_information__
__XML_instances__
__existing_frameworks__,
__functional_and_object-oriented__
__SPiDER__
__XML_parser__.
__error-resistant__
__choreography_language__
__cognitive_model__,
__load_tests__
__hybrid_architectures__.
__low-level_behaviors__
__CPU/FPGA__
__semantic_metrics__
__incremental_validation__
__compatibility_testing__
(__Ontology_Web_Language__)
__runtime_state__
__Eclipse_plugins__
__MDD-based__
__VHDL_or_Verilog__
__user_environments__
__visual_specifications__
__service_ontology__,
__domain_specific_languages__,
__UML_activity_diagrams__,
__explicit_deallocation__
__behavior_descriptions__
__compiler_generation__.
__Perl_script__
__structural_conformance__
__collaboration_diagram__
__design_aspects__.
__fully_integrated__.
__software_instrumentation__
__parameterized_modules__
__synchronous_programming__
__dynamic_software_architectures__.
__editing_commands__
__event-driven_simulations__.
__modular_structure__,
__array_data-flow_analysis__
__function_invocations__.
__process_definition__,
__BPMN_and_BPEL__
__functional_validation__.
__behaviour-preserving__
__Flash_Lite__
__adaptation_rules__,
__sequential_systems__,
__region_inference__
__timed_asynchronous__
__stack_implementation__
__Software_design_patterns__
__component_behavior__.
__parallel_programming_environment__,
__reusable_abstractions__
__text_editor__,
__correctness_verification__
__linguistic_knowledge_sources__
__circuit_description__,
__Haskell's_type_classes__
__user_friendly__,
(__Structured_Query_Language__)
__ontological_commitments__
__correctness_proof__,
__partial-order_methods__
__computation_paradigm__.
__execution_semantics__,
__evolutionary_testing__,
__architecture_frameworks__
__an_enhanced__,
__Java_Development_Kit__
__typed_assembly_language__,
__transparent_fashion__.
__UML_standard__.
__formal_assertions__
__Modelica__,
__machine-readable_format__
__RTL_IPs__
__LL_and_LR__
__control_abstractions__
__file_operations__.
__memory_safety__,
__directive-based__
__destructive_updates__
__block_diagrams__.
__exception_mechanism__
__collection_types__.
__Translation_validation__
__input_validation__.
__program_visualization__,
__Description_Language__,
__knowledge-acquisition_tools__
__concurrency_abstractions__
__HOL_Light__.
__database_update__.
__static_WCET_analysis__
__automatically_derived__.
__Pet_Store__
__scenario-based_specification__
__binary_executables__,
__context_dependency__
__Isabelle/Isar__
__graphically_represented__
__directed_testing__
__typed_language__
__abstract_specification__.
__source_code_and_documentation__
__Process_Definition_Language__
__entity-relationship_models__
__sequence_generator__.
__modelling_notations__
__behavioral_interface_specification_language__
__structural_coverage_criteria__
__AspectJ_programs__
__Transformation_rules__
__server_pages__
.__NET_framework__,
__object_identifiers__,
__Symbolic_evaluation__
__declarative_definition__
__Incremental_parsing__
__access_control_rules__.
__aspect-oriented_requirements__
__massively_concurrent__
__Program_specialization__
__reasoning_mechanism__.
__architectural_specifications__.
__dynamic_aspects__.
__formal_approaches__,
__bulk_synchronous_parallel__
__CnC__
__program_specialization__.
__specification_languages__:
__quick-fix__
__mutation-based_testing__
__model_composition__,
__semantic_anchoring__
__combinational_equivalence__
__state-based_specification__
__safe_regression_test_selection__
__constraint_management__
__MDA_tools__.
__coordination_abstractions__
__object_creation__,
__generated_test_cases__
(__Unified_Modeling_Language__),
__Bousi~Prolog__
__Lyee-Calculus__
__OCL_constraints__,
__initially_conceived__
__component-based_architectures__.
__object-oriented_database_system__.
__policy_definition__
__intraprocedural_and_interprocedural__
__intermediate_languages__,
__safety_and_liveness__.
__clone_group__
__software_model_checking__,
__UML_notation__,
__architectural_layers__
__IMS-QTI__
__user-defined_types__,
__glass-box__
__musical_structures__.
__SCR_specifications__
__test_coverage_criteria__.
__U-Datalog__
__steering_behaviors__.
__pretty_printer__
__specification_errors__.
__data_mining_tool__,
__invariant_checking__
__user_defined_functions__
__transforming_programs__
__synthesis_methodology__.
__TTCN-3__,
__implementational_aspects__
__DisCo__
__knowledge_representation_formalism__
__portable_manner__.
__constant_folding__,
__OpenMP_directives__.
__fully_verified__
__formal_underpinnings__
__concept_algebra__
__higher_order_functions__.
__Modern_programming_languages__
__abstract_datatypes__
__linear_algebra_libraries__
__replica_location_service__
__adjoint_code__
__increased_expressiveness__
__event_processing__,
__control_and_data-flow__
__inductive_assertions__.
__contract_language__
__XML_structures__.
__Simulink_models__.
__SAT_solving__,
__functional_test_cases__
__synthesizable_HDL__
__profiling_information__,
__runtime_checking__
__numerical_code__.
__SQL/XML__,
__HDL_descriptions__
__dynamic_frames__
__architectural_properties__.
__explicit-state__
__SystemC_code__
__freeform_features__
__TROLL_light__
__Theorem_proving__
__reengineering_framework__
__exploiting_parallelism__.
__object_persistence__.
__file_organization__,
__IMS-LD__,
__component_interaction__.
__transition_diagrams__
__coordination_language__,
__implementa-_tion__
__dependency_information__.
__usage_scenario__.
__ofobject-oriented__
__access_restrictions__,
(__Discrete_Event_System_Specification__)
__concurrent_behavior__.
__search_tool__,
__fail-soft__
__family_architecture__
__program_obfuscation__
__business_process_modeling_languages__
__Java_Beans__.
__Web_programming__.
__meta-rules__.
__MSC_connectors__
__flexible_user_interface__
__UML_notations__
__Web_Services__)
__grammar_writer__
__semantic_query_optimization__.
__big_step__
__logical_dependencies__
__copying_garbage_collector__
__workflow_designer__
__polytypic_programming__
__synchronous_languages__,
__computational_semantics__.
__higher_level_languages__
__formal_foundation__
__data_flow_diagrams__,
__class_diagram__,
__synthesis_procedures__.
__component_customization__
__Instruction_List__
__HyperText_Markup_Language__
__proof-checking__
__Common_Object__
__platform-based_design__.
__push-down_automaton__
__Query_Language__)
__argument_structures__.
__lazy_functional_languages__
__composition_model__.
__Berkeley_DB__
__high-level_abstractions__,
__Event-driven_programming__
__code_coverage_metrics__
__function_pointers__.
__web_programming__.
__NLP_components__
__semantic_bridges__
__Microsoft_Project__
__heap_properties__
__foundational_proof-carrying_code__
__visual_sentences__.
__style_checker__
__NLP_applications__,
__lexical_transfer__
__problem-solving_knowledge__
__legacy_programs__.
__Well-structured__
__concrete_realizations__
__large_phylogenetic_trees__.
__regression_test_suites__
__performance_analyses__.
__multiple_abstraction_levels__
__domain_modelling__
__support_tool__,
__heterogeneous_embedded_systems__
__modularity_and_reusability__.
__hardware-software_codesign__.
__object-oriented_specifications__
__statechart_diagrams__.
__critical_properties__.
__code-improving_transformations__
__constraint_definition__
__active_DBMS__
__undo_mechanism__
__declarative_rules__.
__architectural_concepts__.
__business_process_specifications__.
__foundational_ontology__
__generic_framework__,
__aspect-oriented_modeling__.
__physical_algebra__
__linguistic_mechanisms__
__design_notations__.
__DEC-10__
__interface_elements__.
__ActiveX_control__
__primitive_set__
__automatically_parallelizing__
__object_references__,
__temporal_object__
__Visual_language__
__XQuery_language__
__code_sharing__,
__graphical_notation__,
__conceptual_representation__.
__causally_connected__
__Set_theory__
__GPSS/H__,
__problem_frames__,
__underlying_semantics__.
__Language_extensions__
__CORBA_3.0__
__reverse_engineering_environment__
__choreography_and_orchestration__
__fuzz_testing__
__abstract_model__.
__rule-based_programming__.
__easily_extended__.
__Formal_methods__,
__semantic_representation__,
__linguistic_structures__.
__state_exploration__.
__rapid_system_prototyping__.
__reactive_modules__
__reaching_definition__
__continuation-passing_style__,
__reference_process_models__
__debugging_aid__
__loop_invariants__,
__GNU_Emacs__
__demand-driven__,
__UML_interaction_diagrams__.
__descriptive_language__
__Stochastic_Simulation_Algorithm__
__context_sensing__
__continuous_models__.
__syntax_definition__
__symbol_processing__
__application_frameworks__,
__concurrent_language__.
__Software_Reconnaissance__
__document_generation__
__agent_communication_language__.
__Java_implementation__.
__subsumption-based__
__translation_process__.
__model_checked__.
__simulation_interoperability__
__semantic_structures__,
__pipelined_machines__
__ASP_programs__
__narrowing-driven_partial__
__rule-based_programs__.
__diagram_editors__
__SQL_statement__.
__failure_behaviour__
__distributed_arrays__.
__reverse_engineering_approach__
__concurrent_object-oriented_language__
__escape_analysis__.
__binary_executables__.
__Markup_Language__),
__run-time_code_generation__.
__Coloured_Petri_net__
__debugging_facilities__
__service_specifications__,
__Prolog_code__
__first-class_citizens__.
__Structured_design__
__problem_solving_methods__.
__modular_robots__,
__embedded_real-time_software__.
__safety_guarantees__,
__open_agent_societies__.
__social_expectations__
__proof_scripts__
__multi-paradigm_language__
__Java_multithreading__
4D/__RCS__
__constraint-based_modeling__
__behavior_model__,
__CORAL__.
__data-intensive_business__
__hierarchical_tree__.
__high_level_constructs__
__communicating_objects__.
__implicit-invocation__
__smart_play-out__
__RT-UML__
__ACL_semantics__
__association_algebra__
__dynamic_structure__,
__finite-state_verification__
__bytecode_verifier__.
__CS-XML__
__user-level_thread__
__arbitrarily_complicated__
__platform-independent_models__
__goal_specification__
__parameterized_types__
__MetaLex_XML__
__fragmented_object__
__Linux_device_drivers__.
__visual_language__,
__tree-like_data_structures__.
__ladder_diagram__
__ETL_process__,
__data_races_and_deadlocks__.
__answer_set_programs__.
__constraint_programming_languages__
__high-level_declarative__
__Meta-AspectJ__
__activation_mechanism__
__script_language__,
__event_queue__.
__transaction_models__,
__data-flow_and_control-flow__
__visual_programs__.
__XML_updates__.
__round-tripping__
__semantic_description__,
__style_rules__
__simple_programs__,
__scene_descriptions__.
__EFSM-based__
__lingua_franca__
__software_functionality__.
__domain_descriptions__.
__Open_Inventor__
__Java_bytecode_verification__
__conflict_detection_algorithm__
__formally_verified__,
__OWL_2_RL__
__interaction_sequences__.
__ANSI-C__.
__high_level_design__.
__concurrent_software__,
__call-graph__
__XML_algebra__
__rigorous_specifications__
__template_instantiation__
__exchanged_messages__.
__information-flow_policies__
__ownership_type__
__core_language__.
__manual_effort_required__
__scalable_performance__,
__natural_language_specifications__
(__Application_Programming_Interface__)
__dynamic_web_applications__
__CODASYL_database__
__maintaining_integrity__
__relationally_complete__
__$\textup{\textsf{Sharing__}}$
__high_level_specifications__
__logical_objects__
__Concurrent_Prolog__
__class_declaration__
__cost-based_optimizer__
__multithreaded_Java_programs__
__data_abstraction_facilities__
__Active_Server_Pages__
__large_libraries__
__state_machine_models__
__data_interchange_format__
__transformational_grammar__
__model_management_operators__
__application_developer's__
__generic_components__.
__Application_programmers__
__concurrent_languages__.
__automatic_program_generation__
__semantic_frameworks__
__XML_vocabularies__
__dependency_injection__
__rewriting_strategies__
__Boolean_operators__.
__cell_complexes__.
__biochemical_models__.
__generic_libraries__.
__object-oriented_analysis_and_design__,
__functional_enhancements__
__XML_schema__,
__minimal_effort__.
__authoring_environment__,
__SMIL_documents__
__speech_and_language_processing__.
__computational_logic__,
__Simulink/Stateflow__.
__Spec#__.
__incremental_garbage_collection__
__XSLT_stylesheet__
__soundness_proofs__
__asynchronous_hardware__
__compiled_programs__.
__trace_format__
__hierarchical_state_machines__.
__event-action__
__pointer_manipulation__
__specific_details__.
__simulation-based__,
__coverage_measurement__
__state-transition_diagrams__
(__IMS_LD__)
__CPS_conversion__
__mutable_state__.
__simulation_methodology__,
__BDI-based_agent__
__communication_styles__.
__unit_level__
__access_control_checks__
__APL2/PC__
__algorithmic_differentiation__
__Constraint_diagrams__
__mainstream_languages__
__programming_discipline__
__logical_representation__.
__TV-Anytime_metadata__
__declarative_debugging__
__assembly_languages__.
__WS-BPEL_process__
__model-view-controller__
__Prolog_predicates__
__stubs_and_skeletons__
__Prolog_interpreter__
__component_assemblies__
__OLTP_systems__.
__Software_Cost_Reduction__
__XML_Metadata_Interchange__
__device_configuration__.
__programming_principles__.
__Prototype_Verification_System__
__applicative_languages__
__program_dependence__
__semantic_analyzer__
__constructive_induction__,
__UML_specification__.
__browsing_semantics__
__previously_written__
__Synchronized_Multimedia_Integration_Language__
__dependent_components__.
__deductive_database_system__
__conceptual_database_design__.
__high-level_synthesis_tools__.
__Recent_extensions__
__architectural_constructs__
__logical_database_design__
__multi-agent_plans__
__data-flow_analysis__.
__XSLT_transformations__
__modular_compilation__
__An_algebraic_approach__
__BPEL_code__
__feature-oriented_programming__
__higher-order_abstract_syntax__,
__Type-directed__
__document-processing__
__modeling_primitives__.
__host_programming_language__
__compiler_generator__
__related_constructs__
__UML_state_machines__,
__offline_partial_evaluation__
__compilation_methods__
__test_models__.
__aspectual_requirements__
__Semantic_Web_standards__.
__concept_location__,
__reactive_programming__
__Emacs_Lisp__
__logic_programming_paradigm__
__target_code__.
__dynamic_priorities__.
__transformation_languages__,
__Excel_spreadsheet__
__compiler_transformations__.
__compiler_development__
__middleware_layer__.
__atomicity_properties__
__pure_functional__
__nominal_abstract_syntax__
__meta-programs__.
__simplification_techniques__,
__string_manipulation__
__trace_analyzer__
__program_modularity__
__interactive_behaviors__.
__dynamic_typing__.
__dynamically-scoped__
__Mixin_modules__
__modern_programming_languages__,
__source-level_transformation__
__machine_independent__.
__extending_UML__
__aspect-orientation__.
__π_calculus__
__operation_invocations__
__executing_programs__.
__Information-flow__
__protocol_specifications__,
__XML_DOM__
__action_languages__,
test-__based_pointcuts__
__unambiguous_specification__
__message_types__,
__programming_idiom__
__main_concerns__:
__Directed_model_checking__
__Eliot__
__language_extension__,
__mathematical_background__,
__AspectJ_compiler__
__Data_structures__,
__behavior_specification__,
__list_processing__,
__performance_instrumentation__
__behavior_descriptions__.
__OpenGL_ES__.
__design_principle__,
__loosely_coupling__
__stored_procedures__.
__Dynamic_process__
__meta-language__,
__advice_weaving__
__XPath/XQuery__
__indexed_sequential__
__message-passing_parallel_programs__
__code-tangling__
__integration_platform__,
__component_diagrams__
__aspect-oriented_languages__.
__low-level_programming__.
__language_specification__.
__C-like_languages__
__visual_editing__
__business_application__,
__functional_aspects__.
__dataflow_computation__
__formal_notations__,
__test-data_generation__
__program_modifications__.
__lazy_functional__
__CASE-tools__
__goal-driven__,
__dynamic_type_checking__
__visual_editors__
__XQuery_processor__
__BPEL_code__.
__algorithmic_description__
__AspectJ_programs__,
__Timed_Communicating__
__logic-based_reasoning__
__Language_constructs__
__Object_Teams__
__path-sensitive_analysis__
__quantum_programming_language__
__cyclic_structures__.
__relational_schema__.
__addressing_schemes__.
__automatic_completion__
__language_concepts__.
__specialization_patterns__
__checking_tool__.
__abstract_machine__;
__domain-specific_visual_language__
__fault-model__
__object-oriented_data_models__.
__access_path_selection__
__programming_language__;
__structural_subtyping__.
__University_of_Regina__.
__XML_specifications__
__weaving_aspects__
__dynamic_Web_pages__.
__programming_idioms__.
__Windows_device_drivers__.
__interface_definition_languages__
__incremental_elaboration__
__testing_tool__.
__unit-test_generation__
__query_mechanism__.
__straight-forward__.
__ITU-T__,
__CORBA_objects__,
__agent_organizations__
__type_inheritance__
__teaching_object-oriented_programming__.
__visual_language_generation__
__Reserved_Graph_Grammar__
__means-ends_analysis__
__runtime_exceptions__
__verification_engine__
__thick-client__
__early_development_stages__
__Abstract_State_Machine_Language__
__conformance_tests__
__Domain-specific_modeling__
__tool_chains__.
__integration_tests__
__Apache_Axis2__
__Ptolemy_II__,
__refinement_methodology__
__sender_invariance__
__Automated_reasoning__
__OWL_ontologies__,
__major_categories__:
__constraint_checking__.
__object-oriented_modelling__.
__Business_Process_Modelling_Notation__
__constraint_modelling__
__ontology_mappings__.
__concurrent_workflows__.
__PROW__
__prototyping_language__
__security_patterns__,
__xADL_2.0__
__regression_test_suite__.
__higher-level__,
__team_plans__
__programmable_logic_controller__
__text-to-scene_conversion__
__automatic_memory_management__,
__lazy_functional_programs__
__proof-ofconcept__
__refinement_checking__.
__GUI-driven__
__Web_service_descriptions__.
__managed_code__
__binary_format__
__deduction_engine__
__SQL_Tuning__
__output_formats__.
__extended_Petri_nets__.
__dynamic_integrity_constraints__
__high_level_models__
__definition_facilities__
__fine-tuned__,
__UML_design_models__
__fault-tolerant_software__.
__IIS*Case__
__software_module__.
__repair_policies__
__assertional_reasoning__
__schema_translation__
__ANSI_standard__
__WS-BPEL_2.0__.
__group_communication_primitives__
__proving_termination__.
__direct_integration__
__meta-modelling__.
__invocation_mechanism__
__Role_Activity_Diagrams__
__runtime_support__,
__integration_tool__
__UNIX_Consultant__
__Improving_efficiency__
__adequacy_criterion__
__CORBA_interfaces__
__semantic_interpreter__
__visual_editor__
__document_format__.
__S-PMIF__
__lexical_chaining__
__multimedia_synchronization__.
__concurrent_manipulation__
__multiple_representations__,
__open-nested_transactions__
middleware-__specific_concerns__
__ETL_design__
__class_descriptions__.
__data_translation__,
__Jeliot_3__.
__data-structures__,
__sequential_programming__.
__Programming_Support_Environment__
__application_generator__
__subscription_language__
__ambiguity_detection__
__program_design_language__
__graphical_primitives__.
__reactive_objects__
__reusable_code__.
__GOMS_models__
__unambiguous_definition__
__com-_ponents__
__structural_testing_criteria__
__modeling_formalisms__,
__high-productivity__
__compiler/interpreter__
__scoped-memory__
__calling_sequence__
__dynamic_loading__,
__shallow_binding__
__machine_independent__,
__writing_tool__
__Functional_programming_languages__
__programming_languages__;
__correctness_criterion__.
__cellular_models__.
__document_markup__
__architectural_pattern__,
__declarative_programming_languages__.
__high_level_abstraction__
__distributed_executions__
__restructuring_tool__
__Formal_correctness__
__forward_slicing__
__analysis_engine__.
__termination_inference__
__direct_execution__.
__interface_descriptions__,
__concurrent_constraint_programming__.
__discrete_event_simulation_models__.
__variation_point__
__concrete_implementation__.
__Petri_net_theory__.
__object_life_cycles__
__workflow_modelling__
__business_process_description__
__service_interaction_patterns__.
__Object-oriented_modelling__
__development_phase__,
__compliance_rules__
__Jess__,
__individual_activities__,
__dynamic_fault_tree__
__requirements_modeling__.
__compiler_front_end__
__high_level_primitives__
__tuple_centres__
__metamodeling_architecture__
__Distributed_Systems_Annex__
__AADL_models__.
__lan-_guage__
__Dependence_Net__
__role_modeling__
__requirements_specification_language__
__computing_Grid__
__centralized_database__
__rights_expression__
__Automated_theorem_proving__
__Petri_net_modeling__
__trace_theory__
__Automated_test_generation__
__proofs_of_correctness__,
__proof_assistants__,
__algebraic_reasoning__.
__graphical_description__
__temporal_logic_formulae__,
__successive_refinements__.
__interactive_theorem_prover__
__abstraction_techniques__,
__Java_program__,
__internal_concurrency__
__timed_state_space__
__peephole_optimization__
__XML_file__,
__verifying_security_protocols__
__formal_modelling_language__
__MetaEdit+__:
__synchronization_code__.
__object_oriented_analysis_and_design__
__program_analysis_techniques__.
__ETL_activities__
__ontological_semantics__
__compiled_languages__
__automatic_proof__
__Brinch_Hansen__
__procedural_animation__
(__low-level__)
__instruction_set_architectures__.
__fragmented_objects__
__based_solution__.
__transformation_language__,
__interactive_objects__,
__aspect_refactoring__
__reactive_components__
__state_transition_diagrams__.
__executable_test_cases__.
__user_programs__,
__SQL_language__.
__proactive_password__
__platform_independence__.
__library_development__
__maintainable_code__
__formally_analyzing__
__script_files__
__expressing_concurrency__
__graphics_library__.
__type_parameterization__
__runtime_enforcement__
__compilation_process__.
__pointer_aliasing__.
__protocol_engineering__.
__specification_patterns__
__dialectical_argumentation__.
__TCAS_II__
__model_based_testing__.
__interface_generator__
__bit-accurate__
__pre/post__
__fixpoint_computation__.
__control_constructs__,
__translation_validation__,
__heap-manipulating__
__view_definition_language__
__high_assurance_systems__.
__graphics_software__.
__RTL_hardware__
__OMNeT++__,
__CASE_tool__,
__physical_device__.
__dynamic_tainting__
__exploration_tool__.
__type_qualifier_inference__
__rule-base__.
__timed_behavior__
__optimizer_generator__
__parser_generators__.
__type_analysis__,
__application_programming__,
__context-triggered__
__model-driven_engineering__,
__compiler_writing__
__pointer_variables__,
__VRML_format__.
__source_control_repositories__
__dynamic_software_updating__
__register_sharing__
__concurrency_controller__
__checking_tool__
__application_independent__.
__&hellip__;)
__SPMD_programming__
__process_interaction__.
__syntax_analysis__.
__custom_memories__
__high-level_models__.
__process_topologies__
__distributed_Java_applications__
__bioinformatics_workflows__
__texture_editing__
__Labelled_Transition_System__
__linking_language__
__informal_reasoning__
__data-parallel_language__
__protocol_composition__.
__double_dispatch__
__PKI_trust__
__command_languages__
__renaming_problem__
__typeful_code_representation__
__general-purpose_languages__
__template_metaprogramming__
__meta-programming__,
__preprocessor_directives__
__computer_algebra_systems__,
__Dynamic_binding__
__concept_definitions__,
__program_proving__
__split_or_merge__
__collection-oriented__
__reactive_behaviors__.
__user_views__,
__knowledge_base_maintenance__.
__asynchronous_concurrent_systems__.
__XML_documents__:
__database_query__,
__well-formedness_rules__.
__ER_diagrams__,
__mechanized_proof__
__model_driven_approach__
__formal_correctness_proofs__
__ML-like_languages__
__rigorous_analysis__.
__merge_operator__
__based_model__,
__proof-carrying_code__,
__multiagent_platform__
__object_structures__,
__Eclipse_technology__
__abstract_state_machine__
__aspect_weaving__.
__typed_objects__
__procedural_programming__,
__Modula-3__,
__flow-insensitive__,
__abstract_classes__.
__recursive_descent_parsing__
__web-applications__.
__high-level_models__,
[__mc]square__
__relational_query_processor__.
__low-level_languages__.
__binary_translator__
__stream_operators__
__message-passing_primitives__.
__core_components__,
__specification_notations__
__ELLA__
__Sparse_BLAS__
__XML-based__,
__pre_and_post-conditions__
__case_tool__
__synthesis_flow__,
__speech-act_based__
__process-based__,
__Japanese_and_English__,
__sound_principles__
__Graph_rewriting__
__unification_based__
__multiple_abstraction_levels__.
__a_brief_survey__
__Behavioral_modeling__
__user_guided__
__access_protection__
__sample_databases__
__mathematical_knowledge__.
__command-and-control__
__makes_three_important_contributions__.
__highly_modularized__
__drawing_program__
__design_methods__:
__Web_Service_interfaces__
__machine-checkable__
__function_definition__,
__whitebox_fuzzing__
__research_platform__,
__UI_components__.
__computational_structures__.
__close_cooperation__
__automated_tests__.
__graphical_notation__.
__architecture_description_languages__,
__Java_bytecode_programs__
__map_algebra__
__user_manual__
__language_policy__
__advanced_software_engineering__
__bus_functional__
__diagrammatic_notation__
__syntax-directed_editing__
__interface_description__
__error-repair__
__training_material__.
__I/O_automata__.
__destructive_updating__
__multiple_instantiation__
__dynamic_test_generation__
__runtime_environments__,
__product_code__.
__preference_queries__.
__algorithmic_debugging__.
__procedural_abstraction__.
__generic_components__,
__Event_Analyzer__
__customizable_protocols__
__dynamic_inheritance__
__CORBA_security__
__engineering_environments__
__Query_Rewrite__
__integration_aspects__
__execution_plan__.
__query_optimizers__,
__architecture_exploration__,
__User-Defined_Functions__
__user-defined_aggregates__
__type_theories__,
__class_definition__,
__imperative_programming__,
__type_compatibility__
__wiki_markup__
__identification_techniques__.
__high_level_Petri_nets__.
__performance_debugger__
__validation_tool__,
__target_language__,
__action_execution__.
__autonomous_objects__,
__linked_structures__
__application_independent__,
__JBoss__.
__Spider_diagrams__
__Design_By_Contract__
__system's_capabilities__
__compiler_parallelization__
__compiler_passes__
__scene-graph__
__programing_language__
__video_documentaries__.
__functional_style__
__run-time_environment__,
__prototyping_process__.
__declarative_rules__,
__initial_performance_results__.
__inter-procedural__,
__cross-module__
__runtime_libraries__
__explanation-based_learning__,
__interface_components__,
__automatically_parallelize__
__assembling_components__.
__control_constructs__.
__JBOSS__
__Improving_data_quality__
__DL_ontologies__
__symbolic_execution_engine__
__XML-GL__
__component_types__.
__transaction-level_modeling__
__massively_parallel_computation__
__CLP_language__
__COSMOS__,
__HW/SW_interfaces__
__block-diagram__
__concurrency_analysis__
__software_design_patterns__.
__data-intensive_Web_applications__
__specific-purpose__
__translational_semantics__
__OSEK/VDX__
__UNIX_shell__
__restructuring_operations__
__finite_state_machine__,
__object-oriented_extensions__
__MVC-based__
__data_base_systems__,
__abstract_data_types__:
__parallelization_tool__
__linguistic_engineering__
__syntactic/semantic__
__detecting_errors__.
__applicative_language__
__control-flow_and_data-flow__
__graphical_browser__
__database_semantics__.
__LOTOS_specifications__
__Thread-based__
__Ada_95__,
__CSP_framework__
__Matlab_functions__
__SA-RT__
__completely_redesigned__
__command_line_interface__.
__cyclic_debugging__
__transformation_tools__,
__JUnit_test_cases__
__domain-neutral__
__asynchronous_method_calls__
__Algorithmic_skeletons__
__concurrent_components__.
__executable_specification_language__
__relies_heavily__
__static_type_checking__.
__assurance_requirements__
__method_overriding__
__Abstract_Syntax_Notation_One__
__logical_specifications__.
__bytecode_verification__.
__program_representations__.
__major_enhancements__
__java_program__
__pre-existing__,
__unified_theory__
__functional_features__,
__Java_class_library__
__component_adaptation__.
__formal_proof__.
__Abstract_machines__
__component_specification__,
__SDL_specifications__.
__goal-oriented__,
__HPF_compiler__.
__SWI-Prolog__.
__Python_interface__
__requirement_capture__
__behavior_specification__.
__orchestration_and_choreography__
__algorithmic_patterns__
__software_designs__,
__COBOL_code__
__description_format__.
__test_plan__,
__top-down__.
__Object-Z_specifications__.
__coordination_aspects__
__verifying_concurrent_systems__.
__class-based_object-oriented__
__software_modeling__,
__high-level_language__.
__primitive_operations__,
__PAM-Blox__
__PROTEUS__,
__coding_standard__.
__method_chunks__
__object-oriented_simulation__.
__coordination_languages__,
__host_language__,
__Reo_circuits__
__reflective_capabilities__
__communicating_automata__
__automated_refactoring__
__Spec#__
__scenario-based_specifications__.
__simulation/emulation__
__exhaustive_verification__
__sequencing_constraints__,
__language_level__,
__deduction-based__
__constraint-programming__
Syn-__Gen__
__pre-conditions__,
__Reverse_engineering__,
__higher_levels_of_abstraction__,
__formal_modeling__,
__Symbolic_Model_Verifier__
__reusable_modules__.
__visualization_capabilities__.
__type-unsafe__
__interpreted_languages__
__situated_agent__
__ontology_translation__
__component_compositions__
__parallel_program_design__
__PS-GRADE__
__Linda_language__
__an_object-oriented_application_framework__
__symbol_manipulation__.
__collective_commitment__
__requirements_documents__,
__self-modifying_code__,
__file_structures__,
__interprocedural_dependence_analysis__
__UML_artifacts__
__modeling_formalism__,
__easily_extensible__.
__OBO-Edit__
__authorization_language__
__declassification_policies__
__perceptual_components__.
__statically_verified__
__Markup_Language__,
__type_checked__
__property-oriented__
__intuitively_understandable__
__inference_mechanisms__.
__coupled_models__.
__Data_Independent_Accessing_Model__
__sequence_diagram__,
__chip_assembly__
__coding_style__,
__transaction_manager__.
__core_assets__,
__semantic_specifications__
__graphical_specification__
__instruction_set_design__.
__verification_methodology__.
__Data_Definition_Language__
__design_specification__,
__Lisp_dialect__
__refactoring_operations__
__reverse_engineering_environment__.
__Attribute_Driven_Design__
__nonprocedural_language__
__program_conversion__.
__static_analysis_techniques__.
__general-purpose_programming_languages__.
__preparation_phase__
__secondary_contribution__
__architectural_diagrams__
__architectural_documentation__
__SPARQL-to-SQL_translation__
__tabular_notation__
__reuse_libraries__.
__Java_IDE__
__Web_service_orchestration__
__architectural_primitives__
__executable_files__.
__verifying_programs__
__reflective_languages__
__CBD_process__
__parallel_functional_language__
__commitment_protocols__.
__spreadsheet_formulas__.
__access-control_policies__.
__arrow_notation__
__true_concurrency_semantics__
__architectural_rules__
__test_cases__;
__schema-evolution__
__component-based_development_process__
__aspect_mechanisms__.
semi-__automatically_generate__
__visual_specifications__.
__assembly-level__
__looping_constructs__.
__multidimensional_schemas__
__object-oriented_methods__,
__conceptual_data_models__.
__Windows_API__
__core_calculus__
__GUI_objects__.
__graphical_interaction__.
__reference_implementations__.
__certified_programs__
__class_library__,
__process_description__.
__alias_analysis__.
__type-safety__,
__generic_Bitstream_Syntax__
__tool-suite__
__logic_queries__.
__explicit-state_model_checking__
__multiagent_simulations__
__refactoring_tools__,
__RTL_implementation__.
__concurrent_modules__
__image_processing_library__
__Data_structures_and_algorithms__
__interface_definition_language__
__MS_Excel__
__Goal_models__
__Functional_coverage__
__general-purpose_programming_languages__
__logical_layer__
__behavioral_requirements__.
__declarative_constraints__
__abstract_classes__,
__qualitative_models__,
__J-Orchestra__
__finite_state_models__
__state_transition_machine__.
__program_units__,
__symbolic_debugger__
__DSP_software__
__Cadence_design__
__Unix_environment__
__executable_processes__
__BDI-style__
__past_executions__
__program_assertions__
__tabular_representations__
__verification_framework__,
__message_formats__.
__dynamic_aspects__,
__organizational_models__,
__handling_exceptions__.
__coupling_metrics__,
__remote_procedure_call_mechanism__
__functionally-defined__
__UML_statecharts__,
__relational_database_management_system__,
__control_panels__.
__prohibitively_difficult__
non-__heap_memory__
__representation_formalism__,
__multiple_dispatch__.
__SQL_syntax__
__query_optimization_techniques__,
__bytecode_subroutines__.
__cell_spaces__
__Abstract_state_machines__
__office_layout__
__building_customized__
__process_modeling_languages__.
__RESTful_Web_services__
__workflow_graphs__
__BPMN_diagrams__
__behavior_models__,
__legacy_Fortran__
__process_fragments__.
__behavioural_requirements__
__memory_layout__.
__Event_logs__
__Search_space__
__remote_debugging__
__specification_formalisms__.
__method_dispatch__.
__type_safe__.
__event_composition__
__theorem-prover__
__Declarative_knowledge__
__linguistic_descriptions__.
__two-level_morphology__.
__temporal_plans__.
__garbage_collection_algorithms__.
__query_set_specification__
__constraint_resolution__
__a_pragmatic_approach__.
__predicate/transition_net__
__control-flow_analysis__.
__User_defined__
__round-trip_engineering__.
__concurrent_logic_programs__
__object_allocation__,
__tool_demo__
__equivalence_checker__
__program_mutation__
__architectural_views__,
__concurrent_logic_programs__.
__business_process_model__.
__visual_debugging__
__BETA-BINDERS__
__graphical_modeling_tool__
__asynchronous_event-driven__
__semantic_levels__.
__event-sequence__
__Standard_Template_Library__
__container_classes__.
__executable_programs__,
__forced_simulation__
__EAA__
__sys-_tems__.
__logged_data__.
__Prolog_implementations__
__general-purpose__.
__FORTRAN_90__
__derived_classes__.
__scientific_programmers__
__view_updating__,
__higher-level_languages__.
__higher-level_language__
__behavior-preserving_transformations__
__communicating_X-machines__
__COSMIC_measurement__
__type-checking__,
__ASF+SDF__,
__natural_language_instructions__
__parser_construction__
__dynamic_verification__.
__morphological_processor__
__Oracle_PL_/_SQL__
__command_line_interface__
__Oracle_11g__.
__digital_logic_simulation__
__fault-tolerance_mechanisms__.
__program_termination_verification__
__Java_AWT__
__transformation_systems__.
__massively_parallel_machine__
__compatibility_and_replaceability__
__bottom-up_parser__
__Pascal_compiler__
__user_interface_components__,
__lambda_expressions__,
__Head-driven_Phrase_Structure_Grammar__
__storage_optimization__.
__statement_level__.
__semantics-directed_compiler__
__modelling_notation__
__semistructured_documents__,
__text-graphic__
__first-order_theorem_proving__.
__safety_policies__.
__ML_programs__.
__dynamic_allocation__.
__generating_extensions__
__stakeholders_involved__,
__behavioral_subtyping__.
__long-running_transactions__.
__language_translators__.
__Web_service_description__
__region_formation__
__structured_design__,
__separate_modules__.
__description_logic_reasoning__
__high-level_parallel_programming__
__natural_language_analysis__,
__Coverage_criteria__
__MAS_infrastructure__
__Petri-nets__
__IBM's_DB2__
__refinement_steps__,
__Reactive_planning__
__user_written__
__content_determination__
__strongly_typed_genetic_programming__
__assembly_programs__.
__performance_prediction_tool__
__UML_interaction_diagrams__
__FORTRAN_compiler__
__dialog_boxes__.
__modelling_concepts__,
__compatibility_tests__
__runtime_exceptions__.
__recursive_descent_parsers__
__dynamically-loaded__
__array-processing__
__behavioral_aspect__
__Alloy_specifications__
__profiling_tools__.
__attributed_grammars__
__business_data_processing__.
__schema_modification__
__model-checker__,
__HW/SW_partitioning__,
__reflective_language__
__WWW_interface__
__reusable_assets__,
__model-based_debugging__
__platform_architecture__,
__automatic_testing__.
__code_smells__,
__metro_maps__
__API_documentation__,
__pattern-matching_techniques__
__domain-specific_modeling__.
__modern_compilers__.
__language_syntax__,
__declarative_models__.
__annotation_layers__,
__compiler-compiler__
__metadata_aggregation__
__the_Spin_model_checker__.
__structured_editing__
__knowledge_processing_middleware__
__Modeling_Language__)
__formal_verification_techniques__,
__state_charts__.
__shared_memory_parallel_programs__.
__JIT_compilers__.
__dependability_models__.
__object-oriented_specifications__.
__annotation_framework__,
__style_rules__.
__constraint_specifications__
__Wide_Spectrum_Language__
__ad_hoc_querying__
__hybrid_control_systems__
"__impedance_mismatch__"
__variable_granularity__
__multilevel_transactions__.
__knowledge_base_refinement__
__main_originality__
__primitive_types__,
__declarative_description__
__MARTE_profile__
__user_interface_description_language__
__object-orientedness__
__interface_compatibility__
__Parsing_Expression_Grammars__
__Java_bytecodes__,
__reactive_systems__:
__higher-order_functional_languages__
__massively_parallel_computations__
__GPL_license__.
__embedded_languages__.
__atomic_transaction__
__dependence_testing__,
__code_fragment__.
__Spi_Calculus__
__Oracle_9i__
__interface_definition__.
__production-rule__
__formal_verifications__
__Estelle-based__
__multigrid_algorithms__.
__refinement_based__
__parallel_constructs__,
__programming_abstractions__.
__Static_typing__
__safety_constraints__,
__compositional_verification__,
__declarative_programming_language__
__proving_safety_properties__
__software_architectural_style__
__agent_behaviours__.
__concurrent_reactive_systems__
__Web_Service_compositions__
__intermediate_program_representation__
__contractual_approach__
__related_formalisms__
__dynamically_reconfigurable__.
__weak_memory_models__.
__data_flow_oriented__
__multimodal_user_interface__
__AquaLogic_Data_Services_Platform__
__interprocedural_analysis__,
__precedence_rules__,
__Game_semantics__
__object-oriented_framework__.
__operational_validity__,
__type_abstraction__,
__extensible_database__
__XML_query_language__,
__accurate_predictions__,
__machine_descriptions__.
__Colored_Petri_net__
__process_activities__,
__smart_transducer_interface__
__automatic_analysis__.
__SCA-based__
__programming_language__)
__state_machine_diagram__
__programming_language_constructs__,
__IR_techniques__.
__semantic_web_rules__
__redundant_tests__.
__high-level_specification__
__database_architecture__.
__SDL_models__
__specification_patterns__.
__formal_notation__.
__response_characteristics__.
__compiler_transformation__
__role-based_authorization_constraints__
__Cascading_Style_Sheets__
__ontology_alignments__.
__ontology_language__.
__object-oriented_modeling_language__.
__robot_plans__
__system-level__.
__graphical_user__
__Ajax-enabled__
__SpecC_language__
__semantic_transparency__
__XML_query_language__.
__user_interface_descriptions__
__functional_model__,
__Web_service_calls__.
__VHDL-AMS__,
__heterogeneous_reasoning__
__unstructured_workflows__
__visual_sentences__,
__change_impact_analysis__,
__PEPA_models__.
__logical_principles__
__screen-oriented__
__functional-logic__
__model-transformation__
__authorisation_constraints__
__strategic_programming__
__UML_semantics__
__a_model-driven_approach__,
__script_language__.
__translating_Smalltalk__
__vulnerability_signatures__.
__classical_cryptography__,
__device_access__
__database_reverse_engineering__.
__reliability_block_diagrams__
__traceability_relationships__
__MS_Word__.
__database_designers__.
__efficient_execution__,
__functional_semantics__
__formal_description_technique__
__Common_Language_Infrastructure__
__Otho_Toolkit__
__data_access_layer__
__application_profile__.
__ANSI-C__,
__dataflow_process_networks__.
__flow_diagram__.
__meta-environment__
__Run-time_monitoring__
__query_rewrites__
__graph_rewriting_rules__
__path-sensitive__,
__CPN_Tools__,
__addressing_modes__.
__software_architecture_style__
__passive_testing_approach__
__tool_box__
__dialogue_games__,
__parallel_Haskell__
__declarative_programs__.
__workflow_specification__.
__A_hybrid__,
__syntactically_and_semantically__,
__OWL_DL_ontologies__.
__Parallel_DEVS__
__component_parts__,
__parallel_language__,
__analysis_and_code_generation__.
__graph_grammar_formalism__.
__cumbersome_and_error-prone__
__plan_revision__
__executable_language__
__disjunctive_logic_programming__,
__machine_dependent__
__Java_bytecode_programs__.
__goal_satisfaction__.
__Test_procedures__
__BPEL_programs__
__Test_derivation__
__recursive_predicates__.
tool-__based_approach__
__BPEL_engine__.
__model-checking_techniques__.
__networks_of_timed_automata__.
__rule-weight__
__discovery_algorithm__.
__program_generators__,
__variability_models__.
__ontological_analysis__.
__task_modeling__.
__minimal_costs__.
__schema_design__,
__FORTRAN_program__
__object-oriented_software_design__.
__annotated_programs__
__Stacked_generalization__
__array_computations__.
__object-oriented_models__,
__workflow_processes__,
__annotation_language__.
__test_case_generation_and_execution__
__object_data_model__
__textual_scenarios__
__Microsoft_Internet_Explorer__,
__program_dependencies__.
__Colored_Petri_nets__
__estimation_procedures__,
__XSL_transformations__.
__Musical_Instrument_Digital_Interface__
__interface_contraction__
__configuration_knowledge_bases__.
__verification_condition_generator__
__logical_data_independence__
__easy_extensibility__
__ML_modules__
.__NET_environment__.
__dynamic_translation__.
__product_model__,
__bytecode_level__
__lattice_diagrams__
__computational_societies__.
__decision_logic__.
__automatic_reasoning__.
__XML_schema_documents__
__temporal_ontology__
__distributed_agents__,
__database_interface__.
__transaction_execution__,
__instruction_generation__,
__communication_schedules__.
__TLM-based__
__extensible_compilers__
__version_history__.
__iterative_refinement__,
__view_definition__.
__bug_detection__,
__multimodal_integration__.
"__building_blocks__"
__user-level_threads__,
__reengineering_process__,
__domain-specific_modeling_languages__.
__automatic_memory_management__.
__semantic_predicates__
__concurrent_programming_languages__,
__PE_file__
__PATR-II__
__procedural_programming_languages__,
__reactive_agents__,
__imperative_code__,
(__Communicating_Sequential_Processes__)
__type_inferencing__
__program_checking__,
__Java_Virtual_Machine__,
__meta_model__.
__regression_test_selection__.
__relevant_concepts__,
__Variant_Configuration__
__Formal_proof__
__object_diagram__
__local_views__.
__Bayesian_belief_networks__,
__open_source_technologies__
__observationally_equivalent__.
__high_level_of_abstraction__.
__abstract_objects__.
__Specification_PEARL__
__natural_language_discourse__
__compiler_directives__,
__Commutativity_analysis__
__commutativity_analysis__
__deployment_descriptor__
__BP-QL__
__rule_processing__.
__structure_generation__.
__modularization_mechanisms__
__instructional_goals__
__type_inclusion__
__Runtime_verification__
__interface_theories__
__UML_profile__.
__semantic_definition__.
__generic_software_framework__
__pre-_and_postcondition__
__constraint_specifications__.
__IBM_System/360__
__dynamic_aspect__
__concurrent_programming_language__.
__visual_programming_language__.
__report_generator__
__Maude-NPA__
__transformation_tools__.
__domain-specific_modeling_language__
__resolution_strategies__.
__trace_assertion__
__mix_and_match__
__style_sheets__.
__clinical_guidelines__,
__Array-OL__
__concurrency_concepts__
__program_compilation__.
__validation_method__,
__declarative_planning__
__standard_ML__
__linear_algebra_library__
__copy/paste__
__functional_partitioning__,
__federation_architecture__
__performance_analysis_tools__,
__key_components__,
__Unix_tools__
__exploratory_programming__
__results_obtained__,
__partial_models__.
__component_parts__.
__UML_activity_diagram__.
__function_level__.
__mechanical_verification__
__multiway_rendezvous__
__ladder_logic__
__Program_structure__
__a_Petri-net-based__
__diagram_notations__
__architectural_artifacts__
__compiler_generator__.
__unit-test__
__editing_commands__,
__English_grammar__.
__Windows_kernel__.
__constituent_elements__.
__high-level_programming_languages__,
__programming_paradigms__:
__hardware_compiler__.
__memory_protection__,
__temporally_flexible__
__OO_language__.
__CLP_programs__
__incremental_computation__,
__object-oriented_DBMS__
__language_based__
__structured_specifications__
__ESC/Java2__.
__program_safety__
__interface_automata__.
__model_checking_and_theorem_proving__
__pointer_logic__
__Incremental_compilation__
__rule_priorities__.
__data_description_language__
__documentation_purposes__
__Problem_Posing__
__testing_criterion__.
__quickly_and_cheaply__.
__abstract_execution__
__XML_messaging__.
__Gtk+__
__language_bindings__.
__concurrent_object-oriented_programming_language__
__Java_interface__
__independently_developed_components__.
__atomic_objects__.
__semaphore-based__
__an_object_oriented__,
__long_running_transactions__.
__pattern_specification_language__
__variation_points__,
__user_interface_specification__
__Knowledge_Engineering_Environment__
__basic_functionality__,
__metamorphic_testing__,
__Hierarchical_Colored_Petri_Nets__
__contract_net_protocol__.
__CAD_framework__
__Interface_Definition_Languages__
__intuitive_graphical_user_interface__
__State_spaces__
__Promela_code__
__constraint_handling_rules__
__model_transformation_techniques__.
__flow-_and_context-sensitive_pointer__
__semantic_variation_points__
__software_architecture_specifications__
__alignment_tables__
__Directed_test_generation__
__composite_service__,
__structural_design_patterns__
__PLC_program__
__manageable_parts__.
__AspectJ_aspects__
__object_ownership__
(__OWL-S__),
__Statistical_debugging__
__reusable_aspects__
__class_inheritance__,
__reusable_aspect__
__web_ontology_language__
__state_chart__
__behavioural_properties__.
__UML_class_diagram__.
__executable_process_models__
__Concept_location__
__syntax_analyzer__
__closure_conversion__.
__Path-oriented__
__temporal_specification__,
__flexible_structure__,
__Bio-PEPA__,
__parallel_programming_language__.
__Constraint_automata__
__auto-tuner__
__modular_reasoning__,
__Packrat_parsing__
__Property_Sequence_Chart__
__physical_units__.
__aspect_mining__.
__conceptual_schemas__,
__black_box_testing__
__mutable_objects__.
__domain-specific_aspect__
__type_qualifiers__.
__lambda_expressions__.
__role-based_access_control_policies__
__Separate_compilation__
__object-relational_DBMS__.
__Gradual_typing__
__bulk_data__.
(__Object_Management_Group__).
__persistent_programming_language__
__program_verifiers__
__multiparty_session__
non-__object-oriented__
__synchronisation_mechanisms__
__counter_examples__,
__native_machine_code__
__MapReduce_programs__.
__code_templates__.
__workflow_languages__.
__run-time_specialization__
__Tcl-Tk__
__white-box_testing__,
__anti-patterns__,
__contextual_graphs__
__fault_collapsing__.
__visual_contracts__
__object-oriented_schema__
__Linda-based__
__transaction_semantics__.
__portable_code__
__template_language__
__specific_implementations__.
__crypto_protocol__
__dynamically-created__
__mine_pump__
__BPEL_specification__
__mutable_state__,
__symbolic_values__.
__Cosmos__
__interface_definition_language__.
__exceptional_situations__.
__generic_classes__.
__tool_box__.
__method_fragments__.
__timed_models__
__model_weaving__
__crosscutting_structure__
__DSL_grammars__
__Team_automata__
__execution_phases__.
__architectural_entities__
__system's_specification__
__embedded_languages__
__procedural_code__.
__conditional_execution__.
__policy_description_language__
__specification_mining__.
__error_reporting__.
__behavior_preservation__
__Feature_trees__
__psychological_theory__.
__engineering_techniques__.
__abstraction_layer__,
__software_toolkit__,
__assembler_language__
__structural_metrics__.
__mini-languages__
__high-level_constructs__.
__control_knowledge__,
__layout_description__
__combinator_library__
__abstraction_layer__.
__based_reasoning__
__difference-list__
__vulnerability_detection_tools__
__static_type_analysis__
__test_data_selection__
__optimally_balanced__
__executable_test_cases__
__workflow_language__,
__client-server_application__
__object-oriented_data_model__,
__MoonWalker__
__Eclipse_JDT__
__design_languages__.
__update_languages__
__higher-rank_types__
__dataflow_language__.
__reverse_engineers__
__hardware_designer__
__data_management_facilities__
__JAVA_programs__
__conditional_compilation__.
__memory_configurations__,
__pattern-match__
__empirical_tuning__
__generator_tool__
__concurrent_functional_language__
__dynamic_dispatch__.
__latency-insensitive_design__
__an_object-oriented_approach__,
__interoperability_framework__.
__manipulation_language__.
__active_XML__
__block-structured_language__
__An_object-oriented_database__
__Index_tuning__
__static_scope__
__hardware_description_language_VHDL__.
__visual_formalisms__,
__ADL_SCORM__
__state-machines__
__modularization_of_crosscutting_concerns__
__code_selection__,
__Java_Agent_DEvelopment_Framework__
__code_ownership__.
__program_representations__,
__RTL_modules__
__region-based_memory_management__.
__interface_descriptions__.
__mathematical_text__
__asynchronous_event_handling__
__UML_model__,
__J2ME_applications__
__CASE-tool__
__higher-order_polymorphic_functions__
__module_interfaces__.
__association_rule_mining_algorithm__.
__Peridot__
__display_manager__
__directed_testing__.
__synthetic_gene_networks__
__meta_models__.
__type_declarations__.
__ER_diagrams__.
__G-code__
__programmed_graph_rewriting__
__EDA_tools__,
__process_specification__.
__restructuring_compilers__.
__interacting_processes__.
__ontology_model__,
__concrete_syntax__,
__refactoring_operations__.
__Ajax_applications__.
__crosscutting_features__
__mobility_primitives__
__software_process_model__,
__target_code__,
__textual_views__
__UML_2.0_Activity_Diagram__
__split-level__
__synthesis_algorithm__,
__conceptual_classes__
__Design/CPN__
__picture_description__
__graph_reduction__.
__J2ME_applications__.
__dependability_aspects__
(__Web_Modeling_Language__)
__literate_programming__,
__dialog_flow__
__language_support__,
__UML_specifications__.
__composing_components__
__user_interface_builder__
__Results_strongly_suggest__
__user_interface_prototype__
__concurrent_Java_programs__,
__license_agreement__
__transformational_grammar__.
__mathematical_semantics__.
__traversal_strategies__
__Domain-driven__
__hardware_interfaces__
__web_components__,
__security_labels__.
(__graphical_user_interface__)
__object_equality__
__Logical_models__
'__black-box__'
__concept_mapping__,
__Perl_package__
__adaptive_behaviors__.
__UML_activities__
__legacy_component__
__hierarchical_task_graph__
__distributed_object_applications__.
__control_flow_and_data_flow__.
__object-oriented_abstractions__
__JavaBeans_component__
__Concert/C__
__literate_programming__.
__dataflow_programs__,
__flow_diagrams__.
__protocol_conformance__
__oriented_paradigm__
__Muse__,
__Hoare_logics__
__Turing_Plus__
__WS-BPEL_processes__.
__anytime_algorithms__,
__algebraic_languages__.
__meta-objects__,
__compliance_checking__.
__audio_synthesis__
__object-oriented_specification_language__
__teleo-reactive__
__model-check__
__Class_diagrams__
__message_sends__
__Objective_Caml__,
__reactive_real-time_systems__.
__Z_notation__,
__cyclomatic_complexity__,
__Frama-C__
__linked_structures__.
__implicitly_parallel__
__architectural_specification__.
__Prolog-style__
__protocol_verifier__
__Flow_analysis__
__annotated_code__
__Vienna_Fortran__.
__parsing_engine__
__testing_criteria__,
__collection_classes__.
__language_workbenches__.
__language_workbench__.
__relational_data_base__.
__record-and-replay__
__automatic_programming__,
__pluggable_type_systems__
__hardware_structure__,
__event_manager__
__message-passing_mechanism__
__parameterized_types__.
__efficient_verification__
__interface_designer__
__compilers_and_interpreters__
__circular_coinductive__
__procedural_programming_languages__.
__exception_handlers__,
__logical_assertions__.
__semi-formal__,
__object-oriented_program__
__pointcuts_and_advice__
__virtual_nodes__,
__formal_equivalence_checking__
__cosimulation_environment__
__declarative_nature__
__proved_correct__,
__scenario-based_specifications__,
__synthesis_technique__,
__practical_realisation__
__Computational_Framework__
__concurrent_PASCAL__
__component_frameworks__,
__dataflow_diagrams__.
__thispaper_presents__
__structured_description__
__dataflow_testing__
__flow_sensitivity__
__parallel_constructs__.
__code_verification__
__interprocedural_data_flow_analysis__.
__consistency_maintenance__,
__checking_consistency__.
__Ada_tasking__.
__model_checker_FDR__.
__CSP_solver__
__conversation_policies__
__reachability_testing__,
__primitive_actions__.
__Declarative_Description__
__functional_composition__.
__request_language__
__XML_parsers__
__Model_checking__,
__consistency_criteria__.
__automated_test_generation__.
__interorganizational_workflows__
__extraction_rules__,
__contract_monitoring__
__forward_chaining__,
__safety_analysis__,
__grid_workflow_applications__
__Petri_Net__)
__algebraic_Petri_nets__.
__object-oriented_Petri_net__
__subroutine_calls__.
__object_oriented__.
__Dynamic_Parallel_Schedules__
__model_checking_tools__,
__intermediate_code__,
__formal_transformation__
__highly_extensible__,
__authoring_language__
__program_verifier__
__portable_parallel_programming__
__nested_data_parallelism__
__structural_metadata__
__linear_types__
__higher-order_functional_language__
__protocol_compatibility__
__Stochastic_Well-formed_Nets__
__modular_programming__,
__PEPA_nets__
__pointer_structures__
__modification_operations__.
__extremely_flexible__,
__object_oriented_code__
__generic_Java__.
__modal_type_theory__
__Multiple_dispatch__
__domain-specific_language__,
__Code_generators__
__interactive_programming__.
__Microsoft's_SQL_Server__
__pattern_catalog__
__calling_conventions__.
__multi-stage_programming__
__rights_expression_languages__.
__stored_procedures__,
__IEEE_754_floating_point__
__UML_profiles__.
__XML_parsing__.
__mathematical_computation__
Microsoft__&reg__;
__an_event-driven__,
__advanced_topics__,
__intermediate_form__.
__parametric_modeling__,
__Open_Inventor__,
__robust_parser__
__data_manipulation_language__.
__OLE_DB__.
__tabular_expressions__.
__strongly_typed_language__
__symbolic_evaluation__.
__pseudo-code__,
__Path_expressions__
__manual_pages__
__model_checker_NuSMV__
__requirements_specification_document__
__adaptive_hypermedia_systems__,
__software_connectors__,
__separation_of_duty__.
__structural_VHDL__
__requirement_specification_language__
__LSI_chip__.
__symbolic_debugger__,
__policy_composition__,
__policy_composition__
__object-oriented_programming_language__,
__HALDEN__
__Secure_information_flow__
__design_pattern_recovery__
__safety_requirement__
__class_declarations__
__RTL_components__
__fact_extraction__,
__Eclipse_plug-ins__.
__abstract_user_interfaces__
__Tcl__,
__ETL_workflows__
__path_feasibility__
__English_questions__
__dynamic_metrics__.
__interaction_design_patterns__
__ViSta__
__Lightweight_Coordination_Calculus__
__functional_ATPG__
__step-wise_refinement__
__HPSG_grammar__
__virtual_machine_monitor__,
__timing_issues__.
__hand_crafting__
__ASF+SDF__.
__Motorola_68000__
__automatic_documentation__
__transparent_shaping__
__user_interface_description_language__.
__basic_block_level__
__Mobile_UNITY__,
__Cicero__
__hierarchical_descriptions__
__KRAKEN__
__situated_multi-agent_systems__
__Petri_Net__,
__logic_verification__,
__simplification_rules__,
__organizational_policies__.
__coordination_paradigm__.
__digital_license__
__finite_state_machine_based__
__Common_Algebraic_Specification_Language__
__procedural_logic__
__ODMG_compliant__
__fine-grained_authorization__
__workflow_logs__
__reasoning_rules__,
__high_level_programming_language__
__large_scale_software_systems__
__mathematically-oriented__
__interconnected_components__.
__adequacy_criteria__,
__security-policy__
__WSDL_descriptions__.
__DEC-MDP__
__lazy_functional_programming_language__
__tuple_centres__.
__multiple_tuple_spaces__
__module_boundaries__
__component-oriented_programming__
__complex_data_types__,
__formal_specification_language__,
__architectural_specification__,
__Atlas_Transformation_Language__
__algorithmic_skeletons__,
__executable_semantics__
__MOF_compliant__
__event_specification__
__observable_behavior__.
__recursion_elimination__
__parameter_dependencies__
__polymorphic_languages__
__CORBA_platform__.
__Existing_compilers__
__existing_compilers__.
__reactive_processes__.
__Design_intent__
__data_structure__:
__handling_uncertain__
__coupling_metrics__.
__aspect_weaver__
__structuring_facilities__
__textual_notation__.
__&lsqb__;1&rsqb;,
__real-time_reactive_systems__,
__behavioural_modelling__
__APi-calculus__
__Hardware_and_software_components__
__Zeitgeist__
__post-mortem_analysis__.
__static_program_slicing__
__multiprocessor_simulator__.
__abstract_workflows__
__speech_understanding_systems__.
__Simulink®__
__imperative_programming_language__.
__probabilistic_learning__.
__nonfunctional_properties__.
__VDM_specifications__
__switch-level_circuits__
__simulation_and_model_checking__
__mixed-level_simulation__
__special_forms__
__manipulation_operations__.
__self-adjusting_computation__,
__test-cases__,
__action_execution__,
__causal_message_logging__.
__model_checker_SPIN__
__register_transfer_language__
__syntax-directed_editors__.
__Finite_State_Machine-based__
__virtual_function_calls__,
__derivative_evaluation__
__abstract_representation__,
__presentation_layers__
__concurrent_Ada_programs__
__implicitly_typed__
__specification_techniques__,
__formal_models__:
__Ada_tasks__
__extensible_records__,
__long-distance_dependencies__,
__HDL_description__.
__safety_checking__,
__Sequence_diagrams__
__preference_reasoning__
(__RM-ODP__)
__activity_diagram__.
__planning_graphs__
__reasoning_framework__.
__Join_point__
__static_verification__.
__complex_arithmetic__.
__OWL-S_ontology__
__data-flow_graphs__.
__task-flow__
__relational_database_system__,
__Web_modeling_language__
__eL-CID__
__multi-agent_organisations__.
__oriented_languages__
__higher-order_modules__
__input/output_operations__.
__early_requirements__.
__domain-specific_ontologies__.
__program_generator__.
__schema_languages__,
__shared_libraries__.
__Altair__
__OT_algorithms__.
__tense_and_aspect__.
__class_inheritance_hierarchy__
__Java_Script__
__securing_XML_documents__.
__Information_flow_security__
__graphical_tool__,
__semantics-directed__
__process_scheduler__,
__UML_class_and_sequence_diagrams__.
__attributed_grammars__.
__structured_specifications__,
__flow_charts__,
__semantic_web_languages__
__extraction_tool__,
__object_schemas__
__initialization_procedure__.
__behavioral_views__
__health_diagnosis__.
__Concurrent_Collections__
__UML_use_case_diagrams__
__communication_module__,
__automated_theorem-proving__
__provably-correct__
__Fortran-77__
__Rational_Rose__,
__variability_mechanisms__
__aspectual_requirements__.
__program_analyzers__.
__UML_notations__.
__Cedar__,
__program_specifications__,
__hardware_descriptions__,
__parsing_table__.
__bit-level_concurrent__
__application_programmer_interface__
__style_sheet__
__Verilog_descriptions__
__Web_service_compositions__,
__diagnosing_errors__
__development_artifacts__,
__Unix_shell__
__incomplete_specifications__,
__security_kernel__.
__low-level_code__,
__semantic_correspondence__
__Sudoku_puzzle__
__architectural_description__.
__P-VoT__
__domain-specific_modelling_languages__
__richer_semantics__.
__temporal_logic_properties__
__basic_LOTOS__
__Pascal_program__
__Fortran_code__,
__sparse_computations__.
__program_constructs__.
__SystemC_code__.
__object-model__
__design-space_exploration__,
__brush_model__
__refinement_techniques__,
__usability_principles__,
__pre-_and_post__-condition
__mechanical_theorem_prover__
__perl__,
__fine-grained_locking__.
__expected_outputs__,
__automated_instrumentation__
__behavioral_synthesis_tools__.
__coverage-driven__
__efficiency_considerations__.
__unambiguous_description__
__declarative_programming_languages__
__generic_libraries__,
__asynchronous_communication_mechanisms__
__software_model_checkers__.
__sequential_equivalence__
__structural_subtyping__,
__Generalized_Symbolic_Trajectory_Evaluation__
__extension_language__.
__concurrent_logic_programming_languages__
__easy_prototyping__
__program_abstraction__.
__Unix_file_system__
__typed_attributed_graph_transformation__
system-__user_interaction__
__RTL_designs__,
__WCET_estimates__.
__unified_model__,
__visualization_metaphors__
__construction_grammar__
__composition_language__.
__pointer-based_data_structures__,
__Real-Time_systems__
__target_machine__.
__MS_Excel__,
__XML_update_language__
__regular_expression_types__
__shared_memory_parallel_programs__
__automated_synthesis__.
__floating-point_to_fixed-point__
__code_specialization__,
__interface_definition__
__Linux_Security_Modules__
__exception_handling_constructs__
__assembly_languages__,
__behavioral_diagrams__
__sequence_diagrams__:
__WS-Agreement__,
__virtual_machine__:
__encoders_and_decoders__.
__J-Sim__.
__macro_definitions__,
__visual_programming_language__,
__Test_scenarios__
__compiler_verification__
__component-based_programming__,
__XML_based__,
__object-oriented_modeling_techniques__
__Syntax-driven__
__control_flow_dependencies__
__timed-automata__
__checking_rules__
__agile_parsing__
__unification_framework__
__conformance_analysis__
__Java_bytecode_verification__.
__Static_Driver_Verifier__
__dynamic_code_generation__.
__source_transformation__.
__intended_behavior__.
__immutable_objects__.
__early_access__
__typed_languages__.
__transition_refinement__
__source_control_repositories__.
__Clouseau__
__epsilon_serializability__
__UML_Activity_Diagram__.
__program_animation__,
__timed_processes__
__java_virtual_machines__.
__composing_specifications__
__Finite-state_verification__
__JLS__
__dynamic_frames__.
__counting_method__.
__functional_level__,
__cross-site_scripting_vulnerabilities__
__locking_primitives__.
__synchronous_specifications__.
__mutual-exclusion__
__an_object_oriented_approach__
__IMS-LD__.
__Preliminary_ideas__
__recursive_data_types__
__Esterel_programs__.
__exact_real_numbers__.
__Reactive_Modules__
(__I/O__
__coverage_metric__.
.__Net_Framework__
__embedded_SQL__
__typed_links__
__PLT_Scheme__.
__hierarchical_taxonomy__
__Actor_model__
__runtime_assertion_checking__
__querying_XML__.
__data_exchange_format__.
__CODASYL_DBMS__
__reference_immutability__.
__statically_type-safe__
__power_management_policy__,
__pluggable_type_systems__.
__deductive_and_object-oriented__
__incremental_compilation__,
__Live_Sequence_Charts__,
__functional_abstraction__,
__data-model__
__finite_domain_constraints__
__runtime_analysis__,
__writing_portable__
__language_interpreters__
__definition_languages__,
__code_snippets__.
__access_control_list__.
__vertical_profiling__
__transactional_programming__.
__Virtual_classes__
__client-side_web__
__type_dispatch__
__rule_activation__
__synchronous_dataflow__.
__component's_interface__
__OSI_networks__.
__aggregation_relationship__
__pseudo-code__.
__Language_Integrated_Query__
__predicate_dispatch__.
__process_discovery__.
__object-oriented_software_development__,
__semantic_computing__.
__collaboration_diagrams__,
__conformance_test_suite__
object-__relational_database_schema__
__Meta-Object_Facility__
__Legacy_code__
__Interface_automata__
__platform_neutral__
__GML-based__
__proof_assistant__,
__user_directed__
__choreography_description__
__extensible_compiler__
__strongly_typed_object-oriented__
__dynamic_thread_creation__
__Decision_procedures__
__UNIX_environment__
__smart-card_application__
__API_libraries__.
__behavioral_specifications__,
__HOMs__
__event-B__
__fast-track__
__defect-density__
__API_libraries__
__operating_guidelines__
__Language_features__
Object-__Z_notation__
__architectural_details__.
__linear_algebra_libraries__.
__Behavioral_Abstraction__
__Legacy_Interface__
__distinct_parts__:
__part-whole_relation__
__ESC/Java__.
__capture/replay__
__orchestration_language__.
__formal_treatment__
__conceptual_modeling_languages__.
__data-intensive_Web_applications__.
__requirement_definition__
__DEVS_modeling__.
__language_Curry__
__schema_transformations__
__CO-OPN__/2
__extension_points__.
__typed_feature_structures__,
__validation_environment__
__certifying_compilation__.
(__Specification_and_Description_Language__)
__constraint_validation__
__hierarchical_partitioning__.
__mechanical_proofs__
__SDL_specification__.
__related_statistics__.
__aspect-oriented_software_development__.
__architectural_designs__,
__symbolic_simulator__
__instruction-set_simulator__,
__hierarchical_predicate_transition_nets__
__software_development_paradigms__
__peephole_optimizer__
__WS-Policy__,
model-to-__code_transformations__
__UML_state_diagrams__,
__formal_definition__,
__SDH_network__
__building_reusable__
__termination_tool__
__program_manipulation__.
__advanced_transactions__.
__Object_serialization__
__pragmatic-reuse__
__termination_tools__.
__granularity_level__.
__Virtual_Machine__,
__Ada_compiler__.
__algorithmic_programs__
__geometric_constructions__.
__termination_analysis__.
__object_states__.
__sequential_Java_programs__
__Box_structures__
__dynamically_reconfigurable_architectures__
__Purely_functional__
__slicing_criteria__.
__slicing_techniques__.
__existing_simulators__,
__well_rounded__
__coordination_policies__.
__calling_context_tree__
__view_synchronization__.
__parallel_programming_paradigm__.
__Java_virtual_machine_language__
__workflow_process_definition__
__knowledge_units__.
__Ada_code__.
__programming_plans__
__android_applications__
__Proteus__.
__higher-order_polymorphic__
__firing_rule__.
__blackboard_systems__
(__Finite_State_Machine__)
__Z/Eves__
__graphic_user_interfaces__
user-__role_assignments__
__concurrent_programs__:
__proving_programs__
__two-phase_locking_protocol__,
__dynamic_invariant_detection__
__common-sense_knowledge__.
__incrementally_modular_abstraction_hierarchy__
__symbolic_analysis__,
__agent_paradigm__
non-__task-specific__
__Visual_Language_Compiler__-Compiler
__logical_units__.
__semantically-oriented__
__platform_independent_model__
__tedious_tasks__,
__Cayuga__
__web_service_interactions__.
__Verification_methods__
__Positional_Grammars__
__Matlab_Simulink__
__materialized_view_maintenance__,
__unstructured_programs__.
__heap_locations__.
__Fortran_code__.
__object_oriented_programs__
__program_invariants__,
__complex_SOCs__
__An_intelligent__,
__stored_procedure__
__UML_modeling__.
__interaction_traces__.
__Generalized_Partial_Computation__
__protection_profiles__
__interaction_objects__.
__set-theory__
__refinement_planning__
__Intelligent_Miner__
__tactic_language__
__MODULA-2__.
__rule-based_languages__,
__test-case_generation__
__Log-linear_models__
__fully-justified__
__object_oriented_programming_language__
__executable_UML_models__
__Modular_SOS__
__adaptive_replication__,
__abstract_representations__.
__interprocess_synchronization__
__memory_coherence__.
.__NET_Common_Language_Runtime__
__translation_rules__,
__entity-relationship_diagrams__,
(__Unified_Modeling_Language__).
__MPEG-4_Part_10__
__unreachable_code__
__testing_frameworks__.
__shape-analysis__
__semantic_translation__
__Ada_83__.
__distributed_firewalls__.
__alarm_filtering__
__context_representation__.
__QoS_specifications__.
__J-Sim__,
__institutional_reality__
__Ada_tasking_programs__
__schema_version__.
__object_deputy__
__object_deputy_database__
__MIMD_machines__,
__actor_programs__
__Hyper-V__
__object-oriented_queries__
__Jackson's_problem__
__object_orientated__
__built-ins__
__lexical_databases__.
__C#__'s
__runtime_code_generation__
__generative_programming_techniques__
__handling_mechanism__.
__Atomic_transactions__
__multiparadigm_language__
__AJAX-enabled__
__extensible_records__
__purely_functional_language__
__static_analyzers__.
__Functional_components__
__source_code_repository__.
__execution_environment__;
__Lula__
__placement_heuristics__
__assume-guarantee_style__
__manufacturing_equipment__.
__TLC_model_checker__.
__copy_and_paste__.
__physical_synthesis_flow__,
__development_proceeds__
__look-and-feel__.
__modified_condition/decision_coverage__
__design_artefacts__.
__software_licenses__.
__OWL-DL_ontologies__.
__piecemeal_fashion__
__program_refinement__.
__referential_transparency__
__target_architectures__,
__Object_Language__
__XML_formats__.
__transformation_framework__,
__AspectJ_compiler__.
__Self-adjusting_computation__
__General_Public_License__
__Interval_Tree__
__textual_specifications__.
__object-oriented_database_system__,
__using_colored_Petri_nets__.
__testing_profile__
__nondeterministic_systems__.
__Action_Notation__
__modular_systems__,
__composition_engine__
__prototype_generation__.
__open_format__
.__NET_Framework__,
__interactive_graphical_applications__.
__shared-memory_parallel_programs__
__software_development_methodology__,
__database_reorganization__.
__proof_engine__
__LISP_1.5__
__slicing_criterion__
__Query_Language__),
__compiler-compilers__
__visual_expressions__
__modular_programs__.
__document_generation__,
__shrink_wrap__
__reachability_analyses__
__screen_layout__,
__programmed_logic__
__negotiation_subdialogues__.
__naming_convention__
__equivalence_partitioning__
__code_generation__)
in-__place_updates__
__interactive_debugging__.
__event_algebra__.
__genotype_representation__
__behaviour_specification__
__Haskell_program__
__explicit-state_model_checking__.
__user-defined_data_types__
__validity_checker__
__exact_real_arithmetic__,
__Petri_Net_Markup_Language__
__language_translators__
__extended_FSM__
__protocol_execution__,
__test_executions__.
__program_fragment__
__description_techniques__,
__formal_description__.
__incremental_design__.
__cryptographic_proofs__
__problem_description__.
__parametric_timing_analysis__
__defacto_standard__
__Regular_expression_patterns__
__parser_generators__,
__temporal_assertions__
__engineering_decisions__.
__HTN_planner__
__PLT_Scheme__
__multimedia_integration__.
__conformance_test_suites__
__high-level_language__,
__source_code__;
__architecture_description_language__,
__interface_definitions__,
__numerical_integrator__
__analyzing_security_protocols__
__operational_specifications__.
__database-driven_applications__.
__LISP_interpreter__
__deterministic_finite-state_machines__.
__refinement_calculi__
__formally_proved_correct__
__Ada_source_code__.
__dialog_model__.
__hybrid_MPI+OpenMP__
__glue_language__
__wireless_network_simulators__.
__user-interfaces__,
__composite_states__,
__structure_mapping__,
__runtime_assertion_checking__,
__test-case_generation__.
__safety_engineers__,
__Constraint_Language__)
__assertion_checker__
__Prototype_implementations__
__dynamic_adaptive_systems__.
__intermediate_program_representation__,
__programming_practice__.
__list_processing_language__
__Core_Language_Engine__
__assertion_checkers__
__linguistic_theory__,
__module_composition__
__fact_base__
__formal_rules__.
__source_file__.
__hybrid_functional_Petri__
__higher-level_languages__
__hosting_environment__,
__MAC_policies__
__behavioral_model__,
__extension_mechanism__,
__execution_stack__
__graph_transformation_techniques__.
__message-passing_library__
__high_cohesion__.
__Compiler_generation__
__abstract_specification__,
__UML/OCL_models__.
__functional-style__
__low_footprint__
__analogical_representations__
__run_anywhere__"
__application_generators__.
__imperative_code__.
__description_language__;
__control_programs__,
__configuration_language__.
__semantically_defined__
__Fortran_programs__,
__functional_programming_style__
__client_application__,
__static_race_detection__
__assume/guarantee__
__pointcut_designators__
__reference_manuals__
__reference_corpus__
__syntax_diagrams__
__schema_definition__,
__library_routines__.
__media_resources__.
__design_languages__,
__low-level_code__.
__compiler_implementation__,
__program_validation__.
__automatic_program_synthesis__
__mock_objects__.
__Image_computation__
__application-level_checkpointing__.
__parallel_debugger__
__modular_monadic__
__dialog_manager__.
__update_policies__,
__XML_publishing__,
__transactional_programming__
__Meta-Language__
__knowledge_representation_language__.
__static_type-checking__.
__asynchronous_shared-memory__
__query_facility__.
__business_process_specifications__,
__SDL_language__
__query_language__;
__constructive_cost_model__
__quantified_types__.
__change_tracking__
__data_base_organization__
__bigraphical_reactive__
__database-access__
__transport_service__.
__constraint_acquisition__
__prolog_programs__.
__hardware_description_languages__:
__Abstraction_refinement__
__Remote_method_invocation__
__Linux_distribution__.
__ontological_reasoning__.
__data_structuring__.
__improves_efficiency__.
__control_statements__.
__handled_automatically__.
__synchronization_patterns__.
__instrumentation_framework__.
__Architectural_descriptions__
__UML_diagram__.
__lexical_scope__
__component_assemblies__.
__SQL_Injection_vulnerabilities__
__encapsulation_mechanism__
__deductive_techniques__
__deadlock_analysis__.
__Dynamically_generated__
__Recent_Lucent_Technologies_patents__.
__database_model__,
__Black-box_testing__
__visual_interfaces__,
__diagram_layout__
__aspect-oriented_design__.
__composed_web_services__.
__Orca__,
__device_independence__,
__domain_specific_ontologies__.
__static-analysis__
__agent-oriented_programming__,
__UML_use_cases__
__exception_handling_constructs__.
__language_specifications__.
__language_Esterel__.
__W3C_standard__
__Mizar__,
__behavioral_representations__
__Tcl/Tk__.
__binding_time_analysis__
__Read_Only_Memory__
__neglected_conditions__
__MUSE__,
__firewall_rule__
__database_structure__,
__automatically_generating__,
__ETL_workflow__.
__Java_Data_Objects__
__Data_dependence__
__normalization_process__.
__automatically_generated_code__.
__Tango__,
__closely_reflect__
__GODIVA__
__Data_Flow_Diagrams__,
__low-level_programming__,
__extended_static_checking__
__COBRA__-ABS
__modular_specifications__
__abductive_inference__.
__geometric_concepts__.
__Algol_68__,
__aspect_oriented_programming__,
__biosequence_analysis__.
__Status_report__:
__deterministic_parallelism__.
__profiling_methodology__
__UML_diagrams__:
__target_DTD__
__human_machine__
__linguistic_elements__.
__group_communication_protocols__.
__standard_library__,
__compilation_framework__,
__middleware_service__.
__meta-language__.
__collaborative_interface_agents__
__template_metaprogramming__.
__generic_procedures__.
__program_analyzers__
__distributed_programs__:
__SIMULA_67__
__group_RPC__
__typed_programming_languages__
__Functional_logic_programming__
__ontology_library__
__Diagrammatic_reasoning__
__Concurrent_object-oriented_programming__
__visual_editors__,
__program_proving__.
__pattern_description__,
__DNA_nanostructures__.
__UML_sequence__
__user_defined_data_types__
__linguistic_constructs__.
__multitasking_systems__
__program_algebra__.
__finite-state_machines__,
__chemical_substances__.
__XQuery_compiler__
__XQuery_engine__,
__coverage_analysis__,
__parallelizing_transformations__.
__forward-mode__
__decision-tree_model__
__existing_Web_applications__.
__database_triggers__.
__specification_tool__.
__feature_configuration__
__application-independent__.
__simulation-based_verification__.
__Scratchpad_II__
__shared_conceptualization__
__semantics_preserving__
__rule_languages__,
__graphically-based__
__language_workbench__
__long-running_business_transactions__
__lazy_functional_language_Haskell__.
__proof_editor__
__insertion_method__.
__diagrammatic_languages__
__runtime_evolution__
__Fortran_90__/95
__tutorial_explores__
__clichés__
__standardized_description__
__graphic_objects__,
__interprocedural_data-flow__
__meta_patterns__
__dynamic_memory_management__,
__conformance_checking__.
__statistics_package__
__Estelle_specifications__
__typed_intermediate_languages__
__module_cohesion__
__JavaBeans_components__.
__profiling_tools__,
__type-checker__
__separation_of_crosscutting_concerns__
__Erlang_code__
__deadline_driven__
__administration_policies__
__extended_transaction_models__.
__behavioral_correctness__
__disk_layout__,
__Java_byte_code__.
__abstract_specifications__.
__UML_collaboration_diagrams__
__Matlab/Simulink__,
__logic_language__.
__rich_user_interface__
__logical_blocks__.
__temporal-logic__
__exploration_process__,
__assertion_checking__.
__Protégé_OWL__
__numerical_libraries__.
__pipelined_microprocessor__
__algorithmic_transformations__
__formal_verification__:
__programming_language__:
(__extensible_markup_language__)
__desired_qualities__.
__CORBA_servers__
__modelling_environment__,
__querying_XML_data__.
__program_translation__.
__VHDL_code__,
__abstract_model_checking__.
__inductive_proofs__.
__timestamp_ordering__,
__stack_machine__.
__constraint-based_reasoning__
__generating_executable__
__loop_structure__.
__problem-solving_methods__,
__robot_controllers__,
__Spreadsheet_languages__,
__spreadsheet_languages__,
__patent_information__.
__calling_conventions__,
__programmer-friendly__
__action_semantics__,
__Graph_transformation_systems__
__textual_specifications__
__an_Eclipse_plugin__.
__scenario_specifications__
__feature_composition__.
__limited_inference__
__FreeRTOS__
__triple_store__.
__distributed_memory_multiprocessor_systems__
__partial_order_reduction__,
__object_repository__
__deductive_capabilities__
__a_HA__
__modeling_notations__,
__micro-architectures__,
__parallelizing_compiler__,
__involving_multiple_agents__.
__functional_modelling__
__aspect-oriented_programs__,
__COMMON_LISP__
__scope-bounded__
__interactive_user_interface__.
__Modelica_language__.
__kinetic_models__,
__library_modules__.
__infinite_state_model_checking__
__binary_format__.
__efficient_compilation__
__Artificial_Intelligence_systems__
__enforcing_access_control_policies__
__desired_functionality__.
__type_abstraction__.
__object-oriented_modeling_language__
__true-concurrency__
__automatic_repair__
__automated_consistency_checking__
__design-pattern__
__temporal_assertions__.
__MPEG-4_encoder__
__combinatorial_testing__,
__structured_graphics__
__conceptual_schemata__
__behavior_diagrams__
__member_functions__,
__QoS_specification__.
__Web_accessibility_evaluation__
__model_builders__
__formal_engineering__
__ASP_solving__
__distributed_debugging__,
__conceptual-modeling__
__XML_template__
__analysis_engine__,
__Prolog_code__.
__Reference_nets__
__Coordination_technology__
__architectural_design_patterns__
__aspect_orientation__
__reflective_capabilities__.
__macro_processor__.
__software_requirements_specification__.
__semantic_data_model__.
__meta-programs__
__code-generator__
__data_type__;
__OCL_specifications__
__aspect-oriented_software__.
__program_comprehension_tools__.
__Sangam__
__Ontology_Web_Language__
__coordination_patterns__,
__software_development_paradigm__,
__information_visualization_tool__.
__Ada-95__.
__software_metric_models__
__Petri_net_representation__.
__guideline_representation__
__hardware/software_implementation__.
__resistance_calculation__
__Specification-based_testing__
__refinement_transformations__.
__semantic_tableaux__
__capability_matching__.
Y&thinsp;__&Delta__;&thinsp;Y
__semaphore_operations__.
__object_oriented_metrics__
__alternative_architectures__.
__pipelined_schedules__.
__modeling_notation__,
__calling_conventions__
__Alpaca__
__semantic-preserving__
(__Fault_Tolerant__
__shared_memory_parallel_programming__
(__CP-nets__
__visual_syntax__.
__incomplete_specifications__.
__component_behaviour__
__the_Parma_Polyhedra_Library__
__semi-formal_and_formal__
__Reference_Attributed_Grammars__
__timed_CSP__
__mathematical_foundations__.
__timed_circuits__.
__backward_reachability_analysis__.
__runtime_library__,
__user-defined__.
__graphical_simulator__
__computational_algebra__.
__Control_abstraction__
__TLA+__,
__control_abstraction__.
__web_service_description__
__pre/post-conditions__
__call_stack__.
__augmented_marked_graphs__
__Goal-oriented_Requirement__
__aspect_extension__
__specification_formalism__,
__language_independence__,
__Bantam__
__State_coverage__
__simulation_interoperability__.
__HLA_federates__
__specification_styles__
__relational_database_engine__
__Previous_publications__
__software_fault_tolerance__,
__Temporal-RBAC__
__string_analysis__.
__concurrent_object-oriented_programming__
__Concurrent_objects__
__RBAC_models__,
__state_machine_based__
__hierarchical_modeling__,
__Object_Z__
__task_scheduler__,
__intermediate_form__,
__super_class__.
__nominal_compounds__.
__domain_modelling__.
__Object_Pascal__
__Sequence_diagram__
__configuration_manager__,
__Timing_information__
__generalized_stochastic_Petri_net__
__automatic_test_data_generation__.
__validation_tools__.
__data_models__;
__domain_semantics__,
__Celadon__
__executable_specifications__,
__MATLAB/SIMULINK__
__Object_management__
__quality_constraints__,
__Java_class__.
__object_relationship__
__asynchronous_pipelines__
__Secure_Tropos__,
__function-shipping__
__Remote_Procedure_Call_mechanism__
__Petri_Nets_formalism__
__SymTA/S__
__block_diagram__.
__impedance_mismatch__.
__nondeterministic_behavior__.
__Java_API__.
__database_functionality__.
__installation_instructions__
__Automatic_debugging__
__aspect-oriented_extension__
__RDF_query__
__subsequent_releases__.
__comments_and_identifiers__.
__constraint_description__
__high-level_specifications__,
__static_type_inference__
__generalized_semi-Markov_process__
__active_database_rules__
__condition-action__
__adequacy_criteria__.
__separate_modules__,
__iterator-based__
__executable_specification__.
__coordination_requirements__,
__prediction_engine__
__gaining_wide_acceptance__
__CPN_models__.
__task_and_data_parallelism__,
__potential_conflicts__.
__embedded-software__
__nanoscale_crossbar__
__specialist_knowledge__
__verification_toolbox__
__RTL_circuit__.
__Category-Partition__
__counter_abstraction__.
__Heuristic_optimization__
__DEVS_based__
__trace_generation__,
__synchronous_IPC__
__Petri_net_model__.
__graphical_programming_environment__
__hierarchical_test_generation__.
__purely_functional_programming__
__discrete_controller_synthesis__
__interface_specification_language__
__BPMN_models__.
__business_components__,
__multiple_clocks__.
__compiler_infrastructure__,
__trace_specifications__
__requirements_driven__
__cross-compilation__
__interchange_language__
__language_reference_manual__
__Semantic_modeling__
__BDI_agent_architecture__
__SDKs__
__Security_properties__
__high_level_language_constructs__
__legacy_FORTRAN__
__test_models__,
"__push-button__"
__sequential_languages__.
__language-based__,
__tensor_contraction__
__Hobbes__
__knowledge_acquisition_and_representation__
__building_user_interfaces__
__prototyping_tools__,
__graph_transformation_languages__
__behavioral_contracts__
__protocol_testing__
__JESS__,
__code_synthesis__.
__adaptation_contracts__
__RX__,
__integral_calculus__
__quality_assurance_process__.
__dynamic_software_architectures__
__Relational_semantics__
__schemas_evolve__.
__continuation_passing__
__run-time_checking__.
__relational_Bayesian_networks__
__MPI_derived_datatypes__
(__Object_Constraint_Language__)
__algorithmic_program__
__weak_references__.
__spatial_integrity_constraints__
__definite_clause_grammars__
__interoperability_tests__
__independent_manner__,
__protocol_state_machines__.
__tagged_memory__
__Perl__)
__constrained-input__
__reverse_compilation__
__control_flow_constructs__.
__semi-automatically_generated__
__mathematical_theorems__.
__Web_Services_Orchestrations__
__XPath_processor__
__agent-oriented_programming_language__
__compensating_transactions__
__Haskell_compiler__,
__schema_modifications__
__designer's_point_of_view__,
__specific_rules__,
__programming_language_independent__
__meta_information__,
__semantic_preserving__
__the_HOL4_theorem_prover__.
__formal_ontology__,
__symbolic_interpretation__
__weakly-typed__
__schema_definitions__.
__upper-level_ontology__
__web_services_compositions__
__Network_elements__
__event_driven__,
__Object_Oriented_Methodology__
__named_graphs__.
