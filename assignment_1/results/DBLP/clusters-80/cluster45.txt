__data_structures__
__low-level__
__run-time__
__fine-grained__
__test_cases__
__application-specific__
__data_flow__
__data_structures__.
__static_analysis__
__parallel_programs__
__message_passing__
__control_flow__
__memory_management__
__data_structures__,
__garbage_collection__
__input/output__
__timing_constraints__
__compile-time__
__application_programs__
__program_execution__
__access_patterns__
__concurrency_control__
__Java_programs__
__parallel_programs__.
__non-blocking__
__Java_programs__.
__concurrent_programs__
__source_code__,
__communication_patterns__
__mutual_exclusion__
__shared_data__
__data-dependent__
__register_allocation__
__timing_constraints__.
__data_dependencies__
__C_programs__
__program_behavior__
__symbolic_execution__
__data-flow__
__control-flow__
__language_features__
__intermediate_results__
__program_transformations__
__test_cases__,
__concurrent_programs__.
__address_space__
__implementation_details__
__data_layout__
__long-running__
__program_execution__.
__shared_memory__.
__basic_blocks__
__carefully_designed__
__transactional_memory__
__parallel_execution__
__binary_code__
__memory_allocation__
__dynamic_analysis__
__non-determinism__
__interprocess_communication__
__read-only__
__hardware_support__
__timing_information__
__compiler_optimizations__
__software_pipelining__
__sequential_programs__
__Run-time__
__code_fragments__
__critical_sections__
__dynamic_data__
__C_programs__.
__multiple_independent__
__application_code__
__execution_model__
__wait-free__
__flow_graph__
__concurrent_processes__
__garbage_collection__.
__machine_code__
__program_code__
__hand-coded__
__memory_locations__
__application_programs__.
__function_calls__
__data_dependences__
__type_information__
__multiple_threads__
__speculative_execution__
__multiple_tasks__
__type-safe__
__typically_requires__
__communication_primitives__
__program_slicing__
__message_passing__.
__control_flow__,
__parallel_program__
__Java_bytecode__
__lock-free__
__execution_traces__
__lock-based__
__memory_model__
__execution_paths__
__static_analysis__.
__without_needing__
__fine_grained__
__demand-driven__
__executable_code__
__program_behavior__.
__instruction_scheduling__
__source_codes__
__data_dependence__
__data_parallelism__
__memory_operations__
__basic_operations__
__synchronization_primitives__
__method_calls__
__multiple_processes__
__distributed_programs__
__functionally_equivalent__
__conflict_detection__
__computational_tasks__
__coherence_protocol__
__object-oriented_programs__
__data_dependency__
__multiple_data__
__working_set__
__profile_information__
__local_variables__
__assembly_code__
__loop_nests__
__history-based__
__native_code__
__garbage_collection__,
__dynamic_binding__
__deadlock_detection__
__shared_variables__
__source-level__
__efficient_implementations__
__timing_requirements__
__database_operations__
__test_inputs__
__database_access__
__shared_memory__,
__compile_time__
__message_passing__,
__parallel_code__
__static_analyses__
__primitive_operations__
__synchronization_mechanism__
__easily_modified__
__parallel_processes__
__nested_loops__
__concurrency_control__.
__black_box__
__shared_objects__
__commonly_occurring__
__non-contiguous__
__sequential_consistency__
__loop_transformations__
__dependence_analysis__
__control_flow__.
__pointer_analysis__
__garbage_collectors__
__basic_block__
__array_elements__
__process_execution__
__asynchronous_systems__
__compiler_optimization__
__multithreaded_programs__
__flow_analysis__
__task_graph__
__unit_tests__
__side_effects__.
__error_handling__
__atomic_actions__
__address_space__.
__instruction-level__
__timing_constraints__,
__program_executions__
__data_races__
__storage_allocation__
__application_program__
__machine-independent__
__Article_Summaries__.
__garbage_collector__
__sequential_programs__.
__dataflow_analysis__
__requires_minimal__
__code_transformations__
__memory_management__.
__integrity_checking__
__parallel_execution__.
__program_structure__
__code_optimization__
__software_transactional_memory__
__SQL_statements__
__stack-based__
__Java_programs__,
__loop_unrolling__
__data_dependent__
__reads_and_writes__
__object_code__
__data_transformations__
__algorithms_and_data_structures__
__static_analysis__,
__exception_handling__.
__parallel_computations__.
__data_distribution__,
__frequently_executed__
__read-write__
__independent_tasks__
__intermediate_representation__
__multithreaded_programs__.
__conditional_branches__
__dynamic_memory__
__instruction_sequences__
__loop_iterations__
__cache_behavior__
__concurrent_processes__.
__hardware_support__.
__pointer-based__
__parallel_programs__,
__Transactional_memory__
__sequential_code__
__high-level_languages__
__control_flows__
__data_access_patterns__
__inter-process_communication__
__synchronization_mechanisms__
__global_synchronization__
__side-effects__
__message-based__
__compiler_optimizations__.
__code_segments__
__data_locality__.
__application_behavior__
__Java_program__
__highly_concurrent__
__large_programs__
__call_graph__
__WCET_analysis__
__data_dependencies__.
__data_flow__,
__dynamic_compilation__
__procedure_calls__
__existing_code__
__low-level__,
__access_patterns__,
__distributed_computations__
__inter-thread__
__complex_data_structures__
__ordering_constraints__
__mutual_exclusion__,
__remote_execution__
__modulo_scheduling__
__multiple_processors__.
__inter-procedural__
__memory_reference__
__transactional_memory__.
__program_modules__
__automatic_parallelization__
__parallel_loops__
__concurrently_executing__
__dynamic_slicing__
__shared_state__
__compiler_techniques__
__application_code__.
__exception_handling__,
__shared_data__.
__data-flow_analysis__
__atomic_operations__
__array_references__
__approach_works__
__reference_counting__
__calling_context__
__dataflow_graphs__
__page-level__
__code_motion__
__synchronous_communication__
__optimizing_compilers__
__method_invocations__
__fail-stop__
__input_streams__
__compiled_code__
__loop_fusion__
__large_programs__.
__communicating_processes__
__Java_code__.
__existing_implementations__
__breaking_down__
__shared_variables__.
__without_interrupting__
__memory_safety__
__mutual_exclusion__.
__function_calls__.
__application-dependent__
__concurrency_control__,
__control_tasks__
__thread_scheduling__
__Data_structures__
__constraint_violations__
__register_allocation__,
__data_mapping__
__dynamically_allocated__
__application_programs__,
__implementation_details__,
__timing_constraint__
__remote_data__
__memory_protection__
__optimization_opportunities__
__program_optimization__
__synthesis_algorithms__
__recovery_mechanisms__
__static_program_analysis__
__implemented_efficiently__
__register_allocation__.
__fully_automatically__
__user_level__
__hard-coded__
__fine_granularity__
__worst-case_execution_time__
__source_programs__
__special_hardware__
__inter-processor__
__interprocedural_analysis__
__redundant_computations__
__concurrent_execution__
__data_dependencies__,
__address_spaces__
__basic_blocks__.
__context_switches__
__global_states__
__data_redistribution__
__source-code__
__dependence_graph__
__control_structures__,
__parallel_algorithms__,
__data_store__
__nested_transactions__
__solution_involves__
__data_layouts__
__data_dependence_analysis__
__logical_processes__
__read-modify-write__
__memory_errors__
__control_dependence__
__global_state__
__multi-threaded_programs__
__concurrent_programs__,
__program_points__
__timing_behavior__
__compiler-based__
__runtime_information__
__distributed_transactions__
__require_special__
__memory_management__,
__alias_analysis__
__C_programs__,
__method_invocation__
__trace_files__
__source_files__
__protocol_implementations__
__fairly_simple__
__global_variables__
__execution_model__.
__run-time__,
__program_statements__
__instruction_execution__
__consistency_checks__
__instruction_selection__
__program_executions__.
__run-time_checks__
__program_fragments__
__synchronization_operations__
__individual_tasks__
__message-driven__
__dynamic_data_structures__
__database_transactions__
__sequential_execution__
__hard_real-time_systems__
__read-only_transactions__
__control_flow_graph__
__program_execution__,
__communication_operations__
__relational_operations__
__library_functions__
__Compile-time__
__efficiently_implementing__
__task-level__
__intermediate_level__
__trace_analysis__
__nested_loops__.
__profile-driven__
__snapshot_isolation__
__graph_reduction__
__data_flow_graph__
__dynamic_updates__
__dynamic_memory_allocation__
__producer-consumer__
__Static_analysis__
__fork-join__
__program_behavior__,
__type_analysis__
__compiler_analysis__
__loop_transformation__
__loop_nests__.
__memory_models__
__memory_access_patterns__
__parallel_code__.
__existing_programs__
__layout_information__
__file-system__
__interrupt_handling__
__optimized_code__
__interprocess_communication__.
__address_space__,
__object-oriented_languages__,
__communication_primitives__.
__memory_consistency__
__thread-based__
__local_state__
__consistency_models__
__communicating_processes__.
__persistent_data__
__performance-oriented__
__programming_style__.
__page-based__
__escape_analysis__
__re-ordering__
__memory_leaks__
__pipeline_stage__
__high-level_abstractions__
__multiple_iterations__
__user_programs__
__memory_model__.
__program_components__
__software_pipelining__.
__join_point__
__dynamic_memory_management__
__execution_sequences__
__performance_optimizations__
__SSA_form__
__message_handling__
__virtual_memory__,
__weak_consistency__
__type_annotations__
__dynamic_slices__
__semantically_correct__
__highly_efficient__,
__race_detection__
__platform-dependent__
__whole-program__
__optimizing_compilers__.
__complex_data_structures__.
__concurrent_program__
__dynamic_data_structures__.
__code_generators__.
__data_access_patterns__.
__speculative_execution__.
__just_enough__
__fine-grained_control_over__
__security-sensitive__
__code_execution__
__sequential_processes__
__language_features__,
__communication_behavior__
__sequential_consistency__.
__execution_models__
__common_subexpressions__
__existing_code__.
__shared_data__,
__real_hardware__
__data_races__.
__function_calls__,
__greatly_simplified__
__array_operations__
__data-structure__
__database_operations__.
__small_programs__
__constant_propagation__
__software_pipelining__,
__translation_process__
__parameter_passing__
__refinement_steps__
__execution_path__
__inter-module__
__sequential_programs__,
__concurrent_threads__
__program_codes__
__synchronization_primitives__.
__instruction_streams__
__update_transactions__.
__thread-local__
__runtime_systems__
__per-thread__
__deterministic_replay__
__compiler_optimizations__,
__machine_code__.
__branch_instructions__
__unit_test__
__data-independent__
__abstract_syntax_trees__
__method_calls__.
__pre-execution__
__consistency_requirements__
__reference_patterns__
__source_level__
__inter-process__
__data_flow_graphs__
__method_calls__,
__data_decomposition__
__memory_layout__
__Exception_handling__
__execution_trace__
__non-determinism__,
__parallel_processes__.
__separate_compilation__
__state_space_exploration__
__machine-dependent__
__extraction_techniques__
__instruction_scheduling__.
__concurrent_software__
__test_paths__
__synchronization_mechanism__.
__concurrent_activities__
__intermediate_code__
__data_flow_analysis__.
__query_evaluation__,
__program_paths__
__dynamic_feedback__
__register_allocator__
__read_operation__
__safety_property__
__error_recovery__,
__side-effects__.
__post-mortem__
__memory_locations__.
__carefully_crafted__
__live_ranges__
__thread-level__
__locality_of_reference__.
__compiler_support__
__global_view__
__parallel_program__.
__transaction_execution__
__memory_model__,
__user_space__
__interrupt-driven__
__block-structured__
__basic_blocks__,
__cost_model__,
__binary_code__.
__redundant_computation__
__error-detection__
__modular_structure__
__user-defined_functions__
__node-level__
__remote_procedure_calls__
__infeasible_paths__
__runtime_behavior__
__concurrent_operations__
__sequential_program__
__multi-threading__.
__code_instrumentation__
__parallel_threads__
__resource_conflicts__
__assembly_code__.
__speculative_threads__
__specialized_hardware__.
__event_traces__
__process_networks__
__copy-on-write__
__type_information__.
__atomic_blocks__
__machine_instructions__
__partial_redundancy_elimination__
__hardware_structures__
__data_dependences__.
__critical_regions__
__shared_variable__
__procedure_calls__.
__clean-up__
__fine-grain_parallelism__
__object_references__
__OpenMP_applications__
__shadow_memory__
__multiple_versions__
__user-initiated__
__global_transactions__
__send/receive__
__instruction_stream__
__byte_code__
__syntactically_correct__
__atomicity_violations__
__helps_programmers__
__flow_graph__.
__execution_behavior__
__code_blocks__
__test_code__
__kernel_code__
__failure_detection__,
__type_errors__
__high-level_languages__.
__program_traces__
__conditional_branches__.
__loop-based__
__parallel_languages__
__operating_system_services__
__multi-threading__,
__parallel_implementations__.
__read_and_write_operations__.
__stable_storage__.
__architecture-independent__
__source-to-source__
__dataflow_graph__
__large_programs__,
__iteration_spaces__
__execution_plan__
__Garbage_collection__
__greatly_simplifying__
__object_code__.
__code_analysis__
__native_code__.
__array_accesses__
__bytecode_verification__
__code_optimizations__
__program_versions__
__data_race__
__device-specific__
__event_scheduling__
__storage_management__.
__memory_addresses__
__real-time_threads__
__dynamic_analyses__
__profiling_information__
__constraint_checking__
__context_sensitivity__
__indirect_addressing__
__loop_nest__
__fine-grained_parallelism__
__array_access__
__garbage-collected__
__file_operations__
__program_constructs__
__intra-procedural__
__generated_code__
__efficient_execution__.
__self-correcting__
__Java_bytecodes__
__cache-aware__
__concurrency_control_mechanisms__
__code_sequences__
__persistent_state__
__vector_clocks__
__code_regions__
__error_checking__
__compile-time_analysis__
__internal_state__.
__program_restructuring__
__data_reorganization__
__exception_handlers__
__shared_object__
__atomic_transactions__
__worst-case_execution_times__
__scientific_codes__.
__sequential_code__.
__heap_memory__
__dependence_information__
__pipeline_parallelism__
__manually_written__
__code_transformation__
__path_profiling__
__asynchronous_processes__
__predicated_execution__
__reads_and_writes__.
__carefully_tuned__
__compiler-generated__
__remote_method_invocation__
__memory_manager__
__program_states__
__OS-level__
__error-handling__
__spatial_and_temporal_locality__
__event_handlers__
__history_information__
__data_layout__.
__undo/redo__
__program_code__,
__SQL_statements__.
__simple_programs__
__timing_information__,
__language_specification__
__context_switching__,
__process_instances__
__running_programs__
__sufficient_flexibility__
__vector_operations__
__dynamic_code__
__memory_address__
__critical_sections__.
__language-level__
__data_speculation__
__program_generators__
__automatically_synthesizes__
__rolling_back__
__allocation_and_deallocation__
__explicit_communication__
__optimized_code__.
__parallel_loops__.
__primitive_functions__
__memory_leak__
__untrusted_code__
__feedback-directed__
__multi-dimensional_arrays__
__JavaScript_code__
__data_parallelism__.
__efficiently_implemented__.
__slim__
__embarrassingly_parallel__
__memory_regions__
__dynamic_checks__
__object_graphs__
__data_flow_information__
__nested_transactions__.
__machine_models__
__class_loading__
__programming_styles__
__run-time_monitoring__
__conditional_branch__
__user-mode__
__program_inputs__
__virtual_synchrony__
__lock-step__
__global_memory__
__dynamic_dispatch__
__consistency_guarantees__
__execution_paths__.
__parallel_tasks__.
__distributed_data_structures__
__writing_code__
__reference_behavior__
__FIFO_queue__
__path-sensitive__
__mark-and-sweep__
__program_semantics__.
__thread_management__
__sequentially_consistent__
__nested_loops__,
__scientific_programs__.
__loop_transformations__.
__abstracts_away__
__adding_or_removing__
__fully_automated__,
__phase_behavior__
__guest_OS__
__message_communication__
__parallel_operations__
__garbage_collector__.
__executed_concurrently__
__conditional_statements__
__database_processing__
__efficient_distributed__
__distributed_programs__,
__storage_management__,
__abstracting_away__
__machine-specific__
__Concurrency_control__
__process_instance__
__memory_leaks__.
__error_handling__,
__single-writer__
__message-passing__.
__inherently_parallel__
__linked_lists__.
__previous_designs__
__global_variables__,
__dataflow_graphs__.
__software_pipeline__
__parallel_execution__,
__memory_layouts__
__synchronization_points__
__related_operations__
__low-level_programming__
__library_code__
__sequencing_constraints__
__stack_allocation__
__just_in_time__
__distributed_execution__
__extremely_fast__,
__API_calls__
__compiler_optimization__.
__execution_flow__
__production_code__
__data-structures__
__special-purpose_hardware__
__error_traces__
__application_code__,
__executed_concurrently__.
__instruction_level__
__critical_sections__,
__dynamic_analysis__,
__nested_parallelism__
__join_points__.
__heap_space__
__virtual_address_space__
__code_duplication__
__program_optimization__.
__bug_detection__
__linked_data_structures__
__coarse-grained_parallelism__
__generated_code__.
__method_invocation__.
__call_stack__
__cache_coherence_protocols__.
__method_invocations__.
__synchronization_operations__.
__correct_execution__
__leverage_existing__
__automatic_memory_management__
__pointer_variables__
__SSA-based__
__object_serialization__
__expression_evaluation__
__optimizing_transformations__
__worst_case_execution_time__
__scoped_memory__
__service_invocations__
__asynchronous_systems__,
__failure-inducing__
__expected_behavior__
__concurrency_control_mechanism__
__update_operations__,
__machine_instructions__.
__target_code__
__test_inputs__.
__optimization_issues__
__memory_ordering__
__Java_objects__
__communication_primitives__,
__coherence_protocol__.
__message-passing__,
__compare-and-swap__
__dynamic_execution__
__object_creation__
__application_dependent__
__parallel_activities__
__machine_code__,
__embedded_programs__
__source_program__
__executing_program__
__addressing_modes__
__static_analysis_techniques__
__MPI_processes__
__data_races__,
__user_programs__.
__distributed_shared_memory__.
__communication_operations__.
__shared_data_structures__
__vector_operations__.
__client-specific__
__interprocess_communication__,
__disk_block__
__whilst_preserving__
__normal_flow__
__instruction_sequence__
__register_values__
__language_support__
__sequential_execution__.
__memory_instructions__
__program_runs__
__complex_data_structures__,
__loop_unrolling__,
__deeply_nested__
__binary_instrumentation__
__control_flows__.
__OpenMP_programs__
__executed_directly__
__type-safety__
__hardware_support__,
__dependence_analysis__,
__stack_frame__
__coarse-grain_parallelism__
__source_programs__.
__array_accesses__.
__instruction_scheduling__,
__multithreaded_programs__,
__code_cache__
__sequential_tasks__
__static_slicing__
__function_pointers__
__syntactic_constructs__
__global_analysis__
__audit_trail__
__copy_operations__
__idle_cycles__
__instrumentation_code__
__high_level_of_abstraction__
__asynchronous_events__
__computing_engine__
__run-time_checks__.
__program_slices__
__workflow_instances__
__mutual_consistency__
__memory_contents__
__real-time_tasks__,
__array_reference__
__array_references__.
__code_execution__.
__debugging_techniques__
__red-black_tree__
__data_alignment__
__data_dependence__,
__thread_synchronization__
__dependence-based__
__periodic_tasks__,
__multiple_threads__.
__multi-writer__
__checkpointing_mechanism__
__compilation_process__
__alias_information__
__user_code__
__fork/join__
__multi-threaded_programs__.
__weakly_consistent__
__executed_simultaneously__
__significantly_simplify__
__JIT_compiler__
__Register_allocation__
__automatic_parallelization__.
__execution_strategy__
__automatically_checks__
__instruction_level_parallelism__.
__dependency_tracking__
__safety_guarantees__
__side-effects__,
__OpenMP_directives__
__addressing_mode__
__concurrently_executed__
__loop_iterations__.
__scheduling_constraints__
__assignment_statements__
__low-level_details__
__state_graph__
__multiple_threads__,
__logical_process__
__strong_atomicity__
__conflict_detection__,
__memory_consistency_model__
__procedure_calls__,
__dynamic_class_loading__
__global_control__
__garbage_collected__
__proven_correct__.
__data-flow_graphs__
__pipelined_machine__
__numerical_programs__
__program_paths__.
__compiler_transformations__
__linked_data_structures__.
__side-effecting__
__hard_real-time_constraints__.
__handled_efficiently__
__barrier_synchronization__.
__code_transformations__.
__address_traces__
__write_barriers__
__run-time_checking__
__disk_layout__
__live_variables__
__Data_flow__
__producer_and_consumer__
__code_modification__
__workflow_specifications__
__additional_optimizations__
__intermediate_data_structures__
__high-level_languages__,
__machine_model__
__shared_objects__,
__explosion_problem__
__pointer-based_data_structures__.
__execution_order__
__executed_efficiently__
__multiple_executions__
__multiple_instructions__
__scalar_variables__
__loop_bounds__
__operating-system__
__OO_languages__
__special_instructions__
__dynamically_computed__
__aggressive_optimizations__
__loop_optimizations__
__previously_executed__
__incremental_computation__
__speculative_state__
__potentially_expensive__
__small_modifications__
__correctly_handles__
__cycle-stealing__
__programming_patterns__
__atomic_sections__
__correct_programs__
__byte-level__
__parallel_simulation__,
__trace_scheduling__
__Mutual_exclusion__
__concurrent_components__
__process_execution__,
__timing_requirements__,
__design_errors__,
__efficiently_implementable__
__multiple_processes__,
__source_codes__,
__statement-level__
__atomic_units__
__detecting_conflicts__
__WCET_analysis__.
__fault_containment__
__asynchronous_message_passing__
__concurrency_bugs__.
__data_race_detection__
__coarse_granularity__
__locality_analysis__
__parallel_simulations__.
__loop_iteration__
__existing_programs__.
__off-loading__
__completely_automatically__
__instruction_streams__.
__virtual_processors__
__database_transactions__.
__execution_history__
__declarative_queries__
__reference-counting__
__executing_programs__
__execution_paths__,
__pre-compiled__
__sequential_processes__.
__consistency_enforcement__
__path_coverage__
__atomic_registers__
__at-most-once__
__control_statements__
__program_optimizations__
__event_set__
__execution_patterns__
__software_model_checkers__
__producer/consumer__
__address_spaces__.
__global_predicates__
__atomic_regions__
__fairly_complex__
__runtime_checks__
__copy_and_paste__
__scalar_replacement__
__collective_operations__,
__speculatively_executed__
__statically_analyze__
__task_migration__,
__type_safe__
__independent_tasks__,
__inner_loops__
__dangling_pointers__
__fine-grained_parallelism__.
__concurrent_threads__.
__module_interfaces__
__execution_phases__
__programming_idioms__
__database_functionality__
__sequential_consistency__,
__plan_execution__,
__control_dependences__
__program_units__
__code_sections__
__branch_history__
__class_files__
__dependence_test__
__efficiently_detecting__
__array_bound__
__individual_threads__
__instruction_scheduler__
__machine-code__
__path_profiles__
__execution_histories__
__JIT_compilation__
__code_modifications__
__allocation_sites__
__client_code__
__exception_handler__
__specialized_code__
__function-level__
__compiler_generates__
__binary_rewriting__
__Parallel_programs__
__lock-free_algorithms__
__special_hardware__.
__placement_constraints__
__concurrency_errors__
__parallel_programming_languages__
__pointer_arithmetic__
__potential_bottlenecks__
__executable_code__,
__loop_nests__,
__thread_creation__
__integrity_checks__
__synchronization_code__
__array_operations__.
__dataflow_analysis__.
__interactive_debugging__
__parallel_loop__
__data_dependences__,
__binary_form__
__application_semantics__.
__remote_invocation__
__helper_threads__
__paper_extends__
__parallelization_technique__
__memory_locations__,
__reaching_definitions__
__extremely_efficient__,
__Optimization_techniques__
__query_execution__,
__potential_parallelism__
__compiled_code__.
__readers_and_writers__
__concurrent_transactions__.
__liveness_analysis__
__parallel_loops__,
__distributed_arrays__
__memory_protection__.
__plan_generation__.
__execution_control__
__global_register_allocation__
__timing_anomalies__
__heap-based__
__memory-resident__
__function_level__
__class_libraries__,
__single_assignment__
__sequential_code__,
__lock-based_synchronization__
__dependence_graph__.
__concurrent_execution__.
__write-once__
__Ada_programs__
__executable_programs__
__deadlock_free__.
__obstruction-free__
__minimally_intrusive__
__address_computation__
__instruction_trace__
__automatically_verified__
__parallel_languages__.
__execution_profiles__
__loop_unrolling__.
__copying_and_pasting__
__interconnection_patterns__
__data_independent__
__Prior_approaches__
__multiple_phases__
__state-saving__
__executing_tasks__
__avoid_redundant__
__debugging_support__
__heap_objects__
__operating_system's__
__program_segments__
__detects_and_corrects__
__synchronization_primitive__
__shared_state__.
__loop_structures__
__security_checks__
__kernel_level__
__associative_search__
__easily_changed__
__data_race_detection__.
__target_machine__
__memory_reuse__
__slicing_algorithm__
__existing_code__,
__persistent_storage__.
__return_address__
__global_predicate__
__structured_programs__
__circuit_description__
__live_objects__
__memory_traces__
__shared_variables__,
__compiler_optimization__,
__code_optimization_techniques__
__lets_programmers__
__storage_model__.
__isolation_levels__
__code_compaction__
__concurrently_execute__
__shared_registers__.
__dependence_chains__
__tail_recursion__
__model_checkers__,
__atomicity_violations__.
__dynamic_optimizations__
__garbage_collector__,
__constant_propagation__,
__parse_table__
__object-oriented_programming_languages__,
__paper_analyzes__
__easily_reconfigured__
__specialized_programs__
__program_parallelization__
__performance-enhancing__
__event_stream__
__post-pass__
__return_values__
__reliable_memory__
__stack_inspection__.
__race-free__
__Fortran_code__
__Ada_program__
__control_dependencies__
__fine-grained_synchronization__
__late-binding__
__dataflow_programs__
__efficiently_execute__
__global_variables__.
__highly-optimized__
__event_traces__.
__Instruction-level__
__assignment_rules__
__Program_transformations__
__Data_flow_analysis__
__program_flow__
__slicing_algorithms__
__distributed_memory_systems__
__heap_allocation__
__statistics_collection__
__produce_high-quality__
__concurrency-related__
__array_subscripts__
__message_queues__
__state-space_exploration__
__imperative_programming_languages__
__program_executions__,
__assembly_programs__
__control_flows__,
__memory_reference_patterns__
__program_counter__
__instruction_stream__.
__recovery_actions__.
__algebraic_transformations__
__property_violations__
__highly-concurrent__
__application_logic__,
__hand-coding__
__overlapping_windows__
__binary_code__,
__hard-real-time__
__deterministic_execution__
__address_spaces__,
__procedural_abstraction__
__asynchronous_processes__,
__processor_pipeline__
__migration_strategies__
__persistent_objects__,
__memory_reclamation__
__bytecode_programs__
__trace_generation__
__execution_mode__
__backward_error_recovery__
__compiler_generated__
__real-time_garbage_collection__.
__Concurrent_programs__
__Java_thread__
__instruction_execution__.
__modern_languages__
__asynchronous_message-passing__
__separately_compiled__
__process_synchronization__
__global_state__.
__conditional_branching__
__strictly_sequential__
__programs_written__
__calling_contexts__
(__run-time__)
__parser_generators__
__register_set__
__garbage_collectors__,
__sequential_processing__
__type_declarations__
__memory_transactions__
__correct_execution__.
__constraint_propagation__,
__local_propagation__
__memory-management__
__control_transfers__
__indirect_branch__
__information_flow_tracking__
__activation_records__
__removes_redundant__
__database_consistency__
__executable_files__
__dynamic_linking__.
__code_optimization__,
__store_instructions__
__error_messages__.
__process_migration__,
__input/output__.
__Parallel_applications__
__database_updates__.
__synchronous_programs__
__data_parallelism__,
__SIMD_operations__
__partially_redundant__
__thread-specific__
__realtime_systems__
__operational_mode__
__mode_switches__
__instrumented_code__
__OS_kernel__
__code_caches__
__source_operands__
__push_and_pop__
__return_addresses__
__remote_method_invocations__
__synchronization_primitives__,
__busy-wait__
__message_passing_programs__.
__totally_independent__
__code_segments__,
__code-generation__
__handling_multiple__
__combination_thereof__.
__Prolog_programs__,
__type_extension__
__control_flow_analysis__
__enabling_and_disabling__
__eager_and_lazy__
__user-defined_types__
__compilation_strategy__
__shared_library__
__loop_optimization__
__program_dependencies__
__kernel_modules__
__nested_transactions__,
__nested_parallelism__.
__Optimizing_compilers__
__register_allocator__.
__function_pointer__
__type_check__
__static_checks__
__range_checks__
__specification_mining__
__reference_counting__,
__storage_allocation__.
__run-time_code_generation__
__inter-process_communication__.
__reference_monitors__
__reference_counts__
__concurrent_events__
__distributed_queries__
__rule_processing__
__machine_architecture__.
__persistent_storage__,
__fully_transparent__
__isolation_level__
__heap-allocated__
__completely_decoupled__
__relaxed_consistency__
__Grid_jobs__
__execution_context__
__message-passing_programs__.
__binary_form__.
__sufficiently_precise__
__Device_drivers__
__concurrency_bug__
__inherently_sequential__
__explicitly_parallel__
__single-assignment__
__low-contention__
__speculative_memory__
__precise_exception__
__synchronization_problems__,
__main_objectives__
__compiler-inserted__
__dynamic_verification__
__additional_instructions__
__divide-and-conquer_algorithms__.
__predicated_code__
__dynamic_load_balancing__,
__runtime_execution__
__process_scheduling__,
__prefetch_engine__
__pointer-based_data_structures__
__prove_or_disprove__
__Modulo_scheduling__
__user-transparent__
__hot_paths__
__calling_context__.
__DMA_transfers__
__data_representations__,
__user-input__
__safety_constraints__
__unit_tests__,
__container_classes__
__function_pointers__,
__program_modifications__
__static_data_flow__
__object_lifetimes__
__shared_memory_accesses__
__timing_channels__
__SQL_statements__,
__computational_tasks__,
__program_slice__
__function_invocations__
__remote_procedure_calls__.
__compensation_code__
__runtime_type__
__meaning-preserving__
__major_modifications__
__program_structures__,
__mapped_directly__
__timeliness_properties__
__Timing_constraints__
__memory_blocks__,
__Haskell_98__
__relaxed_memory_models__.
__programmers_write__
__program_instrumentation__
__dynamic_slicing__.
__state_restoration__
__compiler_techniques__,
__micro-operations__
__kernel_code__.
__virtual_addresses__
__Static_checking__
__binary_programs__
__induction_variables__
__dynamic_data_structures__,
__memory_consistency_models__.
__send-receive__
__thread-aware__
__address_calculation__
__efficient_synchronization__
__priority_inversion__,
__memory_optimizations__
__root_scanning__
__byte_codes__
__simple_instructions__
__event_handler__
__data-parallelism__
__ownership-aware__
__API_calls__.
__fault-localization_techniques__
__pointer_analyses__
__compactly_encode__
__specially_crafted__
__asymmetry-aware__
__event_execution__
__static_program__
__machine_description__
__syntax-preserving__
__data_layout__,
__heap_objects__.
__automatic_update__
__Previous_implementations__
__code_motion__,
__write_barrier__
__control-flow_graph__
__quality_assessments__
__Control_flow__
__file_access_patterns__
__run-time_adaptation__.
__thread_migration__.
__early_phase__
__exploit_parallelism__
__deployed_software__.
__memory-bounded__
__fossil_collection__
__concurrent_reads__
__bounds_checks__
__stack_frames__
__DOACROSS_loops__
__multithreaded_Java_programs__.
__dynamic_compilation__,
__parallel_threads__.
__Fortran_programs__.
__Java_agents__
__database_transactions__,
__run_concurrently__.
__concurrently_accessed__
__serial_execution__
__point-to-point_communication__,
__memory_access_patterns__,
__interprocedural_slicing__
__security_check__
__configuration_bitstreams__
__TM_implementations__
__tedious_and_error-prone__,
__interprocedural_data_flow__
__generational_garbage_collection__
__write-ahead_logging__
__recovery_blocks__
__parallel_code__,
__control_speculation__
__process_creation__
__atomic_operations__,
__atomic_operations__.
__bytecode_instructions__
__static_information__,
__interrupt_handlers__
__compiler_analysis__.
__interprocedural_dataflow_analysis__
__programming_styles__,
__activation_record__
__program_statements__.
__automatically_inserts__
__static_single_assignment_form__
__code_integrity__
__hardware_modules__,
__address_arithmetic__
__program_parallelization__.
__timing_characteristics__
__execution_path__,
__mobile_programs__
__context-switch__
__virtual_address__
__modest_hardware__
__extremely_lightweight__
__delay_slots__
__type_analysis__.
__parallel_program__,
__decoded_instructions__
__left_recursion__
__modulo_scheduling__.
__bytecode_instrumentation__
__MPI_calls__
__asynchronous_computation__
__loop_parallelism__
__connection_reconfiguration__
__pointer_analysis__,
__Sequential_consistency__
__communication_optimizations__
__executing_concurrently__
__asynchronous_protocols__
__race_freedom__
__pointer_aliasing__
__code_transformations__,
__stored_data__,
__security_critical__
__strong_updates__
__considerably_simplified__
__test_programs__,
__avoid_costly__
__largely_independent__
__phase_ordering__
__address_registers__
__inter-process_communication__,
__language_implementations__
__client_code__.
__source-to-source_transformation__
__totally_transparent__
__directed_tests__
__iterative_computations__
__Lisp_programs__
__storage_reclamation__
__parallel_performance__,
__computation_and_communication__,
__multi-dimensional_array__
__stack_operations__
__register_constraints__
__address_translation__,
__unreachable_states__
__source_code_transformations__
__fault_sets__
__fully_parallelized__
__removing_unnecessary__
__code_analysis__,
__easily_maintained__
__multiple_steps__.
__static_analyzers__
__lock_manager__
__concurrent_tasks__.
__local_variables__,
__source_program__.
__performance_bugs__
__read-only_transaction__
__error_detectors__
__separate_compilation__,
__addressing_modes__,
__rule-sets__
__model-checking_tools__
__execution_path__.
__user-level_threads__
__modular_systems__.
__FPGA_configurations__
__context_switch__.
__memory_allocations__
__collateral_evolutions__
__distributed_processes__,
__store-load__
__current_graphics_hardware__
__overflow_and_underflow__
__dynamic_compilation__.
__programming_effort__,
__execution_models__,
__intelligent_backtracking__.
__deadlock_free__,
__code_fragments__,
__cache_lines__,
__functional_parallelism__
__source_lines__
__runtime_verification__,
__dynamic_class_loading__.
__file-level__
__Java_class_files__.
__synthetic_trace__
__user_code__.
__constraint_checks__
__protection_domains__.
__register_optimization__
__task_parallelism__,
__compiler_generates_code__
__synchronization_events__
__information_flow_policies__
__single_threaded__
__unsafe_code__
__memory_regions__.
__concrete_execution__
__program_transformation_techniques__
__tree_traversal__.
__memory_consistency__.
__code_modification__.
__spatial_partitioning__
__write-write__
__concurrency_issues__
__coarser-grained__
__precise_interrupts__
__transaction_atomicity__
__JIT_compilers__
__register_machine__
__Java_bytecodes__.
__user-interactive__
__update_operation__.
__memory_map__
__translated_code__
__processor_allocation__,
__dynamic_branch__
__preemption_threshold__
__recursive_data_structures__,
__multi-threaded_Java_programs__.
__synchronization_constructs__
__memory_structures__,
__trusted_code__
__soft_updates__
__source_programs__,
__partially_dead__
__programmer_specifies__
__running_programs__.
__atomic_execution__
__dynamical_reconfiguration__
__statically_analyzes__
__compilation_techniques__,
__symbol_table__
__access_region__
__array_bounds_checks__
__executing_code__
__synchronous_message-passing__
__control_flow_graph__.
__speculatively_execute__
__loop_fusion__,
__value_prediction__,
__context_sensitive__,
__whole_program__
__low-level_languages__
__incremental_compilation__
__dynamically-generated__
__assembly_language_programs__
__obfuscated_code__
__static_typechecking__
__instruction_sequences__.
__exception_propagation__
__partially_completed__
__lock-free__,
__intra-module__
__kernel_extensions__
__higher_abstraction_level__
__concurrent_data_structure__
__user_space__,
__single-threaded_programs__
__modular_units__
__program_inputs__.
__global_transactions__.
__distributed_hard_real-time_systems__.
__dead_variable__
__Fortran_program__
__Java_object__
__cyclic_structures__
__potential_deadlocks__
__version_numbers__
__processor_groups__.
__data_structure_and_algorithm__
__mathematically_correct__
__MPI_runtime__
__loop_transformations__,
__class_loaders__
__heap_growth__
__dead_code__
__language_level__
__delta_debugging__
__shared_registers__
__handled_automatically__
__provably_correct__,
__modes_of_operation__,
__optimized_programs__
__explicit_synchronization__
__Analysis_techniques__
__concurrent_execution__,
__read_barrier__
__thread_interleavings__.
__Clone_detection__
__similar_code_fragments__
__statically_generated__
__intermediate_representation__,
__pointer_dereferences__
__parallel_threads__,
__assembly_instructions__
__hardware_structures__.
__program_control_flow__
__grant_or_deny__
__eager_evaluation__
__list_structures__.
__untrusted_programs__
__dynamic_translation__
__type_casts__
__statically_typed__,
__queries_efficiently__
__FORTRAN_programs__.
__component_libraries__
__Parallel_execution__
__multiple_interleaved__
__weaker_consistency__
__conformance_testing__,
__large_file__
__optimistic_execution__
__execution_contexts__
__normal_execution__
__explicit_state__
__design_tradeoffs__,
__compiler_writers__.
__assignment_statements__,
__programming_examples__
__call_graph__,
__nested_invocation__
__procedural_languages__,
__adds_additional__
__client_or_server__
__architectural_constraints__,
__binary_executables__
__ill-typed__
__dynamic_reordering__
__logic_analyzer__
__rollback_mechanism__
__storage_mapping__
__busy-waiting__
__Branch_prediction__
__Memory_accesses__
__instruction_formats__
__parallel_machine__,
__load-store__
__heap_management__
__hardware_TM__
__procedural_code__
__symbolic_variables__
__logical_inferences__
__operand_values__
__heap-allocated_data__
__method_dispatch__
__distributed_transaction__
__array_bounds_checking__
__dedicated_processors__.
__compiled_code__,
__dynamic_branch_prediction__
__dynamic_class_loading__,
__locality_optimization__
__memory_access_pattern__
__provably_sound__
__remote_access__.
__bounds_checking__
__recording_and_replaying__
__taint_tracking__
__irregular_programs__
__transactional_memories__
__automatic_recording__
__complex_computations__.
__code_sharing__
__delayed_evaluation__
__efficient_computations__
__pointer-intensive__
__modern_computers__,
__atomic_blocks__,
__crash_recovery__,
__multithreaded_systems__.
__flow_sensitive__
__user-defined_functions__.
__common_subexpression_elimination__,
__error_location__
__automatic_recovery__
__address_trace__
__easily_programmed__
__Worst_Case_Execution_Time__
__hard_tasks__
__composite_operations__
__runtime_checks__.
__existing_compilers__
__injected_code__
__CGI_scripts__
__kernel_threads__
__algorithmic_structure__
__thread_creation__,
__cache_structure__,
__loop_level__
__infrequently_executed__
__thread_scheduling__.
__Provably_correct__
__loop_bounds__,
__explicitly_parallel_programs__.
__compile-time__,
__lock-free_synchronization__
__transactional_memory_systems__
__whole-program_analysis__
__target_architecture__,
__remote_references__
__execution_intervals__
__helper_thread__
__pipelined_parallelism__
__calling_contexts__.
__code.This_paper__
__locking_schemes__
__thread-modular__
__production_code__.
__transactional_execution__
__strength_reduction__,
__error_checking__,
__method_inlining__
__method_lookup__
__directly_executed__
(__and_vice_versa__)
__ground_rules__
__deterministic_behavior__
__shared_data_structures__,
__condition_codes__
__crash_recovery__.
__test_case_execution__
__synchronization-free__
__game_logic__
__static_analyses__,
__related_constraints__
__safety_property__,
__data-handling__
__LR_parsers__
__logically_independent__
__dynamic_memory_allocation__,
__sequential_execution__,
__remote_operations__
__visual_programs__
__Grid_jobs__.
__loop_iterations__,
__bug_detection_tools__
__proof-carrying__
__Source-level__
__checkpoint_files__
__reduction_machine__
__execution_frequencies__
__hand_coding__
__process_creation__,
__lexical_scoping__
__conditional_statements__.
__minor_extensions__
__prefetching_algorithms__,
__synchronization_constructs__.
__application_binaries__
__process_synchronization__.
__finer-grain__
__explicit_parallelism__
__Data_parallelism__
__function_invocation__
__critical_races__
__transaction_executions__
__shared_data_structures__.
__shader_program__
__Object-oriented_programs__
__atomic_blocks__.
__synchronization_points__.
__delay_slots__.
__data_dependence_speculation__
__frequently_executed_code__
__trigger_conditions__
__self-modifying_code__.
__efficient_cache__
__native_code__,
__dynamic_storage__
__test_selection_criteria__
__high_concurrency__,
__data-flow__,
__data-parallel_languages__
__object_code__,
__garbage_collecting__
__message_passing_programs__
__expression_evaluation__.
__escape_analysis__,
__mark_and_sweep__
__data_dependence_test__
__modern_CPUs__
__batch_jobs__.
__product_engineers__
__performed_concurrently__
__barrier_synchronization__,
__fall-back__
__deadlock_analysis__
__update_procedures__
__mode_switch__
__constraint_programs__.
__redundant_code__
__programmer-supplied__
__remote_procedure_call__,
__statically_compiled__
__explicit_message_passing__
__compiler_analyzes__
__threads_executing__
__object_graphs__.
__fault-intolerant_program__
__Software_transactional_memory__
__explicitly_parallel_programs__
__low-level_software__
__residual_programs__
__data-flow_information__
__contract_checking__
__explicit_communication__,
__aspect-oriented_languages__
__code_instrumentation__.
__class_files__.
__executed_correctly__
__low_granularity__
__dead_code_elimination__,
__protection_domains__,
__statically_typed_languages__
__specially_tuned__
__loads_and_stores__,
__newly_allocated__
__code_motion__.
__object_lifetime__
__wait-free_algorithms__
__optimistic_concurrency_control__.
__real-time__)
__heap_operations__
__statically_allocated__
__dynamically_modifiable__
__custom_hardware__,
__repetitive_behavior__
__GPU_kernel__
__Reviews_and_Things_Cryptologic__.
__optimistic_parallelization__
__dataflow_graph__.
__dynamic_memory_allocation__.
__FPGA_hardware__,
__allocation/deallocation__
__production_compilers__
__explicit_memory_management__
__loads_and_stores__.
(__compile-time__)
__speculative_threads__.
__repetitive_processes__
__software_implementations__,
__Prolog_machine__
__branch_predictions__
__work-stealing_scheduler__
__redundancy_elimination__,
__assembly_level__
__machine_language__.
__profile_information__,
__value_speculation__
__actual_execution__
__par-_allel__
__debugging_tools__,
__component_configuration__
__LRU_stack__
__pointer_chains__
__MPI_programs__,
__MPI_libraries__
__consistency_models__.
__interprocedural_analyses__
__sequentially_consistent_memory__
__client_programs__.
__fault_tolerance_schemes__
__induction_variables__.
__inter-procedural_analysis__
__external_interfaces__,
__lock_and_unlock__
__register_allocators__
__stream_queries__
__message_logging__.
__loop-carried__
__worst-case_execution_time_analysis__
__concurrency_primitives__.
__incremental_checkpointing__.
__strength_reduction__.
__fine-grain_and_coarse-grain__
__data-parallel_applications__.
__cache_aware__
__LISP_programs__
__memory_footprints__.
__atomic_register__
__stencil_codes__
__conflicting_transactions__
__irregular_parallelism__
__executed_sequentially__.
__binary_files__
__exception_handlers__.
__universal_constructions__
__generational_collection__
__single-entry__
__compilation_scheme__
__logical_processors__
__considerable_flexibility__
__synchronous_communication__,
__SPMD-style__
__compiler_technology__,
__instrumentation_tool__
__asynchronous_communications__
__read-only_transactions__,
__appli-_cation__
__complex_plans__
__Partial_redundancy_elimination__
__duplicate_code__
__instruction_format__
__nondeterministic_computations__
__automatic_vectorization__
__memory_dependences__
__bug_detection__.
__copy-pasted__
__Application_code__
__wait-free__,
__multi-dimensional_arrays__,
__multi-shot__
__loop_interchange__
__pointer_variables__.
__dynamically_configures__
__dynamic_program_analysis__
__protected_zone__
__device_emulation__
__hard_coded__
__fully_predictable__
__newer_version__
__interrupt_handling__,
__explicit_communication__.
__execute_atomically__
__java_programs__
__atomic_commitment_protocol__
__structural_modifications__
__executed_sequentially__,
__checked_automatically__
__parallel_tasks__,
__demand_paging__.
__language_support__.
__pipeline_delay__
__bug_patterns__.
__uncaught_exceptions__
__instruction_sequences__,
__static_slice__
__database_integrity__
__reverse-mode__
__multiprocessor_implementations__
__Escape_analysis__
__static_type-checking__
__large_objects__,
__data_dependency_graph__
__table_access__
__synchronization_bottlenecks__
__java_applications__
__constant_propagation__.
__object_migration__,
__register_values__.
__dispatching_mechanisms__
__cycle-level__
__data_copying__.
__syntactic_matching__
__auto-increment__
__program_documentation__,
__running_code__
__spin-locks__
__d-DNNF__
__event_flow__
__library_functions__.
__strict_synchronization__
__program's_execution__
__register_assignment__.
__dynamic_allocation__,
__concurrent_program__.
__test_scenario__,
__graph_reduction__,
__execution_control__.
__stress_testing__,
__message_passing_applications__
__potentially_unsafe__
__sev-_eral__
__instruction_level__.
__speculative_thread__
__statically_checked__
__dead_code_elimination__
__language_implementations__.
__load-linked/store-conditional__
__hardware_thread__
__Conference_Organizers__.
__TinyOS_applications__
__GPU_hardware__
__thread_scheduling__,
__imperative_program__
__dependent_instructions__,
__locking_mechanisms__
__XSLT_programs__
__integrity_policy__
__variable_names__,
__MPI/FT__
__binary_programs__.
__shared_libraries__,
__imposes_strict__
__asynchronous_messages__.
__scan_primitives__
__type-safety__.
__memory_access_behavior__
__software-pipelined__
__preemption_points__
__low-level_implementation_details__
__concurrent_programming_languages__.
__parsing_techniques__.
__STM_implementation__
__data_layouts__,
__sequential_languages__
__SML/NJ__
__stack_pointer__
__thread_partitioning__
__storage_structures__,
__pointer_alias_analysis__
__phase_ordering_problem__
__Control-flow__
__gang_scheduling__,
__irregular_programs__.
__Modern_compilers__
__synthesizable_code__
__object_bases__.
__thread_serialization__
__layout_optimizations__
__copy_instructions__
__performance-tuning__
__data_dependency_analysis__
__control_flow_errors__
__name_resolution__,
__binary_encoded__
__inner_loops__.
__Speculative_parallelization__
__abstract_types__,
__integrity_enforcement__
__procedure_invocation__
__instruction_mix__
__data_flow_graph__,
__external_functions__
__sequentially_consistent__.
__dynamic_partial_order_reduction__
__Optimization_strategies__
__execute_atomically__.
__application-independent__,
__test_scenarios__,
__avoids_deadlocks__
__memory_reference__.
__execution_trace__,
__collection_classes__
__Jikes_RVM__.
__cache_manager__
__control_flow_graph__,
__efficiently_executable__
__runtime_monitoring__.
__permutation_instructions__
__handling_failures__
__multithreaded_computations__
__user_customization__
__efficient_code_generation__
__dedicated_processor__
__Refactoring_tools__
__an_automatic_theorem_prover__
__command_sequences__
__trace_sampling__
__data_alignment__,
__split-transaction__
__static_compilation__
__compile-time_optimizations__
__today's_technology__.
__optimizing_compilation__
__program_instrumentation__.
__synchronization_operations__,
__Metric-FF__
__linked-list__
__ordinary_programs__
__interrupt_handlers__.
__CPU_architecture__.
__program_execution_times__
__non-blocking__.
__Data_redundancy__
__structuring_technique__
__speculative_optimizations__
__speculative_optimizations__.
__potential_flaws__
__memory_transactions__.
__loop_structures__.
__array_index__
__JVM_bytecode__
__checkpointing_technique__
__memory_safety__.
__generational_garbage_collector__
__Smalltalk_programs__
__data_dependence_testing__
__cache_block_size__
__interprocedural_dataflow__
__program_instrumentation__,
__boilerplate_code__
__hardware_interrupts__
__duplicate_elimination__,
__purely_sequential__
__Prolog_engine__
__flow-sensitive__,
__correctness_proofs__,
__copying_collector__
__loop_and_data_transformations__
__incremental_construction__
__existing_programs__,
__execution_plans__,
__register_banks__
__memory_layouts__.
__local_scope__.
__data-movement__
__detecting_and_resolving_conflicts__
__bounds_checking__.
__locality_information__
__slicing_criteria__
__pointer_operations__
__pipelined_machines__.
__array_subscript__
__dynamically_instantiated__
__debugging_purposes__.
__code_optimizations__,
__array_access__.
__pointer_based__
__pointer_dereferences__,
__concurrent_applications__,
__optimising_compiler__
__checker_processor__
__name_lookup__
__dispatch_mechanism__
__remove_unnecessary__
__read-after-write__
__meta-objects__.
__affine_partitioning__
__sharing_patterns__.
__ISE_identification__
__operator_training__.
__WCET_estimate__
__instruction_flow__
__run-time_checks__,
__long_running_programs__
__behavior-preserving__
__source_code_transformations__.
__SIMD_parallelism__
__Hardware_based__
__state_space_traversal__
__page_tables__.
__point_of_view__)
__internal_parallelism__
__complex_control_flow__
__runtime_monitoring__,
__mutable_data__
__explicit_deallocation__
__traditional_OS__
__transparent_recovery__
__bug-finding__
__machine_instructions__,
__fully_permutable__
__C-programs__
__stack_allocated__
__parameterized_modules__
__operate_concurrently__
__managed_runtime__
__array_data-flow_analysis__
__long_chain__
__logical_correctness__
__resource_recycling__
__read-modify-write_operations__
__virtual_machine's__
__stack_implementation__
__error-checking__
__translation_table__
__stack_inspection__,
__evolutionary_testing__,
__event_handlers__,
__aggressive_speculation__
__LRU_policy__
__control_speculation__.
__parallelism_feedback__
__memory_safety__,
__destructive_updates__
__exception_mechanism__
__concurrency_abstractions__
__complete_decoupling__
__data-dependence__
__pointer_dereference__
__binary_executables__,
__fault_occurrences__
__execute_concurrently__
__sequence_generator__.
__program_binaries__
__strict_serializability__
__Program_specialization__
__unchecked_exceptions__
__CnC__
__multithreaded_code__
__commit_and_abort__
__conflicting_transactions__.
__reasonably-sized__
__sufficient_parallelism__
__concurrency_controls__
__tail_calls__
__intraprocedural_and_interprocedural__
__intermediate_languages__,
__feasibility_constraints__
__router_configurations__
__physical_layout__.
__user_defined_functions__
__portable_manner__.
__constant_folding__,
__singly-linked__
__automatic_calibration__
__fully_verified__
__user_mode__
__application_program__,
__Modern_programming_languages__
__safety_policy__.
__adjoint_code__
__cache_optimization__
__OpenMP_threads__
__synthesizable_HDL__
__preemption_threshold_scheduling__
__profiling_information__,
__stack_cutting__
__auxiliary_storage__
__execution_flow__,
__resource-management__
__indexed_arrays__.
__higher_level_languages__
__failure_atomicity__
__lazy_functional_languages__
__hardware_counters__.
__high-level_abstractions__,
__function_pointers__.
__reduction_operations__.
__ISA_support__
__memory_pages__.
__dangling_pointer__
__shared_references__
__from-scratch__
__specialized_versions__
__task-level_parallelism__,
__tremendous_flexibility__
__agent_preferences__
__code-improving_transformations__
__silent_stores__
__functionally_equivalent__.
__salient_feature__
__architectural_details__
__exception-flow__
__automatically_parallelizing__
__straight-line_code__
__conventional_compilers__
__branch_correlation__
__independent_instructions__
__profile-directed__
__dynamic_instruction__
__continuation-passing_style__,
__communication_optimizations__.
__serializable_execution__
__demand-driven__,
__memory_instructions__.
__efficient_monitoring__
__decay_techniques__
__cache_sharing__,
__parallel_sorting__.
__larger_circuits__,
__Dynamic_compilation__
__datapath_components__
__inner_loops__,
__code_regions__.
__web_service_calls__
__consistency_management__,
__dangling_pointers__.
__multi-threaded_programs__,
__pipelined_machines__
__explicit_synchronization__,
__bound_checking__
__speculative_instructions__
__correctness_guarantees__
__distributed_arrays__.
__Program_execution__
__binary_executables__.
__Analysis_tools__
__instruction_execution__,
__consistency_constraints__,
__Prolog_code__
__safety_guarantees__,
__Java_multithreading__
__optimistic_concurrency__
__total-order__
__thread_packages__
__code_modifications__.
__smart_play-out__
__state-transfer__
__vector_clocks__.
__efficient_parallelization__.
__user_annotations__,
__fail-stop_failures__
__tree-like_data_structures__.
__data_races_and_deadlocks__.
__unroll-and-jam__
__interrupt_processing__
__divide_and_conquer__,
__event_queue__.
__computation_proceeds__
__atomic_instructions__
__simple_programs__,
__concurrent_accesses__
__finer_grain__
__placement_policies__
__dynamically_allocated_objects__
__processor_registers__
__call-graph__
__template_instantiation__
__manual_effort_required__
__timing_properties__,
__cost-based_optimizer__
__multithreaded_Java_programs__
__retention_latches__
__large_libraries__
__run_unmodified__
__stateful_operators__
__pointer_arithmetic__.
__application_execution__,
__statistics_gathering__
__faults_injected__
__loop_bodies__
__backward_recovery__
__MPI_collective__
__compiled_programs__.
__integrity_monitoring__
__trace_format__
__symbolic_factorization__
__dynamic_dependence__
__atomic_consistency__
__While_retaining__
__pointer_manipulation__
__multithreaded_execution__.
__Program_development__
__nested_parallel__
__atomic_transactions__,
__communication_styles__.
__unit_level__
__double-ended_queues__
__exact_arithmetic__.
__code_duplication__.
__dynamic_instrumentation__,
__applicative_languages__
__previously_written__
__relative_placement__
__dependent_components__.
__safety_checks__
__data_flow_graphs__,
__disk_striping__
__multi-agent_plans__
__data-flow_analysis__.
__strict_two-phase_locking__
__confluently_persistent__
__fully_dynamic__,
__speculative_parallelism__.
__register-renaming__
__compilation_methods__
__target_code__.
__rollback_propagation__
__Cross_domain__
__string_manipulation__
__post-silicon_validation__,
__dynamic_typing__.
__machine_independent__.
__event_orderings__
__shared_memory__)
__highly_optimized_code__
__explicit_synchronization__.
__lock-free_data_structures__
__woven_code__
__terminal_controller__
__list_processing__,
__performance_instrumentation__
__Writing_correct__
__state_graph__,
__memory_explosion__
__RTL_blocks__
__low-level_programming__.
__path_coverage__.
__program_modifications__.
__service_implementations__,
__SIMD_instructions__,
__VLIW_machines__
__predicate_evaluation__
__path-sensitive_analysis__
__stack_management__
__extremely_simple__.
__cyclic_structures__.
__enumeration_procedure__
__access_path_selection__
__address_calculation__.
__composite_object__
__logic_queries__
__Windows_device_drivers__.
__bulk_updates__
__stateful_components__
__proof_generation__
__runtime_exceptions__
__association-rule_mining__
__Supporting_dynamic__
__constraint_checking__.
__PROW__
__concurrent_transaction__
__fixed_dimensionality__
__automatic_memory_management__,
__lazy_functional_programs__
__binary_format__
__communication_layers__,
__optimistic_methods__
__information_redundancy__,
__triangular_decompositions__.
__kernel_code__,
__invocation_mechanism__
__merge_phase__
__Improving_efficiency__
__open-nested_transactions__
__multiple_linked__
__host_machine__
__memory_addresses__.
__garbage_collection_mechanism__
__proof_steps__,
__shared_arrays__
__expert_programmers__.
__scoped-memory__
__calling_sequence__
__shallow_binding__
__disjoint-access__
__machine_independent__,
__high_level_abstraction__
__restructuring_tool__
__synchronisation_primitives__
__familiar_notions__
__address-space__
__incremental_state_saving__
__concurrently_executing_processes__
__counter-examples__,
__kernel_primitives__
__termination_properties__.
__subroutine_calls__
__storage-management__
__array_expressions__
__busy_wait__
__element_level__.
__Automated_test_generation__
__dataflow_machines__.
__synchronization_code__.
__execution_ordering__
__kernel_modifications__.
__backward-compatible__
__fragmented_objects__
__ordinary_programs__.
__directory_tree__
__Coarse_grained__
__pointer_dereferences__.
__user_programs__,
__Web-application__
__maintainable_code__
__thread_scheduler__,
__dataflow_graphs__,
__read_and_write__.
__expressing_concurrency__
__loop_invariant_code_motion__
__executed_code__
__SSA_elimination__
__fixpoint_computation__.
__memory_consistency_model__.
__control_constructs__,
__heap-manipulating__
__relaxed_memory_model__
__graphics_software__.
__summary_information__,
__type_qualifier_inference__
__event_handlers__.
__software_pipelining_technique__
__type_analysis__,
__potential_deadlock__
__pointer_variables__,
__avoiding_redundant__
__register_sets__
__concurrency_controller__
__fault_manager__
__code_coupling__.
__significant_overheads__.
__double_dispatch__
__preprocessor_directives__
__downward_and_upward__
__Dynamic_binding__
__split_or_merge__
__virtual_synchrony__,
__parallel_backtracking__
__legacy_programs__
__alpha-beta_search__
__high-level_models__,
__client-server_communication__
__virtual-machine__
__console_logs__
__completely_automatically__,
__stack-allocated__
__runtime_optimizations__
__register_renaming__.
__partial_redundancies__
__path_profiling__,
__code_transformation__.
__stream_operators__
__speculative_threads__,
__executed_atomically__
__easily_extended__,
__global_data_flow_analysis__.
__Instruction_selection__
__detecting_memory_leaks__
__loop_interchange__,
__low-footprint__
__binary_instrumentation__.
__access_protection__
__loop_iteration__.
__lock/unlock__
__compiler_based__
__lighter-weight__
__B-link_tree__
__array_indices__,
__synchronization_constructs__,
__whitebox_fuzzing__
__atomic_snapshot__
__inter-processor_communication__,
__relaxed_memory_models__,
__threaded_code__
__Java_bytecode_programs__
__compilation_units__
__interrupt_handling__.
__destructive_updating__
__multithreaded_code__.
__dynamic_test_generation__
__Control_dependences__
__procedural_abstraction__.
__customizable_protocols__
__assertion_violations__
__dynamically-allocated__
__array_privatization__
__global_deadlocks__.
__Query_Rewrite__
__global_checkpoint__
__user-defined_aggregates__
__async-finish__
__work_stealing__,
__type_compatibility__
__branch_behavior__
__non-contiguous__,
__rule-based_programs__
__outer_loops__
__dynamic_binary_rewriting__
__source_code_modifications__
__target_language__,
__checkpointing_and_rollback__
__weak_consistency__,
__dataflow_program__
__instruction_fetch__,
__separate_threads__
__algebraic_optimization__
__compiler_parallelization__
__branch_instruction__.
__today's_commodity__
__sequentially_executed__
__compiler_passes__
__virtual_addresses__.
__threaded_programs__
__hot_path__
__low_runtime_overhead__
__ILP_processors__
__delayed_branches__
__first-class_continuations__,
__binary_instrumentation__,
__calls_and_returns__
__parallel_compilers__
__efficient_recovery__
__parallelizing_loops__
__cross-module__
__special_hardware_support__
__automatically_parallelize__
__snooping_protocols__
__control_constructs__.
__multiple_issue__,
__fine_and_coarse_grain__
__clustered_VLIW_processor__
__concurrency_analysis__
__pack_instructions__
__program_clauses__.
__thread_synchronization__.
__architectural_support__.
__Delta_execution__
__multi-threaded_applications__,
__compare-and-swap__.
__applicative_language__
__GPU_kernels__
__dynamic_optimizers__
__compiler_analysis__,
__mutual_exclusion_locks__
__atomic_primitives__
__data_synchronization__.
__list_operations__
__asynchronous_method_calls__
__Algorithmic_skeletons__
__globally_visible__
__process_isolation__
__unified_theory__
__execution_flow__.
__proven_correct__,
__test_plan__,
__shared_file_pointer__
__BSP_programs__
__synchronization_events__.
__memory_snapshot__
__nonuniform_access__
__temporal_partitions__
__scatter_operations__
__file_locking__
__detecting_data_races__
__high-concurrency__
__progress_property__
__sequencing_constraints__,
__shared-data__
__precise_interrupts__.
__validity_checks__
__type-unsafe__
__safely_execute__
__persistent_memory__.
__self-modifying_code__,
__interprocedural_dependence_analysis__
__possibly_nested__,
__software_versions__,
__type_checked__
__shared_memory__;
__tracer_driver__
__data-flow_testing__
__bug_location__
__SPARQL-to-SQL_translation__
__verification_tests__.
__Test_case_prioritization_techniques__
__shared-memory_programs__,
__test_cases__;
__guest_OSes__
__compo-_nents__
__assembly-level__
__heap_locations__
__dynamic_checks__.
__server_software__,
__type-safety__,
__optimized_code__,
__shared_queue__
__SDF_graphs__
__heterogeneous_distributed_computing_environment__.
__addressable_memory__
__conditional_branches__,
__execution_history__.
__basic-block__
__ASP_solvers__
__checkpoint/restore__
__shared_register__
__loop_parallelism__.
__sound_analysis__
__Register_renaming__
__prohibitively_difficult__
__query_optimization_techniques__,
__partial_redundancy_elimination__,
__code_updates__,
__control_speculation__,
__Search_space__
__lazy_updates__
__Java_compilers__
__type_safe__.
__thousand_lines_of_code__
__timing_annotations__
__garbage_collection_algorithms__.
__advanced_optimizations__
__stack_usage__
__Garbage_collectors__
__object_allocation__,
__multimedia_extension__
__MARUTI__
__stimuli_generation__
__hash_joins__.
__executable_programs__,
(__ad_hoc__
__thread-safe__,
__Mobile_programs__
__larger_programs__,
__multiple_instructions__.
__data_cache_prefetching__
__sporadic_server__
__multi-level_recovery__
__software_simulators__,
__fault-tolerance_mechanisms__.
__locking_policy__
__kernel_modifications__
__system's_configuration__
__bottom-up_parser__
__visibility_computation__,
__statement_level__.
__resource_balancing__
__edge_server__
__register_cache__
__dynamic_allocation__.
__generating_extensions__
__numerical_programs__,
__heap_storage__
__communication_routines__
__Java_threads__,
__fault_handler__
__field-sensitive__
__RSA_signatures__
__OpenMP_constructs__
__maximizing_parallelism__
__dynamic_analyses__.
__Test_suites__
__bit_patterns__.
__failure_reporting__
__compiler_generated_code__
__runs_faster__,
__scalar_variables__.
__language_implementation__,
__runtime_exceptions__.
__dynamically-loaded__
__array-processing__
__function_inlining__,
__garbage-collection__
__transposed_file__
__fetch-and-add__
__shared_memory_programming_paradigm__
__concurrent_data_structures__,
__tiled_loops__
__memory_access_instructions__
__explicit_message_passing__.
__deadlock_prevention__,
__Dynamic_branch_prediction__
__maximize_parallelism__
__heterogeneous_registers__
__logical_partitioning__
__HW/SW_partitioning__,
__synchronous_semantics__
__correctness_condition__
__executed_concurrently__,
__pattern-matching_techniques__
__pointer_values__
__modern_compilers__.
__wait-freedom__
__release_consistency__,
quasi-__concurrent_processes__
__interactive_proofs__.
__pre-execution__,
__XPath_query_evaluation__
__JIT_compilers__.
__constraint_specifications__
__tail-recursion__
__speculative_evaluation__
__RISC_machines__
__goto_statements__
__Java_bytecodes__,
__instruction_criticality__
__massively_parallel_computations__
__dependence_testing__,
__control_flow_paths__.
__object_inlining__,
__dependence_cycles__
__address-generation__
__Optimistic_synchronization__
__data_distribution_directives__
__sub-word_parallelism__.
__update_policy__,
__intermediate_program_representation__
__page_protection__
__computation_trees__,
__interprocedural_analysis__,
__precedence_rules__,
__list_processor__
__execute_concurrently__.
__concurrency_control_mechanisms__,
__Data_dependence_analysis__
__NFS_protocol__
__compiler_transformation__
__unoptimized_code__
__regular_section__
__SQL_Anywhere__
__safety_violations__.
__history_buffer__
__Whole-program__
__Java_environment__,
__reference_trace__
__dependency_constraints__,
__synchronization_protocols__,
__privileged_operations__
__packers__,
__device_access__
__relaxed_memory_consistency_model__
__greatly_simplified__,
__dataflow_process_networks__.
__Run-time_monitoring__
__path-sensitive__,
__stack_machine__
__pessimistic_concurrency_control__
__computed_incrementally__
__code_scheduling__.
__rotating_registers__
__instruction_reordering__
__A_hybrid__,
__MapReduce_jobs__
__reconfigurable_accelerators__
__failure_conditions__,
__program_restructuring__,
__execution_order__,
__cumbersome_and_error-prone__
__array_layout__
__machine_dependent__
__state_updates__,
__warm-up_period__
__Test_procedures__
__VLIW_machines__.
__SAMR_applications__.
__control_key__
__sequential_memory__
__OS_functionality__
__repair_actions__,
__low-level__.
__pre-computation__,
__locking_protocols__,
__array_computations__.
__Linux_scheduler__
__dynamic_instruction_stream__
__copy_operations__,
__interrupt_service__
__explicit/implicit__
__dynamic_page_migration__
__ML_modules__
__kernel_malware__
__dynamic_translation__.
__bytecode_level__
__fully_programmable__.
__instruction_generation__,
__portable_parallel_programs__
__Parallelizing_compilers__
__reuse_mechanisms__
__iterative_refinement__,
__concurrent_writes__
__VLIW_code__.
__control_dependences__,
__dynamic_predication__
__task_synchronization__.
__user-level_threads__,
__type_inferencing__
__regression_test_selection__.
__Perfect_hashing__
__lustre__.
__observationally_equivalent__.
__low-level_software__.
__number-crunching__
__Commutativity_analysis__
__rule_processing__.
__type_inclusion__
__EPIC_architecture__
__ABA_problem__
__threaded_applications__
__Taser__
__program_compilation__.
__failure_masking__
__library_functions__,
__object_oriented_language__
__hierarchical_memory__.
__file_caching__,
__fairness_assumptions__.
__unit-test__
__detect_obfuscated__
__standard_web_browsers__
__function_evaluation__,
__memory_protection__,
__cache_structure__.
__optimistic_concurrency__,
__synchronization_schemes__,
__race_freedom__,
__bytecode_program__
__language_based__
__barrier_synchronizations__
__local_computations__.
__irregular_computations__,
__Incremental_compilation__
__related_faults__.
__pack/unpack__
__order_violations__
__semaphore-based__
__program_sections__
__redundant_array__
__inherent_non-determinism__
__implicit_communication__,
__transaction_boundaries__
__CORBA_applications__,
__Dynamic_allocation__
__control-flow_paths__
__object_ownership__
__obfuscation_techniques__,
__control_transfers__.
__control-path__
__concurrent_transaction_processing__
data-__dependent_tasks__
__native_machine_code__
__MapReduce_programs__.
__constraint_checking__,
__worst_case_response_time_analysis__
__portable_code__
__loose_synchronization__
__cooperating_processes__.
__lock-free_objects__
__BPEL_specification__
__mutable_state__,
__stub_code__
__write_buffering__
__conditional_execution__.
__error_reporting__.
__Eliminating_redundant__
__behavior_preservation__
__concurrency_controllers__
__direct-mapped__,
__generational_garbage_collection__.
__static_type_analysis__
__file_descriptor__
__hardware_designer__
__conditional_compilation__.
__latch-coupling__
__transactional_guarantees__.
__macro_steps__
__imperfectly-nested__
__data_parallel__,
__independent_progress__
__redundant_synchronization__
__conservative_garbage_collector__
__register_promotion__,
__stress-testing__
__serial_execution__.
__runtime_monitors__
__lock-freedom__.
__copying_collectors__
__target_code__,
__guarded_execution__
__language_support__,
__SAT_engine__
__concurrent_Java_programs__,
__trusted_environment__
__mark-sweep__,
__traversal_strategies__
__scalar_products__.
__memory_reuse__,
__coarser-grain__
__security_labels__.
__correctly_translated__
__data_parallel_language__
__type_enforcement__
__dead_code__,
__instruction_level__,
__single_entry_point__
__discrete_event_simulators__
__coherency_protocol__
__library_calls__.
__TPC_benchmarks__
__relaxed_memory__
__shared_regions__
__independent_parallel_tasks__.
__dataflow_programs__,
__pointer_references__
__scalar_variables__,
__Java_interpreter__
__message_sends__
__multi-versioned__
__linked_structures__.
__causality-based__
__client_program__
__global_transaction_manager__
__Flow_analysis__
__process_synchronization__,
__periodic_task__.
__safety_violations__
__record-and-replay__
__I/O__;
__hardware_structure__,
__decompression_engine__
__statistical_profiling__
__exception_handlers__,
__task-level_parallelism__.
__global_register_allocation__,
__code_verification__
__interprocedural_data_flow_analysis__.
__freedom_from_deadlock__
__dynamically_allocated_memory__
__cache_coherency_protocols__
__read-only__.
__synchronization_barriers__
__cache_groups__
__input-data__
__reachability_testing__,
__multiple_traversals__
__code_modification__,
__scalar_optimizations__
__increased_concurrency__.
__Model_checking__,
__physical_mapping__.
__extraction_rules__,
__subroutine_calls__.
__intermediate_code__,
__correct_programs__.
__busy_waiting__,
__dependent_operations__
__enforcing_strict__
__generic_Java__.
__excessive_storage__
__callback_functions__
__data-race-free__
__hash_tree__.
__break-points__
__Dynamic_policy__
__goes_wrong__
__efficient_recovery__.
__binary_translation__,
__structural_VHDL__
__security_checks__,
__path_feasibility__
__preserves_privacy__.
__security_tokens__.
__hand_crafting__
__correctness_guarantees__.
__thread_management__,
__write_barriers__.
__basic_block_level__
__nested_parallelism__,
__hierarchical_descriptions__
__request_processing__.
__data_dependency_analysis__,
__speculative_parallelism__
__event_ordering__,
__human_designers__,
__structure_oriented__
__write_barriers__,
__module_boundaries__
__Data_dependences__
__recursion_elimination__
__frequently_executed__.
__EPIC_architectures__
__exploit_instruction-level_parallelism__
__parameter_dependencies__
__release_consistency__.
__polymorphic_languages__
__Existing_compilers__
__existing_compilers__.
__native_mode__
__Architectural_features__
__wait-freedom__,
__serial_code__.
__loop_parallelization__,
__optimal_code__.
__cycle_level__
__translation_buffer__
__distribution_schemes__,
__static_program_slicing__
__Instruction-level_parallelism__
__pipeline_execution__
__garbage_collection_algorithm__.
__state_recovery__
__free_running__
__thread_spawning__
__shared_memory_accesses__.
__mixed-level_simulation__
__self-adjusting_computation__,
__virtual_function_calls__,
__loop_optimizations__,
__derivative_evaluation__
__abstract_representation__,
__consecutive_iterations__
__large_data_bases__.
__transaction_boundaries__.
__parallel_loop__.
__change_identification__.
__stan-_dard__
__strict_functional_languages__
__guest_operating_systems__,
__bounded_model-checking__
__mode-change__
__atomic_read/write_registers__
__symbolic_traces__
__Interprocedural_analysis__
__input/output_operations__.
__display_unit__
__rewrite_techniques__
__operating_system_services__,
__perfect_load-balancing__
__rule-matching__
__passing_messages__.
__correctness_requirements__.
__locality_exploitation__
__correct_rounding__.
__Concurrent_processes__
__guest_VMs__
__edge_profiling__,
__instruction_formats__,
__Time-To-Live__
__lightweight_threads__.
__Harrier__
__Rx__,
__processor_affinity__
__Verilog_descriptions__
__multiprogramming_environment__
__syntax_tree__.
__cache_controller__,
__semantic_correspondence__
__sparse_computations__.
__memory_fences__.
__gang-scheduling__,
__fine-grained_locking__.
__expected_outputs__,
__FORTRAN_code__
__shared_memory_and_message_passing__.
__floating-point_hardware__
__direct_replacement__
__write_allocate__
__Multiple_processors__
__software_model_checkers__.
__sequential_equivalence__
__coding_conflicts__
__achieves_high_throughput__.
__liveness_analysis__,
__worst_case_timing__
__Microcode_compaction__
__force_calculation__.
__pointer-based_data_structures__,
__Real-Time_systems__
__target_machine__.
__dynamic_memory_disambiguation__
__shared_memory_parallel_programs__
__code_specialization__,
__hard_real-time_tasks__,
__multiple_stacks__
__speculative_multithreading__,
__task-graphs__
__prefetching_thread__
__compiler_verification__
__XML_based__,
bytecode-to-__C_AOTC__
__memory_management_units__
__phase_boundaries__
__Java_class_files__,
__object_placement__.
__Mixed_mode__
__replay_mechanism__
__memory_pages__,
__Matlab_code__.
__faulty_code__.
__java_virtual_machines__.
__obstruction-freedom__.
(__I/O__
__Memory_models__
__type-checked__.
__Jalape&ntilde__;o
__L2_miss__,
__type_dispatch__
__code_tangling__
__extremely_scalable__
__control-flow_analysis__,
__sprocket__
__dynamic_thread_creation__
__API_libraries__.
__HOMs__
__input_sets__,
__weak_atomicity__
__increase_programmer_productivity__
__renaming_scheme__
__dynamic_analyses__,
__future_architectures__.
__Unix_utilities__
__synchronous_message_passing__.
__vulnerability-driven__
__source_program__,
__compiling_programs__
__GCC_compiler__
__hot_code__
__granularity_level__.
__Interprocess_communications__
__sequential_Java_programs__
__Purely_functional__
__tree_traversal__,
on-__stack_replacement__
__program's_runtime__
__Buffer_sharing__
__register_promotion__
__fine-grain_locking__
__SPMD_programs__
__interrupt_handlers__,
__SSA-form__
__loop_constructs__,
__calling_context_tree__
__reusable_programs__
__static_cache_simulation__
__sub-word_parallelism__
security-__sensitive_data__
__dominator_tree__
__Fortran_code__.
__virtual_caches__
__AOU__
__trace-driven_simulator__
__flow_measurement__,
__adaptive_replication__,
__type_checked__,
__header_files__.
__instrumented_programs__
__memory_coherence__.
__checkpointing_and_restart__
__unreachable_code__
__loose_consistency__
__MIMD_machines__,
__saved_state__
__runtime_code_generation__
__serializable_transactions__
__handling_mechanism__.
__purely_functional_language__
__parallel_activities__.
__partially_ordered_events__
__checking_mechanism__.
__Component-level__
__stack_frames__,
__list_scheduler__.
__hot_swap__
__DSM_protocols__
__coin-flip__
__inlining_decisions__
__referential_transparency__
__heap_data_structures__
__exploit_parallelism__,
__shared-memory_parallel_programs__
__modular_programs__.
__physical_clocks__
__reachability_analyses__
__inter-task_communication__,
__device_access__,
__explicit-state_model_checking__.
__validity_checker__
__coherence_actions__
__language_translators__
__Dominance_relations__
__protocol_execution__,
__parametric_timing_analysis__
__data_races_and_deadlocks__
__unbounded_priority_inversion__
__minor_modification__
__sparse_matrix_techniques__
__irregular_loops__
__execution_profiles__,
__high-level_language__,
__dual_priority_scheduling__
__program_optimizations__,
__deterministic_finite-state_machines__.
__array_dataflow_analysis__
__assertion_checker__
__program_points__,
__software_controlled_cache__
__intermediate_program_representation__,
__Voting_protocols__
__mutation_adequacy__.
__assertion_checkers__
__abstract_specification__,
__functional-style__
__page_buffer__
__functionally_equivalent__,
__control_programs__,
__DMA_transfers__,
__hyperblock_formation__,
__dynamic_feedback__,
__Continuous_optimization__
__lightweight_verification__
__incremental_execution__.
__arithmetic/logic__
__state_graphs__,
__access_anomalies__
__low-level_code__.
__transaction_failures__
__transactional_programming__
__programmable_shading__
__pre-processing_step__.
__cache_coherence_protocols__,
__Programming_errors__
__iterative_stencil__
__shared_counters__,
__database-access__
__multi-writer__,
__remote_execution__,
__improves_efficiency__.
__optimizing_and_parallelizing_compilers__
__Partial_replication__
__handled_automatically__.
__dining_philosophers__,
__coherency_protocols__
__publish/subscribe_applications__
__problem_solution__,
__SQL_Injection_vulnerabilities__
__maximum_performance__,
__prefetching_scheme__,
__stringent_timing_requirements__.
__remote_files__,
__critical_regions__.
__remote_method_invocations__.
__large_arrays__,
__optimization_opportunities__,
__Language-based_security__
__optimistic_assumptions__
__binding_time_analysis__
__warehouse_maintenance__
__shared_locks__
__data_speculation__,
__hard-to-detect_faults__.
__memory_bottlenecks__
__automatically_generated_code__.
__destructive_updates__.
__single_address_space__
__SIMD_operations__,
__multitasking_systems__
__declustering_methods__,
__program_algebra__.
__scratchpad_memory__,
__gated_clocks__
__common_sub-expression_elimination__
__library_code__.
__parallelizing_transformations__.
__concurrency_control_protocols__,
__safety_violation__
__insertion_method__.
__COMNET_III__
__production_stages__
__module_cohesion__
__profiling_tools__,
__type-checker__
__Erlang_code__
__security_enforcement__,
__array_privatization__,
__storing_data__,
__file-systems__
__data-independent__,
__Java_byte_code__.
__process_groups__,
__open-nested_transaction__
__race-detection__
__transient_recovery__
data-__centric_transformations__
__concurrent_bugs__.
__array_data-flow_analysis__,
__read-write_locks__.
__partitioned_scheduling__
__completeness_guarantees__
__scheduled_tasks__.
__CORBA_servers__
__uniform_reliable_broadcast__
__dynamically_linked_libraries__,
__synchronous_circuits__,
__program_translation__.
__demand-paged__
__bounded_inconsistency__
__regular_computations__
__assembler_code__
__free_of_charge__,
__multiple_exits__.
__dynamically-linked__
__register_spills__
__calling_conventions__,
__query/response__
__code_blocks__,
__garbage_collections__.
__node_level__.
__a_HA__
__syntactic_error_recovery__
__macro_instructions__
__compilation_flow__.
__embedded_application__,
__source_code_modification__.
__infinite_state_model_checking__
__binary_format__.
__efficient_compilation__
__flow-sensitivity__
__base_code__,
__concurrency-control__
__program's_source_code__.
__mobile_agent_execution__
__automated_consistency_checking__
__Redundant_computation__
__digital_signing__
__shared_accesses__.
__shared_accesses__
__control-flow_integrity__
__control-flow_graph__.
__statically-linked__
__distributed_debugging__,
__information_flow_analysis__.
__conflicts_occur__.
__SIMD-style__
__code-generator__
__Additional_improvements__
__MPI_calls__.
__time_consuming__;
__virtual_copies__
Y&thinsp;__&Delta__;&thinsp;Y
__MP_systems__
__multithreaded_systems__
__calling_conventions__
__periodicity_constraints__.
__reservation_stations__.
__backward_reachability_analysis__.
__read-write_registers__
__flow_insensitive__
__pipeline_fashion__.
__compacting_garbage_collection__
__machine_models__,
__compile-time_analysis__.
__device-driver__
__state_space_reductions__
__block-cyclic_distributions__
__multi-threaded_Java_programs__
__assertion_violations__.
__client_programs__,
__page_migration__.
__locality_enhancement__
__simulation_federates__
__task_scheduler__,
__runtime_stack__.
__extendible_array__
__collision_resolution_algorithms__
__memory_copy__
__parallel_executions__.
__information_release_policies__.
__pattern_matches__.
__Java_class__.
__function-shipping__
__desktop_grid_environment__
__SPMD_programs__.
__queue_operations__
__high-level_specifications__,
__granularity_control__
__reconfigurable_accelerators__.
__encoding_transformations__
__microarchitectural_support__
__runtime_reconfiguration__.
__task_and_data_parallelism__,
__multithreaded_execution__,
__synchronization_points__,
__legacy_program__
__multiple_contexts__,
__small_modifications__,
__program_loops__
__stack_machines__.
__prefetch_instructions__.
__eager_evaluation__.
__Floating-point_arithmetic__
__synchrony_hypothesis__
__multiple_clocks__.
__speculative_thread-level_parallelism__
__cache_hierarchies__,
__complex_control-flow__
__branch_execution__
__speculation_control__
__inter-agent_communication__,
__page_cache__
__asynchronous_execution__.
__global-view__
__tensor_contraction__
__heap_objects__,
__persistent_heap__.
__loop_distribution__,
__run-time_checking__.
__MPI_datatypes__
__loop-invariant__
__copy_propagation__
__SPMD_execution__
__cache-aware_scheduling__
__interrupt_processing__,
__tagged_memory__
__load/store_instructions__.
__condition_codes__.
__deep_pipelines__,
__standard_libraries__,
fixed-__sized_blocks__
__compensating_transactions__
__hardware_structures__,
__sending_and_receiving_messages__,
__binary_rewriting__.
__static_scoping__
