__high-level__
__a_unified__
__model-based__
__object-oriented__
__rule-based__
__paper_presents__
__high_level__
__an_object-oriented__
__real-time_systems__.
__source_code__.
__code_generation__
__object-based__
__event-based__
__automatically_generates__
__test_cases__.
__constraint-based__
__process_model__
__multi-agent_systems__.
__test_case__
__modeling_approach__
__automatically_generate__
__specification_language__
__design_approach__
__builds_upon__
__automatically_generating__
__OWL-S__
__aspect-oriented__
__exception_handling__
__hybrid_systems__.
__formal_specifications__
__modeling_language__
__UML_models__
__object_model__
__use_case__
__centered_around__
__domain-independent__
__fully_automated__
__simulation_models__.
__design_patterns__.
__performance_models__
__design_pattern__
__model_transformations__
__the_Unified_Modeling_Language__
__model-driven__
__UML_diagrams__
__High-level__
__modeling_framework__
__scenario-based__
__communication_protocols__.
__concurrent_systems__.
__goal-oriented__
__meta-model__
__approach_combines__
__UML_2.0__
__model_transformation__
__formal_models__
__reference_model__
__analysis_tool__
__conceptual_model__
__requirements_specification__
__description_language__
__reactive_systems__
__model_construction__
__component_model__
__an_XML-based__
__modeling_technique__
__WS-BPEL__
__reactive_systems__.
__state_machine__
__control_structure__
__language-independent__
__data_model__.
__visual_languages__
__software_architectures__.
__semi-automated__
__Unified_Modeling_Language__
__use_cases__.
__paper_introduces__
__design_models__
__computer_programs__.
__formal_specification__
__relies_upon__
__agent-oriented__
__step-by-step__
__object_oriented__
__TTCN-3__
__consistency_checking__
__code_generation__.
__feature_models__
__object-oriented_programming__.
__class_diagrams__
__model_transformations__.
__simulation_environment__.
__access_control_policies__.
__formal_analysis__
__knowledge-based_systems__.
__sequence_diagrams__
__task_models__
__UML-based__
__analysis_tools__.
__building_blocks__,
__visual_language__
__UML_models__.
__schedulability_analysis__
__greatly_simplifies__
__interaction_protocols__
__modelling_approach__
__modeling_methodology__
__distributed_algorithms__.
__markup_language__
__process_model__.
__requirements_specifications__
__modeling_tool__
__inference_engine__
__step_by_step__
__UML_class_diagrams__
__An_object-oriented__
__modelling_language__
__software_models__
__distributed_real-time_systems__.
__dependency_analysis__
__business_process_models__
__performance_model__
__domain_models__
__modeler__
__formal_specifications__.
__language_independent__
__formal_framework__
__semantic_model__
__formal_model__
__UML_diagrams__.
__object-oriented_programs__.
__test_case_generation__
__modeling_language__.
__Event-B__
__high-level__,
__AI_planning__
__reusable_components__.
__model_checking_techniques__
__VHDL-AMS__
__business_rules__.
__state_machines__.
__analysis_framework__
__language-based__
__model_generation__
__task_model__
__component-based_systems__.
__architectural_models__
__modeling_environment__
__code_generation__,
__modeling_process__
__design_environment__.
__web_service_composition__
__formally_specified__
__visual_programming__
__grammar-based__
__XML_Schema__.
__object-oriented_systems__.
__abstraction_level__
__modeling_techniques__.
__distributed_programs__.
__performance_models__.
__specification_language__,
__mutation_testing__
__component_composition__
__design_framework__
__re-usable__
__CASE_tool__
__code_generators__
__test_scenarios__
__function-based__
__discrete-event__
__formal_method__
__domain_model__
__requirement_specifications__
__program_synthesis__
__analysis_tool__.
__conformance_testing__
__goal-driven__
__An_extensible__
__attack_scenarios__
__information_model__
__specification_language__.
__plan_execution__
__behavior_models__
__an_object_oriented__
__workflow_models__
__test_execution__
__Program_slicing__
__automatically_generated__.
__concurrent_programming__.
__functional_requirements__.
__WS-CDL__
__enables_developers__
__semi-formal__
__definition_language__
__activity_diagrams__
__quality_model__
__UML_model__
__modeling_constructs__
__model_transformation__.
__test_data_generation__
__generic_programming__
__program_development__.
__graph_algorithms__.
__model-based_diagnosis__
__feature_model__
__language_called__
__prototype_tool__
__control_model__
__conceptual_schema__
__workflow_model__
__UML-RT__
__meta-models__
__reference_model__.
__Test_cases__
__verification_tools__.
__verification_tool__
__protocol_specifications__
__model_checker__.
__component_based__
__use_case__.
__object-oriented_concepts__
__sequence_diagrams__.
__business_process_models__.
__execution_traces__.
__Coloured_Petri_Nets__
__construction_process__
__behavioral_model__
__discrete-event_simulation__.
__runtime_monitoring__
__reasoning_engine__
__feature_models__.
__runtime_verification__
__formal_modeling__
__conceptual_model__.
__analysis_methodology__
__state_diagrams__
__testing_strategy__
__visual_languages__.
__protocol_analysis__
__UML_class_diagrams__.
__XML_schema__.
__abstraction_techniques__
__use-cases__
__Java_bytecode__.
__a_model-based_approach__
__graphical_representation__
__OWL-S__.
__refinement_process__
__formally_verified__
__object_model__.
__description_language__.
__program_code__.
__testing_methodology__
__functional_specifications__
__class_diagram__
__great_flexibility__
__an_object-oriented_language__
__plan_generation__
__automatically_creates__
__an_agent-oriented__
__object_models__.
__completely_automated__
__greatly_facilitates__
__Modelica__
__verification_process__
__executable_models__
__process_model__,
__legacy_code__.
__architectural_models__.
__analysis_methods__.
__object-oriented_databases__.
__Object-Z__.
__design_method__.
__level_of_abstraction__.
__modeling_language__,
__modeling_tools__.
__policy_specification__
__meta-model__,
__aspect-oriented_programming__.
__Petri_net-based__
__mapping_approach__
__abstraction_levels__.
__query_optimizer__
__modeling_tool__.
__reactive_systems__,
__coverage_metrics__
__modelling_framework__
__test_oracles__
__verification_technique__
__modular_design__
__requirements_specifications__.
__automatically_constructs__
__step-wise__
__generated_automatically__.
__executable_specifications__
__white-box__
__interface_specifications__
__rule-based_systems__.
__design_models__.
__branch_coverage__
__object_based__
__modeling_approach__,
__feature_modeling__
__specification-based__
__model_driven__
__behavior_model__
__program_generation__
__interaction_protocols__.
__software_specifications__
__WS-BPEL__.
__domain-oriented__
__functional_coverage__
__functional_models__
__software_model_checking__
__behavioral_models__.
__visual_models__
__description_language__,
__goal-based__
__automatic_verification__
__design_concept__
__generation_process__.
__automatically_deriving__
__UML_sequence_diagrams__
__control_structure__.
__reasoning_mechanism__
__component_model__.
__executable_code__.
__attack_graph__
__object-oriented_modeling__
__modeling_concepts__
__fault-tolerant_systems__.
__formally_verifying__
__Colored_Petri_Nets__
__an_object-oriented_database__
__formally_verify__
__BPEL_processes__
__extends_traditional__
__formal_specification__.
__domain-specific_language__
__modeling_paradigm__
__production_rules__.
__interface_specification__
__fault_trees__
__requirement_specification__
__specification_languages__.
__goal_models__
__programming_technique__
__code_mobility__
__visual_modeling__
__domain-specific_languages__.
__task_models__.
__software_specification__
__description_languages__
__main_feature__
__service_orchestration__
__property-based__
__architecture_description_language__
__object-oriented_database__
__protocol_specification__
__source_code_analysis__
__implementation_techniques__.
__DAML-S__
__automatically_produces__
__probabilistic_model_checking__
__behavioral_descriptions__
__article_proposes__
__knowledge_model__
__design_tool__.
__UML_profile__
__design_language__
__computational_framework__
__software_programs__.
__class_diagrams__.
__coverage_criteria__.
__development_method__
__ASTRAL__
__inter-component__
__verification_techniques__.
__transformation_language__
__model_composition__
__implementation_strategy__
__generic_models__
__representation_model__
__programming_approach__
__meta-model__.
__helps_designers__
__reactive_behavior__
__transformation_process__
__test_scenarios__.
__modeling_framework__,
__conceptual_framework__.
__event_models__
__rule-based_reasoning__
__simulation_framework__.
__contract-based__
__levels_of_abstraction__.
__transformation_steps__
__timed_systems__.
__modelling_technique__
__workflow_modeling__
__UML/OCL__
__distributed_software_systems__.
__consistency_checking__.
__BDI_agent__
__modeling_languages__.
__inference_engine__.
__schedulability_analysis__.
__fault_tree__
__workflow_patterns__
__generic_model__
__verification_methodology__
__cognitive_model__
__component_framework__
__support_environment__
__asynchronous_communication__.
__generic_framework__
__analysis_framework__.
__formal_models__.
__object_model__,
__test_models__
__HTN_planning__
__test_case_generation__.
__architectural_constraints__
__behavior_modeling__
__automatically_derives__
__modeling_framework__.
__rule_engine__
__Ptolemy_II__
__specifically_tailored__
__software_verification__.
__active_databases__
__vulnerability_analysis__
__reverse_engineered__
__distributed_protocols__.
__component_systems__.
__modeling_tool__,
__formal_approach__
__reference_models__.
__behavioral_specification__
__automatic_analysis__
__analysis_tool__,
__automatically_synthesized__
__graphical_modeling__
__variation_points__
__test_specifications__
__change_impact_analysis__
__a_model-driven_approach__
__web_service_compositions__
__basic_building_blocks__
__design_recovery__
__Use_Case_Maps__
__design_pattern__.
__synchronous_dataflow__
__structural_coverage__
__block_diagram__
__mutation_testing__.
__dynamic_adaptation__.
__pattern_language__
__accepts_as_input__
__product_model__
__code_optimization__.
__distributed_programming__.
__model_checking_techniques__.
__dynamic_updating__
__compositional_reasoning__
__aspect_weaving__
__automatically_produce__
__conflict_analysis__
__verification_results__
__service_specifications__
__behavioral_specifications__
__model_transformations__,
__component_model__,
__BPEL_process__
__rule_language__
__knowledge_modeling__
__rule-based__,
__meta-modeling__
__knowledge_modelling__
__test_requirements__
__security_specifications__
__based_framework__
__UML_profiles__
__PRISM__.
__operational_requirements__
__protocol_verification__
__an_extendable__
__component_interfaces__
__programming_techniques__.
__integrated_framework__
__exception-handling__
__meta_model__
__Formal_specification__
__formal_modelling__
__program_construction__
__metadata_model__
__composite_event__
__component_assembly__
__testing_tool__
__tool_chain__
__OWL-S__,
__self-adaptation__.
__abstraction_level__.
__modeling_notations__
__primary_contribution__
__domain_models__.
__design_framework__.
__adaptation_policies__
__performance_models__,
__correct-by-construction__
__test_case_selection__
__platform_specific__
__separation_of_concerns__.
__Java_classes__.
__specification-based_testing__
__interacting_components__.
__hardware_and_software_components__.
__process_definitions__
__constraint_based__
__reusable_software_components__.
__language_definition__
__formally_specifying__
__business_rule__
__operational_models__
__safety_requirements__.
__design_environments__.
__sequence_diagram__
__design_pattern__,
__hardware_description__
__program_synthesis__.
__program_source_code__.
__clinical_guidelines__.
__control_programs__
__aspect_mining__
__control_structure__,
__aspect-oriented_programs__.
__web_service_compositions__.
__automatic_programming__
__API_usage__
__tedious_and_error-prone__.
__literate_programming__
__incremental_development__
__abstraction_technique__
__software_specifications__.
__an_object-oriented_approach__
__UML_diagrams__,
__OO_design__
__component_models__.
(__Unified_Modeling_Language__)
__abstraction_refinement__
__cognitive_agent__
__real-time_distributed_systems__.
__Symbolic_execution__
__Generalized_Stochastic_Petri_Nets__
__architecture_description__
__formal_description__
__test_purposes__
__component_behavior__
__active_rule__
__reference_model__,
__reasoning_process__.
__ontology_development__.
__behaviour_models__
__verification_strategy__
__component_library__
__automatic_generation__
__modelling_tool__
__automatically_inferring__
__requirements_models__
__agent_architecture__.
__evaluation_techniques__.
__software_tool__.
__modular_approach__
__component_architecture__
__automatically_computes__
__performance_model__.
__an_object-oriented_language__.
__service_specification__
__environment_supporting__
__hardware_systems__.
__formal_specifications__,
__active_objects__.
__high-level_specifications__
__hypermedia_applications__.
__compliance_checking__
__interaction_scenarios__
__step_by_step__,
__black-box_testing__
__use_case__,
__workflow_processes__.
__AspectJ_programs__.
__process_networks__.
__workload_model__
__property_verification__
__development_methodology__.
__highly_reusable__
__UML_activity_diagrams__
__extension_mechanisms__
__imperative_languages__.
__architectural_styles__.
__passive_testing__
__Cell-DEVS__
__authorization_policies__.
__multiple_languages__.
__modeling_process__.
__UML_models__,
__communications_protocols__
__composition_mechanisms__
__Petri_net_based__
__modeling_technique__.
__dynamic_domains__.
__test_case_generation__,
__automatic_code_generation__.
__component-based_software__.
__web_services_composition__
__UML_class_diagram__
__automatic_code_generation__
__test_specification__
__model_transformation__,
__function_block__
__an_executable_specification__
__communicating_systems__
__test-case__
__domain_modeling__
__workflow_models__.
__design-level__
__automatically_builds__
__template_based__
__dimensional_analysis__
__component_interaction__
__DEVS_models__
__protocol_conversion__
__class_hierarchies__.
__communicating_systems__.
__automatic_translation__
__functional_model__
__automatically_translate__
__automatically_synthesizing__
__program_structure__.
__high-level_models__
__reusing_existing__
__graphical_notations__
__semi-automatically__.
__component_reuse__.
__modelling_language__.
__modeler__.
__biological_models__.
__abstraction_layers__
__programming_paradigms__.
__functional_specification__
__component_interactions__
__fully_automated__.
__commonsense_reasoning__.
__non-functional_properties__.
__DEVS-based__
__modeling_complex__
__model_checking_tools__
__state_machine__.
__Java_PathFinder__
__ORA-SS__
__modular_verification__
__meta-models__.
__generic_programming__.
__structuring_mechanisms__
__coding_style__
__dependability_analysis__
__procedural_languages__.
__assertion_checking__
__generic_components__
__supporting_tool__
__bottom_up__
__problem-solving_methods__
__relation-based__
__tightly_integrates__
__design_specifications__.
__Petri_net_models__
__simulation_framework__,
__security_hardening__
__high_level__,
__UML_class_diagrams__,
__design_reuse__.
__network_attack__
__UML_based__
__aspect-based__
__control_software__.
__activity_diagrams__.
__a-posteriori__
__programming_paradigm__,
__distributed_control_systems__.
__reverse-engineered__
__GAIA__
__discrete_event_system__
__hardware_verification__.
__domain_model__.
__test_criteria__
__a_pragmatic_approach__
__information_model__.
__formal_requirements__
__programming_constructs__.
__methodological_framework__
__safety_analysis__.
__coordination_language__
__world_view__
__dataflow_models__
__quality_model__.
__visual_programming_language__
__design_spaces__.
__test_oracles__.
__cognitive_architecture__
__Code_generation__
__recovery_process__
__software_model_checking__.
__verification_task__
__functional_behavior__
__formally_defines__
__case-based_learning__
__composition_model__
__advanced_applications__.
__performance_estimation__.
__component_interactions__.
__model_evolution__
__CSP-based__
__software_visualization__.
__resource-oriented__
__Message_Sequence_Chart__
__problem_solvers__.
__component_connectors__
__automatically_transforming__
__abstract_models__.
__late_binding__
__interchange_format__
__consistency_check__
__automatically_synthesize__
__RESTful_services__
__test_framework__
__consistency_checking__,
__task_model__.
__architectural_style__.
__high-level_programming__
__formal_analysis__.
__Java_Beans__
__formal_notation__
__HW_and_SW__
__UML_state_machines__
__real_time_systems__.
__UML_specification__
__UML_statecharts__
__Unified_Modelling_Language__
__state_models__
__formal_specification__,
__verification_framework__
__CPN_Tools__
__program_slicing__,
__static_verification__
__modeling_notation__
__modelling_languages__.
__hardware_description_languages__.
__UML_model__.
__conflict_detection__.
__UML_class__
__assertion-based__
__dependency_model__
__automatically_converting__
__functional_design__
__program_analyses__.
__state_based__
__configuration_language__
__domain_specific_languages__
__business_process_modeling__.
__unified_model__
__tool_set__.
__large-grained__
__application_architecture__
__functional_decomposition__.
__Ada_tasking__
__modelling_formalism__
__logic_based__
__language_independent__,
__protocol_specifications__.
__state_diagrams__.
__programming_languages__:
__interaction_diagrams__
__test_oracle__
__explicitly_addresses__
__planning_domains__.
__simulation_engine__.
__conformance_checking__
__dependability_evaluation__
__design_by_contract__
__transformation_engine__
__evolving_software__.
__block_diagrams__
__domain_analysis__.
__agent_framework__.
__markup_languages__.
__source_transformation__
__context_model__,
__organizational_model__
__implementation-independent__
__modeling_methodology__.
__workflow_specification__
__interactive_application__
__dynamic_structure__
__active_databases__.
__generation_module__
__process_description__
__component_interfaces__.
__visual_composition__
__computational_logic__
__UML_diagram__
__data_flow_diagrams__
__unified_modeling_language__
__aspect-oriented_programs__
__software_component__.
__BPEL_processes__.
__class_level__
__goal_models__.
__object-oriented_designs__
__component_composition__.
__domain_requirements__
__conceptual_level__
__DEVS_models__.
__hypothesis_formation__
__object-oriented_framework__
__structured_analysis__
__markup_language__.
__visual_language__.
__Petri-net__
__Model-based_testing__
__architectural_style__,
__the_SPIN_model_checker__.
__ontology_model__
__crosscutting_concern__
__test_purposes__.
__design_level__.
__concolic_testing__
__class_diagram__.
__transactional_behavior__
__automated_software__
__originally_defined__
__component_development__
__requirement_specifications__.
__generate_test_cases__
__modular_programming__
__RBAC_model__.
__dependency_graph__.
__hardware/software_codesign__.
__use_case_diagrams__
__code_synthesis__
__state_diagram__
__object-oriented__.
__simulation_traces__
__formal_specification_languages__
__analytic_framework__
__rule-based_programming__
__aspect_oriented__
__meta-modelling__
__concurrent_Java_programs__.
__program_modules__.
__workflow_patterns__.
__active_rules__.
__colored_Petri_nets__
__refinement-based__
__UML_sequence_diagrams__.
__mapping_tool__
__specification_formalism__
__white_box__
__meta-models__,
__reverse_engineering_tools__.
__component-based_design__
__object-oriented_code__
__layered_approach__
__VDM++__
__an_incremental__,
__description_languages__,
__map_generalization__
__Web_service_compositions__
__agent_interactions__.
__engineering_methodology__
__adaptation_strategy__
__cognitive_models__.
__parallel/distributed__
__workflow_language__
__visual_programming__.
__component_interface__
__activity_diagram__
__interface_language__
__model_integration__
__ETL_processes__.
__cross-cutting_concerns__.
__test_coverage_criteria__
__technical_contribution__
__component_specifications__
__protocol_implementations__.
__event-based_systems__.
__Specification_and_Description_Language__
__functional_descriptions__
__development_paradigm__
__formal_model__.
__language_extensions__.
__Security_policy__
__domain-specific_languages__,
__student_modelling__
__trace_analysis__.
__XACML_policy__
__object-oriented_concepts__.
__metamorphic_testing__
__business_process_model__
__Little-JIL__
__verification_tool__.
__argument-based__
__BDI-based__
__semi-quantitative__
__formally_describing__
__authoring_tool__,
__sequencing_rules__
__visual_notations__
__Event_Graphs__
__meta_models__
__CASE_tool__.
__goal_oriented__
__conformance_testing__.
__design_philosophy__,
__Discrete_Event_System_Specification__
__plan_recognition__.
__agent_model__.
__fault_trees__.
__software_engineering_environments__.
__language-independent__,
__reasoning_framework__
__composite_objects__.
__aspect-oriented_modeling__
__optimisation_techniques__.
__information_flow_analysis__
__formal_development__
__class_diagrams__,
__test_derivation__
__SPARQL_queries__.
__business_process_modelling__.
__business_domain__.
__specification_technique__
__application_profiles__
__XML_processing__.
__compiler_technology__.
__activity_diagrams__,
__Z_specifications__.
__attribute_evaluation__
__formal_descriptions__
__model-checking_techniques__
__COSMIC-FFP__
__automatic_test__
__reasoning_capabilities__.
__service_orchestrations__
__feature_models__,
__interactive_graphical__
__previously_developed__.
__behavioural_models__
__fault_tolerant_systems__.
__mathematically_based__
__timed_properties__
__architectural_pattern__
__context_model__.
__abstract_representation__
__coverage_metrics__.
__Feature_modeling__
__transformation_approach__
__translation_mechanism__
__automatically_translating__
__quality_model__,
__modular_design__.
__process_interaction__
__architectural_specification__
__modeling_environment__,
__dialog_manager__
__Petri_net_model__
__behavior_models__.
__policy_language__.
__Simulink_models__
__object-oriented_methodology__
__architectural_specifications__
__static_code_analysis__
__comparatively_simple__
__PRISM__,
__knowledge_fusion__
__CA_model__
__service_component__
__complexity_metric__
__variability_models__
__reference_architecture__.
__visual_notation__
__design_phases__.
__data_flow_analysis__,
__problem_solving_method__
__UPPAAL__.
__multi-staged__
__text_generation__.
__modelling_language__,
__RT-LOTOS__
__SMIL_2.0__
__final_goal__
__assertion-based_verification__
__state-machine__
__slicing_technique__
__region-based_memory_management__
__interactive_exploration__
__proof_planning__
__control_model__,
__timing_aspects__
__artifact-centric__
__design_strategy__,
__application_independent__
__component_design__
__stepwise_refinement__
__actor-based__
__structural_integrity__
__executable_specification__
__domain-independent__,
__functional_description__
__modeling_formalisms__
__declarative_specification__
__static_analyzer__
__machine-assisted__
__performance_testing__.
__observation-based__
__test_purpose__
__logical_design__
__protocol_description__
__support_tool__.
__concrete_implementation__
__task_level__
__validation_tool__
__automated_program__
__two_fold__:
__music_notation__.
__Program_transformation__
__policy_specification__.
__behavioral_models__,
__automated_process__
__event-driven_systems__.
__knowledge_model__.
__graphical_editors__
__agent_interaction_protocols__
__imperative_programming_languages__.
__a_model-driven_approach__.
__pattern-oriented__
__firewall_policies__
__reasoning_systems__.
__tool_chain__.
__generation_techniques__.
__statically_analyzing__
__real-time_systems__:
__structural_decomposition__
__graphical_notation__
__specification_methodology__
__Agent_UML__
__adequacy_criteria__
__Petri_net_models__.
__adaptation_rules__.
__automatically_producing__
__heterogeneous_embedded_systems__.
__modelling_approach__,
__inconsistency_detection__
__coverage_analysis__.
__business_process_design__
__practically_applicable__
__router_configuration__
__conflict_detection_and_resolution__
__round-trip_engineering__
__step-by-step__,
__suitable_abstractions__
__collaboration_diagrams__
__graph-oriented__
__domain-specific_modeling_languages__
__data_abstractions__.
__program_testing__.
__consistency_verification__
__discrete_event_models__
__synchronous_programs__.
__agent_architectures__.
__action_semantics__
__model_transformation_language__
__specially_adapted__
__parsing_techniques__
__petri_nets__
__functional_components__.
__high-level_specifications__.
__object_oriented_programming__.
__correctness_properties__.
__automatically_checking__
__model_refinement__.
__validation_technique__
__behavioral_specification__.
__document_structures__.
__visual_metaphor__
__CPN_model__
__design_paradigm__.
__test_harness__
__negotiation_protocol__.
__validation_strategy__
__UML_activity_diagrams__.
__program_construction__.
__Prolog-based__
__program_representation__,
__testing_criteria__.
__UML_sequence_diagrams__,
__property_specifications__
__probabilistic_model_checking__.
__requirement_specification__.
__functional_specifications__.
__language_independent__.
__automated_test_case_generation__
__object-oriented_frameworks__.
__cleanly_separates__
__WS-BPEL_processes__
__computational_reflection__
__knowledge_representation_framework__
__graphical_design__
__policy_engine__
__BPEL_process__.
__design-by-contract__
__meta-programming__.
__ontological_model__
__chart_parser__
__representation_model__.
__implicit_invocation__
__policy_refinement__
__QoS-based_WS__
__requirements_models__.
__component_specification__
__modeling_process__,
__information_modeling__.
__architectural_views__.
__multiparty_interactions__
__software_process_modeling__.
__metadata_schema__
__semi-automatic__,
__architecture_description_language__.
__program_generation__.
__software_architectural__
__formal_specification_language__
__concurrent_programming_language__
__graphical_editing__
__primitive_operations__.
__test_scenario__
__generic_architecture__
__service-based_systems__.
__forward_simulation__
__refinement_steps__.
__file_store__
__Haskell_programs__.
__ontology_modeling__
__compatibility_checking__
__UML_activity_diagram__
__ontology_design__
__dynamic_metrics__
__UML_statechart_diagrams__
__automatic_reasoning__
__finite_state_machine__.
__imperative_language__,
__UML_tools__.
__effectively_exploited__
__Model_driven__
__learning_object__,
__formal_model__,
__verification_tool__,
__realtime_systems__.
__query_decomposition__
__relevant_properties__
__efficient_incremental__
__automatic_verification__.
__hardware_synthesis__.
__service_specification__.
__automatic_test_generation__.
__Behavior_Trees__
__join_point_model__
__model_generation__,
__component_selection__.
__programming_notation__
__bidirectional_transformation__
__conceptual_architecture__
__analysis_framework__,
__high-level_programming_language__
__Z_specifications__
__bottom-up_parsing__
__event_models__.
__exception_handling_mechanism__
__Constraint_based__
__shape_grammars__
__numerical_programs__.
__description_languages__.
__aspect-oriented_design__
__component_based_systems__.
__interactive_components__
__software_updates__.
__agent_programming__
__formal_analysis__,
__slicing_techniques__
__Software_requirements__
__information-flow_security__
__Symbolic_model_checking__
__dynamic_workflow__
__facilitates_easy__
__commitment_protocols__
__reactive_behaviour__
__state_transition_diagrams__
__Attention_Investment__
__software_specification__.
__automatic_refinement__
__message_sequences__
(__Business_Process_Execution_Language__)
__event-oriented__
__behavioral_modeling__.
__OASIS__.
__statistical_usage_testing__
__UML_sequence_diagram__
__process_logic__
__dynamic_component__
__architectural_patterns__.
__model_verification__.
__protocol_analysis__,
__planning_techniques__.
__statically_checking__
__algorithmic_skeletons__
__actor-oriented__
__CRISP-DM__
__correct_by_construction__.
__interface_specification__.
__dynamic_memory_management__.
__derivation_process__
__runtime_verification__.
__capture_and_replay__
__annotation_language__
__extended_finite_state_machine__
__GUI_testing__.
__WS-CDL__.
__language_implementation__
__decision_making_framework__
__metamodel-based__
__hardware/software_systems__.
__CO-OPN__
__behavioral_specifications__.
__formal_refinement__
__unified_model__.
__dialogue_manager__
__fault-handling__
__object-oriented_approach__
__support_environment__.
__data_definition_language__
__ontological_framework__
__PDE_solvers__.
__UML_specifications__
__workflow_model__,
__test_script__
__push-button__
__test_execution__.
__source_code_transformation__
__transformation_process__.
__regression_test_suite__
__conceptual_database__
__petri_net__
__migration_process__
__transformation_language__.
__agent_oriented__
__component_interfaces__,
__framework_instantiation__
__OCL_constraints__.
__Java_software__.
__asynchronous_message_passing__.
__temporal_analysis__
__abstract_specification__
__graphical_rendering__
__DEVS_simulation__
__solid_modelling__.
__mathematical_foundations__
__ETL_process__
__inconsistency_handling__
__Hera__
__formal_design__
__Semantic_Web_services__.
__log_file_analysis__
__agent-oriented_modeling__
__agent_behaviour__.
__authoring_environment__.
__software-hardware__
__unit_testing_framework__
__modelling_tools__.
__diagram-based__
__formal_verification_techniques__.
__consistency-based_diagnosis__
__OMG_standard__
__process_definitions__.
__consistency_checks__.
__execution_engine__,
__inference_engines__.
__semantic_model__,
__diagnostic_reasoning__.
__operating_principles__
__workflow_process__.
__compositional_verification__.
__intermediate_models__
__Evolutionary_testing__
__SoC_design_methodology__
__dataflow_programs__.
__code_generators__,
__workflow_design__.
__autonomic_capabilities__
__communications_protocols__.
__UML_design__
__control_flow_and_data_flow__
__components_and_connectors__.
__translation_tool__
__state_machine__,
__test_driver__
__concurrent_Java_programs__
__Object-orientation__
__modeling_formalism__
__declarative_models__
__Automated_debugging__
__test_scripts__.
__modelling_technique__.
__update_processing__
__diagram_editor__
__knowledge_representation_scheme__
__cognitive_architecture__,
__unified_modelling_language__
__automotive_embedded_systems__.
__enterprise_models__.
__consistency_rules__.
__visual_modelling__
__feature_composition__
__e-barter__
__process_specification__
__Model_management__
__concurrent_object-oriented__
__UML_modelling__
__SQL_language__
__transformation_framework__
__service_ontology__
__scenario-based_specifications__
__integration_methodology__
__formal_method__.
__concrete_implementations__.
__policy_language__,
__structure_diagrams__
__modeler__,
__mathematical_concepts__.
__XML_transformations__.
__pattern-driven__
__deriving_test_cases__
__SystemC_designs__.
__refinement_techniques__
__real-time_reactive_systems__.
__SQL_extension__
__source_code_metrics__
__user_interface_development__.
__natural_language_requirements__
__learning_design__.
__functional_representation__
__parser_generation__
__Secure_Tropos__
__security_specification__
__interface_synthesis__
__abstract_syntax_trees__.
__domain-specific_models__
__module_interconnection__
__delegation_and_revocation__
__architectural_descriptions__.
__query_processing_and_optimization__
__service_description_language__
__reactive_programs__.
__knowledge_representation_systems__.
__reverse_engineering_tool__
__UML/SPT__
__generation_tool__.
__software_development_tools__.
__weaving_process__
__functional_specification__,
__formal_representation__
__coordination_models__.
__formal_validation__
__extensibility_mechanisms__
__bug_finding__
__tool-chain__
__multidimensional_data_model__
__concurrent_object-oriented_programs__.
__workflow_model__.
__software_development_methodology__.
__workflow_analysis__
__transformation_models__.
__self-adjusting_computation__.
__atomic_transactions__.
__binding_mechanism__
__use_case_scenarios__
__electrical_circuits__
__language_definition__.
__multiple_paradigms__
__implementation_independent__
__implicit_parallelism__
__UML_2.0__,
__adaptation_policies__.
__compensation_mechanism__
__automatic_service_composition__
__service_choreography__
__active_objects__,
__model-driven_approach__
__Semantic_Web_Rule_Language__
__WS-BPEL_2.0__
__verification_procedure__.
__site-level__
__safety_case__
__natural_language_description__
__object-oriented_class__
__reengineering_process__
__XML_access_control__
__briefly_reviewed__,
__graphical_model__,
__efficient_runtime__
__database_views__
__behavioural_model__
__database_models__.
__parallel_image_processing__.
__control_programs__.
__behaviour_modelling__
__model-to-model_transformation__
__symbolic_model_checker__
__GAN__
__source-to-source_transformations__
__executable_assertions__
__automated_code_generation__
__functional_modeling__
__GOMS_analysis__
__modeling_concepts__.
__ontological_representation__
__logical_inference__.
__visual_programming_environment__
__object-oriented_modelling__
__abstraction_hierarchy__
__programmable_logic_controllers__
__object-oriented_analysis_and_design__.
__software_requirements_specifications__
__code_analysis__.
__dynamic_impact_analysis__
__execution_framework__.
__Java_source_code__.
__Real-Time_Maude__
__lets_designers__
__SAT_solving__.
__behavior_description__
__model_checking__:
__dynamic_languages__.
__transformation_functions__.
__object-oriented_software_design__
__benchmarking_tool__
(__Software_Cost_Reduction__)
__protocol_implementation__.
__adaptation_techniques__.
__object_interactions__.
__timing_schema__
__smoothly_integrates__
__concurrent_object__
__simulation_traces__.
__integration_processes__.
__structuring_techniques__
__abstraction-refinement__
__shared_dataspace__
__syntax-driven__
__Web-based_application__
__architectural_model__,
__skeleton_based__
__object-oriented_modeling__.
__pearl__
__PLC_programs__
__biomolecular_systems__.
__data_generation__.
__dataflow_programming__
__consistency_analysis__
__information_models__.
__primary_contributions__
__business_protocols__.
__test_input_generation__
__automatic_program__
__software_connectors__.
__knowledge_acquisition_tool__
__program_analyses__,
__logically_sound__
__algorithm_animation__.
__code_generation_tool__
__process_definition_language__
__modular_architecture__,
__visualisation_technique__
__Software_synthesis__
__contract_specifications__
__case-based_planning__
__graph_pattern_matching__
__verification_environment__.
__WSDL-S__
__access_control_requirements__.
__agent_communication_language__
__closely_reflects__
__model_composition__.
__requirements_validation__.
__specification_notation__
__query-answering__
__Formal_Tropos__
__load_generator__
__MAS-ML__
__queueing_network_model__
__functional_model__.
__test_case_generator__
__IEEE_Std_1471__
__Stratego/XT__
__colored_Petri_nets__.
__distributed_execution__.
__procedural_programs__.
__object_systems__.
__transformational_programming__
__typed_intermediate_language__
__object_behaviour__
__constraint_specification__
__modeling_constructs__.
__interconnected_components__
__view_mechanism__
__banking_application__
__grid_service_composition__
__semantic_modelling__
__semantic_specification__
__UML_statechart__
__based_simulation__
__Erlang_programs__.
__agent_interaction__.
__fits_naturally__
__model.This_paper__
__implementation_strategy__.
__automated_code_generation__.
__modeling_methodology__,
__statechart_diagrams__
__model_integration__.
__structural_design__.
__design_specifications__,
__analysis_methodology__,
__graphical_presentation__
__specification-based_testing__.
__suitably_adapted__
__service_description__.
__recent_enhancements__
__program_composition__
__policy_specification_language__
__traceability_link__
__fault-intolerant__
__formal_method__,
__software_reliability_estimation__
__synchronous_language__
__feature_modeling__,
__aspect_model__
__Low_level__
__Coverage_metrics__
__UML_and_OCL__
__semantic_navigation__
__conceptual_representation__
__Lexical_Functional_Grammar__
__dynamic_service_composition__.
__automatic_programming__.
__an_Eclipse_plugin__
__CPN_Tools__.
__agent_interaction_protocols__.
__mapping_tool__.
__formally_correct__
__knowledge_representation_formalisms__.
__workflow_patterns__,
__the_SPIN_model_checker__
__temporal_behavior__.
__Failure_Modes_and_Effects_Analysis__
__coupling_measurement__
__testability_transformation__
__uncertain_knowledge__.
__scientific_programming__.
__software_watermarking__.
__mutation_analysis__.
__query_facilities__.
__ontology_editor__
__explanation_generation__
__UML_2.1__
__goal-oriented_analysis__
__GPU_programming__.
__agent-oriented_software_engineering__.
__execution_semantics__.
__UML_designs__.
__software_renovation__
__Ada_packages__
__hierarchical_model__,
__security_specifications__.
__basic_primitives__
__dynamic_symbolic_execution__
__Proof_planning__
__ontology_framework__
__testing_process__,
__composition_patterns__
__aspect_language__
__design_representations__.
__Bitstream_Syntax_Description__
__functional_design__.
__architectural_description_language__
__automatically_recovers__
__hypermedia_design__
__symbiotic_simulation__
__belief-desire-intention__
__temporal_logic_specifications__.
__modeling_notations__.
__tool_environment__
__graphically_representing__
__Z_notation__
__test_procedures__.
__knowledge_base_systems__.
__dynamic_web_applications__.
__extended_finite_state_machines__.
__interaction_protocol__.
__PR-OWL__
__business_scenario__.
__aspect-oriented_composition__
__flow_diagram__
__risk_assessment_methodology__
__strategic_reasoning__
__requirement-driven__
__controlled_natural_language__
__data_modelling__.
__service-oriented_workflow__
__colored_Petri_net__
(__object-oriented__
__problem_solving_tasks__.
__physics-based_animation__
__formal_requirements_specification__
__protocol_synthesis__
__fault-tolerant_systems__,
__Petri-net-based__
__business_collaborations__.
__rule_engine__.
__multi_agent_systems__.
__goal_driven__
__answer_set_solver__
__interprocedural_program__
__object_modelling__.
__the_Spin_model_checker__
__meta_modeling__
__LUSTRE__
__state-based_testing__
__software_requirements_specification__
__component_description__
__WSDL_description__
__bill_of_material__
__XML-compliant__
__tool_supported__
__agent_collaboration__
__protocol_validation__
__UML_designs__
__automatic_test_data_generation__
__a_transformational_approach__
__transactional_workflow__
__validation_purposes__.
__misuse_case__
__certifying_compilation__
__formal_specification_languages__.
__automatic_model_generation__
__composition_framework__.
__declarative_multi-paradigm__
__conformance_test__
__reasoning_engine__.
__automatic_service_composition__.
__circuit_description__.
__ISO/IEC_15408__
__validation_tool__.
__goal-directed__,
__stepwise_refinement__.
__SCR_requirements__
__conceptual_schemas__.
__asynchronous_processes__.
__definition_formalism__
__Verilog-AMS__
__UML_statecharts__.
__stakeholder_goals__.
__automatic_discovery__
__TV_stream__
__UML_notation__
__constraint_solving_techniques__
__communication_software__.
__automatically_locates__
__rule_execution__.
__knowledge_structure__.
__artificial_intelligence_planning__
__automated_reasoning_systems__
__organic_chemistry__.
__behavioral_requirements__
__rich_internet_applications__.
__test_case_selection__.
__model_evolution__.
__goal-oriented_requirements__
__problem-solving_method__
__software_life-cycle__
__A-7__
__high_level_Petri_nets__
__PhD_project__
__model_builder__
__parallel_language__.
__graph_transformation_techniques__
__frame_structures__
__inheritance_mechanism__
__hardware_description_language__,
__process_composition__
__grammar_based__
__debugging_tool__.
__relational_database_design__
__program_construction__,
__Design_by_Contract__,
__test_adequacy__
__state_space_analysis__
__algebraic_transformations__.
__a_Petri_net-based__
__an_object-oriented_data_model__,
__UML_class_models__
__software_requirements_analysis__
__agent_control__
__executable_specifications__.
__distributed_software_architectures__.
__service_specifications__.
__automatic_code_generation__,
__conceptual_data_modeling__
__proof_assistants__.
__Process_algebra__
__prediction_module__
__efficient_simulation__.
__prototype_tool__,
__aspect-oriented_concepts__
__use_case_scenarios__.
__exception_flow__
__LOTOS_specifications__.
__behavioural_description__
__APL_functions__.
__asynchronously_communicating__
__abstraction_mechanisms__.
__software.This_paper__
__automated_translation__
__agent-oriented_programming__.
__SDL_specification__
__software_measures__.
__ontology_language__,
__component_architecture__.
__model_refactoring__
__function_blocks__.
__automatic_mapping__
__modelling_environment__
__graph_manipulation__
__ontology_integration__.
__object-relational_mapping__
__techniques.This_paper__
__hierarchically_ordered__
__agent_programming__.
__weakly-coupled__
__monitoring_facilities__
__reactive_layer__
__programming_framework__,
__specification_tool__
__test_paths__.
__SystemC_designs__
__fault_injection_tool__
__timed_Petri_net__
__User_Interface_Description_Language__
__discrete_event_control__
__statechart-based__
__executable_processes__.
__product_models__.
__specification_techniques__.
__OO_programs__.
__model_driven_development__.
__bus_interfaces__
__automatic_test_case_generation__
__flow-oriented__
__multimedia_ontology__
__negotiation_model__.
__Probabilistic_model_checking__
__incrementally_builds__
__SDL_specifications__
__compositional_analysis__
__high-level_programming_languages__.
__specification_and_description_language__
__instrumentation_framework__
__responsibility-driven__
(__Web_Ontology_Language__)
__tool-assisted__
__fuzzy_Petri_nets__
__orchestration_language__
__formal_specification_language__.
__formal_definitions__.
__Interactive_computer_graphics__
__architectural_model__.
__checking_properties__
__feature-driven__
__program_dependence_graph__
__reverse_engineering_techniques__.
__Use_case__
__program.This_paper__
__hypermedia_model__
__multiparadigm_programming__
__silicon_compiler__
__design_specification__.
__function_points__.
__compatibility_analysis__
__component_composition__,
__knowledge_spaces__.
__incompleteness_and_inconsistency__
__design.This_paper__
__dialog_model__
__CSP_specifications__
__MOF-based__
__UML_models__:
__scenario-based_requirements__
__model_validation__,
__inclusion-based__
__reuse_technique__
__OO-Method__
__platform_independent_models__
__ontology_representation__
__executable_model__
__Event-driven_Process_Chains__
__rational_decision_making__
__automatically_verifies__
__security_protocol_implementations__.
__component_connectors__.
__core_ontology__
__modeling_formalism__.
__extension_mechanism__.
__coordination_patterns__.
__process_descriptions__.
__channel_passing__
__Prism__.
__component_framework__,
__refinement_calculus__.
__high_abstraction_level__
__Extended_abstract__:
__plan_representation__
__dataflow_diagrams__
__geo-ontology__
__explicitly_separates__
__probabilistic_representations__
__safety_specifications__
__hybrid_reasoning__
__planning_component__
__trace_analysis__,
__real_time_scheduling_theory__
__editing_tools__.
__programming_primitives__
__WS-SecurityPolicy__
__applicative_languages__.
__graphic_editor__
__ODE__,
__formally-defined__
__MSC-based__
__explanation-based_generalization__
__database_model__.
__formal_frameworks__
__program_development_environment__.
__General_principles__
__formally_specifies__
__control_design__,
__behavioural_specification__
__process_modeling_language__
__robustness_testing__
__performance_predictor__
__state_transition_models__
__database_views__.
__C++0x__
__software_architectures__:
__biologically_inspired__,
__verification_method__,
__UML_state_diagrams__
__easily_instantiated__
__database_schema_design__
__algorithms.This_paper__
__models.This_paper__
__error-tolerance__.
__agent_communication_languages__.
__forward_recovery__
__testing_framework__.
__test_designer__
__exception_management__
__component-based_design__.
__software_processes__:
__transformation_engine__.
__executable_tests__
__natural_language_requirements__.
__hierarchical_planner__
__regular_expression_pattern_matching__
__railroad_crossing__
__argumentation_schemes__.
__automatically_composing__
__unified_representation__
__Layered_Queueing_Network__
__BPMN_models__
__composite_process__
__model_reuse__.
__orchestration_engine__
__Ada_programs__.
__high-level_descriptions__.
__paper_briefly_presents__
__structuring_mechanism__
__state_machine_model__
__implied_scenarios__.
__class_testing__
__product_line_variability__
__the_probabilistic_model_checker_PRISM__
__UPPAAL__,
__layout_generator__
__grid_service_composition__.
__structural_reflection__
__declarative_language__,
__refactoring_tool__
__Fault_tree__
__dataflow-oriented__
(__object-oriented__)
__user-extensible__
__efficient_parallel_algorithms__.
__coordination_language__.
__automated_composition__
__OLE_DB__
__hierarchical_refinement__
__partial_validation__
__transition_path__
__co-simulation__,
__Conceptual_Dependency__
__WS-Policy__.
__Description_Language__)
__automatic_abstraction__
__Object-Z__,
__high-level_Petri_net__
__object-oriented_style__
__action_description_language__
__visual_information_retrieval__.
__coordination_paradigm__
__batch_plant__
__automatic_monitoring__
__ontology_reuse__.
__CSP-OZ-DC__
__open_nesting__
__verification_process__,
__extension_mechanisms__.
__similarity-based_reasoning__
__automated_test_generation__
__freeform_feature__
__SoC_design_flow__
__task_modelling__
__event-driven_programming__.
__fine-grained_concurrency__
__object-oriented_models__.
__the_unified_modeling_language__
__modeling_notation__.
__hierarchically_organised__
__explicit_connectors__
__relative_debugging__
__level.This_paper__
__briefly_introduced__,
__KDD_process__
__discrete-event_system__
__event-condition-action_rules__
__transaction_level_modeling__
__software_documentation__.
__formal_methodology__
__architectural_component__
__transformation_steps__.
__Conflict_analysis__
__hardware-software_systems__.
__XML_language__.
__TAB_Logic__
__Enterprise_modeling__
__software_models__,
__design_language__.
__programming_methodology__,
__test_cases_generation__
__takes_into_account__,
__Functional_Classes__
__rewriting_techniques__,
__web_service_orchestration__.
__ASF+SDF__
__differencing_algorithm__
__usage_models__.
__helps_automate__
__object-oriented_software_engineering__.
__formally_verifiable__
__high-level_description__
__UML_notation__.
__specification_based__
__architectural_power__
__assembly_structure__
__dependability_modeling__
__Stochastic_Activity_Networks__
__Web_workload__
__fully_automates__
__meta-level_reasoning__
__Test_data_generation__
__specification-driven__
__workflow_views__
__adaptation_knowledge__.
__operational_specifications__
__reflective_programming__
__SWRL_rules__.
__workflow_analysis__.
__domain_specific_languages__.
__workflow_logic__
__interface_generation__
__diagram_editors__.
__SBML_models__
__behavior_specifications__
__behavioural_descriptions__
__static_checker__
__multimodal_interactive_systems__.
__distributed_application_development__.
__firewall_policies__.
__transaction_level_modeling__.
__object-oriented_approach__.
__hierarchical_graph__
__verification_framework__.
__informal_description__
__syntax-aware__
__applies_equally__
__Declarative_Networking__
__multidisciplinary_knowledge__
__agent_programming_languages__.
__syntactic_errors__.
__schema_transformations__.
__supporting_tool__,
__partial_behavioral_reflection__
__stepwise_refinement__,
__evolvable_systems__.
__workflow_schemas__
__component_based_software_development__
__SystemC/TLM__
__stochastic_process_algebras__.
__requirements_documentation__
__component-based_software_architectures__
__UML_tool__
__finite-domain_constraint__
__variability_analysis__.
__constraint-based__,
__program_specifications__.
__answer_set_programs__
__model-checking_tools__.
__event_systems__.
__language-independent__.
__language_independence__
__interaction_protocol__,
__product_line_requirements__
__syntax-directed_editors__
__visual_modeling_language__
__generative_design_patterns__
__multi-fidelity__
__Query/View/Transformation__
__design_optimization__,
__case-based_planner__
__synchronous_reactive__
__black-box_components__.
__Simulink_model__
__sequence_diagram__.
__service_choreographies__.
__concurrent_object-oriented_programming__.
__evolving_programs__.
__existing_APIs__
__description_format__
__source_code_generation__
__running_code__.
__onan__
__Semantic_Web_Rule_Language__.
__Z_notation__.
__requirements_modelling__
__service-oriented_application__
__integration_framework__.
__reasoning_mechanisms__.
__design_structure_matrices__
__dynamic_description_logic__
__relationship_model__
__oriented_programming__
__access_permissions__.
__communication_refinement__
__business_contract__
__performance_profiles__.
__reusable_libraries__
__distributed_data_structures__.
__system-level_design_methodology__
__model_transformation_languages__.
__MIDAS__,
__component_specifications__.
__hierarchical_design__,
__tool_environment__,
__workflow_definition__.
__modular_reasoning__.
__fully_mechanized__
__automatically_locating__
__static_program_analysis__,
__scenario_diagrams__
__Action_systems__
__parsing_technique__.
__executable_UML__
__a_goal-oriented_approach__
__multi-agent_interactions__.
__basic_arithmetic__
__goal_decomposition__
__UML_metamodel__
__software_quality_models__.
__XML_transformation__
__web_information_extraction__
__grammar_writing__
__object-oriented_classes__.
__process_definition__.
__well_suited__.
__modelling_framework__,
__generative_programming__.
__augmented_transition_network__
__BDI_agent_model__
__constraint-based_local_search__
__Feature-oriented_programming__
__inference_procedure__.
__definition_language__.
__Step-wise__
__aspect-oriented_systems__
__role_concept__
__composition_mechanisms__,
__COMDES-II__
__UML_standard__
__a_Petri_net_based__
__programming_technique__.
__state_models__.
__software_structure__,
__interchange_format__.
__ontological_analysis__
__reference_terminology__
__high_level_architecture__
__mediation_framework__
__fixture_configuration_design__
__nursing_terminology__
__complex_physical_systems__.
__refinement_checking__
__inheritance_graph__
__cruise_control_system__.
__specification_refinement__
__meeting_scheduler__
__MOF-compliant__
__correctness_checking__
__knowledge_representation_scheme__,
__feature_diagrams__
__engineering_design_optimization__.
__software_frameworks__.
__Mining_software_repositories__
__configuration_design__.
__concurrent_software_systems__
__procedural_interface__
__dynamic_reconfigurations__
__component_assembly__.
__software_architecture_description__
__description_techniques__
__temporal_behaviour__
__UML_statechart_diagrams__.
__module_concept__
__fair_exchange_protocols__.
__composite_structure__
__CPN_models__
__generic_task__
__rigorous_specification__
__description_framework__
__Visual_modeling__
__clinical_guideline__
__use-cases__.
__medium-level__
__architectural_drawings__.
__Labeled_Transition_System__
__state_charts__
__behavior_model__.
__visual_notations__.
__table_driven__
__perspective-based_reading__
__Activity_diagrams__
__bidirectional_transformations__.
__the_Unified_Modeling_Language__,
__software_process_model__.
__Syntactic_analysis__
__interacting_finite_state_machines__
__user_interface_adaptation__.
__dynamic_taint_analysis__
__DEN-ng__
__distributed_problem_solving__,
__planning_task__.
__transformation_languages__.
__Program_synthesis__
__AOP-based__
__workday_calendar__
__operator_faults__
__transformational_approach__
__state_graphs__.
__component_library__,
__specification_technique__,
__e3-value__
__specification_matching__
__interaction_diagrams__.
__reverse_execution__
__functional_components__:
__property_based__
__high_integrity_systems__.
__tool_demonstration__
__security_labelling__
__UML_extensions__
__type-checking__.
__computational_reflection__,
__IDL_compiler__
__software_architectural_design__
__architectural_requirements__.
__high_level_abstractions__
__security_concepts__.
__object-oriented_modeling__,
__executable_models__.
__functional_specification__.
__selective_regression_testing__
__serves_two_purposes__.
__reflection_mechanism__
__teaching_programming__.
__simulation_program__,
__model-driven__,
__architecture_description__,
__debugging_facilities__.
__compatibility_checks__
__history-sensitive__
__dependability_evaluation__.
__generating_test_sequences__
__web_service_interfaces__.
__semantic_web_ontologies__.
__rule_language__,
__component_interconnection__
__deliberative_agents__.
__temporal_query_language__
__module_algebra__
__library_modules__
__model_transformation_techniques__
__visualisation_tool__.
__hardware_description__.
__visual_programming_environments__.
__semantic_correctness__
__QoS_specifications__
__reusable_library__
__composition_mechanisms__.
__basic_principles__.
__virtual_class__
__apparel_products__.
__code_templates__
__geographical_database__
__composition_of_Web_services__.
__program_specialization__,
__process_patterns__.
__data_translation__.
__substantial_benefit__
__test_adequacy_criterion__
__conversion_tool__
__forward_reasoning_engine__
__program_specification__,
__mathematical_tools__.
__repair_actions__.
__combinatorial_circuits__.
__model-driven_architecture__
__definition_facility__
__communicating_finite_state_machines__.
__platform-specific_models__
__external_interfaces__
__distributed_object-oriented_systems__.
__object-relational_database_systems__
__concurrency_semantics__
__evolutionary_design__.
__object-oriented_paradigm__
__composite_WS__
__CSP_specifications__.
__VHDL_code__.
__conceptual_MD__
__domain-specific_language__.
__theorem_proving_techniques__
__primary_component__
__software_composition__.
__quality_attribute_requirements__
__DARPA_Agent_Markup_Language__
__program_analysis_tool__
__MDA_framework__
__composition_patterns__.
__compliance_verification__.
__nested_transaction_model__
__creating_animations__
__modeling_formalisms__.
__tabular_expressions__
__concurrent_software_systems__.
__logic-based_languages__
__color_management__
__main_innovations__
__reuse_reengineering__
__Semantic_Web_reasoning__
__declarative_specifications__.
__UML_state_machine__
__Description_Logic_reasoning__
__user_interface_specifications__
__PADS/ML__
__visual_modeling__,
__domain-centric__
__queueing_network_model__.
__passive_testing__.
__feature_model__,
__development_framework__,
__behavioral_adaptation__
__source-to-source_transformations__.
__FSM_model__
__test_oracle__.
__XML_instances__
__choreography_language__
__cognitive_model__,
__a_knowledge_based_approach__
(__Ontology_Web_Language__)
__MDD-based__
__replicated_file_system__
__software_process_management__.
__behavior_descriptions__
__compiler_generation__.
__structural_conformance__
__synchronous_programming__
__dynamic_software_architectures__.
__behaviour-preserving__
__adaptation_rules__,
__timed_asynchronous__
__component_behavior__.
__reusable_abstractions__
__correctness_verification__
__requirements_engineering_techniques__.
__computation_paradigm__.
__software_process_modelling__
__nondeterministic_domains__.
__UML_standard__.
__formal_assertions__
__RTL_IPs__
__block_diagrams__.
__Translation_validation__
__Description_Language__,
__knowledge-acquisition_tools__
__static_WCET_analysis__
__scenario-based_specification__
__contextual_graphs__.
__service-oriented_design__.
__abstract_specification__.
__model_versioning__.
__MDA_approach__.
__coordination_architecture__
__structural_coverage_criteria__
__AspectJ_programs__
__life-cycle_model__
__aspect-oriented_requirements__
__reasoning_mechanism__.
__architectural_specifications__.
__execution_modes__.
__dynamic_aspects__.
__model-based_user_interface_design__
__program_specialization__.
__mutation-based_testing__
__XML_query_optimization__
__model_composition__,
__ontology_model__.
__semantic_anchoring__
__feature_interaction_detection__
__combinational_equivalence__
__constraint_management__
__MDA_tools__.
__coordination_abstractions__
__product_architecture__.
__stochastic_domains__.
(__Unified_Modeling_Language__),
__Lyee-Calculus__
__embedded_software_design__.
__web_application_testing__
__component-based_architectures__.
__requirements_engineering_methodology__
__object-oriented_database_system__.
__group_membership_protocol__
__policy_definition__
__safety_and_liveness__.
__glass-box__
__test_coverage_criteria__.
__steering_behaviors__.
__textual_requirements__
__TTCN-3__,
__DisCo__
__formal_underpinnings__
__concept_algebra__
__replica_location_service__
__event_processing__,
__inductive_assertions__.
__Simulink_models__.
__architecture_description__.
__functional_test_cases__
__runtime_checking__
__dynamic_frames__
__SystemC_code__
__freeform_features__
__reengineering_framework__
__object_persistence__.
__coordination_language__,
__implementa-_tion__
__dependency_information__.
__usage_scenario__.
__design-space_exploration__.
(__Discrete_Event_System_Specification__)
__FMC-QE__
__modular_ontologies__.
__case_history__
__search_tool__,
__fail-soft__
__family_architecture__
__program_obfuscation__
__Web_programming__.
__multi-agent_architecture__.
__UML_notations__
__process-view__
__architectural_modeling__.
__workflow_designer__
__computational_semantics__.
__data_flow_diagrams__,
__class_diagram__,
__component_customization__
__Evolutionary_computation__:
__proof-checking__
__engineering_tools__.
__conceptual_schema_design__
__generic_models__.
__platform-based_design__.
__structural_description__
__composition_model__.
__web_programming__.
__style_checker__
__NLP_applications__,
__legacy_programs__.
__performance_analyses__.
__multiple_abstraction_levels__
__domain_modelling__
__hardware-software_codesign__.
__object-oriented_specifications__
__statechart_diagrams__.
__constraint_definition__
__active_DBMS__
__undo_mechanism__
__medical_guidelines__.
__declarative_rules__.
__business_process_specifications__.
__generic_framework__,
__aspect-oriented_modeling__.
__physical_algebra__
__linguistic_mechanisms__
__design_notations__.
__legislative_texts__
__implementation_framework__.
__Visual_language__
__robotic_soccer__.
__conceptual_representation__.
__underlying_semantics__.
__formal_ontology__.
__choreography_and_orchestration__
__abstract_model__.
__easily_extended__.
__reaching_definition__
__UML_interaction_diagrams__.
__descriptive_language__
__Stochastic_Simulation_Algorithm__
__syntax_definition__
__application_frameworks__,
__concurrent_language__.
__Software_Reconnaissance__
__document_generation__
__subsumption-based__
__translation_process__.
__simulation_interoperability__
__ASP_programs__
__rule-based_programs__.
__diagram_editors__
__reverse_engineering_approach__
__web_ontologies__.
__escape_analysis__.
__Markup_Language__),
__run-time_code_generation__.
__Scenario-driven__
__Coloured_Petri_net__
__problem_solving_methods__.
__modular_robots__,
__open_agent_societies__.
__multi-paradigm_language__
__constraint-based_modeling__
__data-intensive_business__
__graphical_symbols__.
__hierarchical_tree__.
__implicit-invocation__
__ACL_semantics__
__dynamic_structure__,
__CS-XML__
__platform-independent_models__
__Linux_device_drivers__.
__answer_set_programs__.
__collaborative_workspaces__.
__evolving_connectionist_systems__
__visual_programs__.
__XML_updates__.
__hybrid_neuro-symbolic__
__scene_descriptions__.
__EFSM-based__
__core_components__:
__Java_bytecode_verification__
__software_architecture_evaluation_process__
__OWL_2_RL__
__interaction_sequences__.
__rigorous_specifications__
__scalable_performance__,
__navigation_strategies__.
__distributed_authorization__.
__state_machine_models__
__model_management_operators__
__concurrent_languages__.
__automatic_program_generation__
__dependency_injection__
__cell_complexes__.
__biochemical_models__.
__object-oriented_analysis_and_design__,
__SOA_solutions__.
__SMIL_documents__
__speech_and_language_processing__.
__component_level__.
__Formal_description__
__complex_dynamic_systems__.
__asynchronous_hardware__
__variant_selection__
__hierarchical_state_machines__.
__state-transition_diagrams__
__main_achievement__
__BDI-based_agent__
__algorithmic_differentiation__
__Constraint_diagrams__
__logical_representation__.
__declarative_debugging__
__WS-BPEL_process__
__model-view-controller__
__hybrid_modeling__
__component_assemblies__
__Software_Cost_Reduction__
__XML_Metadata_Interchange__
__device_configuration__.
__programming_principles__.
__Prototype_Verification_System__
__semantic_analyzer__
__constructive_induction__,
__conceptual_database_design__.
__logical_database_design__
__XSLT_transformations__
__modular_compilation__
__BPEL_code__
__Type-directed__
__modeling_primitives__.
__scientific_models__.
__test_models__.
__concept_location__,
__reactive_programming__
__dynamic_priorities__.
__compiler_transformations__.
__SystemC_kernel__
__trace_analyzer__
__interactive_behaviors__.
__source-level_transformation__
__extending_UML__
__aspect-orientation__.
__π_calculus__
__assembly_language_programs__.
__Information-flow__
__protocol_specifications__,
__action_languages__,
test-__based_pointcuts__
__unambiguous_specification__
__Autonomic_System_Specification_Language__
__AspectJ_compiler__
__behavior_specification__,
__multiperspective_requirements__
__Dynamic_process__
__advice_weaving__
__message-passing_parallel_programs__
__component_diagrams__
__aspect-oriented_languages__.
__successive_refinement__.
__repository-based__
__aspect-oriented_systems__.
__C-like_languages__
__visual_editing__
__test-data_generation__
__An_object-oriented_approach__
__assertion_generation__
__goal-driven__,
__electronic_contracts__.
__BPEL_code__.
__algorithmic_description__
__AspectJ_programs__,
__Timed_Communicating__
__Language_constructs__
__formal_argumentation__
__quantum_programming_language__
__architectural_reflection__
__relational_schema__.
__automatic_completion__
__language_concepts__.
__checking_tool__.
__domain-specific_visual_language__
__object-relational_database_systems__.
__XML_specifications__
__weaving_aspects__
__dynamic_Web_pages__.
__interface_definition_languages__
__testing_tool__.
__unit-test_generation__
__query_mechanism__.
__task_description__.
__late_requirements__
__agent_organizations__
__learning_apprentice__
__visual_language_generation__
__Reserved_Graph_Grammar__
__verification_engine__
__Abstract_State_Machine_Language__
__conformance_tests__
__management_facilities__.
__tool_chains__.
__object-oriented_paradigm__.
__refinement_methodology__
__commonality_analysis__
__Automated_reasoning__
__discourse_parsing__
__formal_development__.
__object-oriented_modelling__.
__safety-critical_real-time_systems__.
__ontology_mappings__.
__prototyping_language__
__use_case_driven__
__security_patterns__,
__xADL_2.0__
__regression_test_suite__.
__team_plans__
__programmable_logic_controller__
__fault_injection_tool__,
__text-to-scene_conversion__
__supporting_tool__.
__refinement_checking__.
__declarative_networking__,
__deduction_engine__
__definition_facilities__
__UML_design_models__
__fault-tolerant_software__.
__coloured_Petri_net__
__IIS*Case__
__repair_policies__
__schema_translation__
__group_communication_primitives__
__proving_termination__.
__language_implementation__.
__meta-modelling__.
__process_plans__.
__qualitative_physics__.
__semantic_interpreter__
__S-PMIF__
__multimedia_synchronization__.
__ETL_design__
__sequential_programming__.
__subscription_language__
__ambiguity_detection__
__structural_testing_criteria__
__high-productivity__
__programming_languages__;
__cellular_models__.
__architectural_pattern__,
__Formal_correctness__
__forward_slicing__
__termination_inference__
__measurement_model__,
__interface_descriptions__,
__concurrent_constraint_programming__.
__discrete_event_simulation_models__.
__RosettaNet_PIPs__
__Petri_net_theory__.
__workflow_modelling__
__business_process_description__
__dynamic_fault_tree__
__workflow_verification__
__requirements_modeling__.
__compiler_front_end__
__metamodeling_architecture__
__weightless_neural_network__
__AADL_models__.
__lan-_guage__
__role_modeling__
__requirements_specification_language__
__rights_expression__
__Petri_net_modeling__
__graphical_description__
__abstraction_techniques__,
__timed_state_space__
__verifying_security_protocols__
__formal_modelling_language__
__process_views__.
__program_analysis_techniques__.
__automatic_proof__
__transformation_language__,
__state_transition_diagrams__.
__executable_test_cases__.
__proactive_password__
__formally_analyzing__
__runtime_enforcement__
__protocol_engineering__.
__specification_patterns__
__TCAS_II__
__bit-accurate__
__pre/post__
__high_assurance_systems__.
__RTL_hardware__
__compositional_modelling__
__autobiographic_memory__
__exploration_tool__.
__rule-base__.
__timed_behavior__
__Specification_mining__
__compiler_writing__
__component-based_real-time_systems__.
__source_code_instrumentation__
__checking_tool__
__component_based_development__
__syntax_analysis__.
__high-level_models__.
__resource_usage_analysis__
__bioinformatics_workflows__
__linking_language__
__protocol_composition__.
__aspect-oriented_techniques__.
__PKI_trust__
__renaming_problem__
__application_development_framework__
__collection-oriented__
__banking_domain__
__knowledge_base_maintenance__.
__asynchronous_concurrent_systems__.
__ER_diagrams__,
__lightweight_formal_methods__
__model_driven_approach__
__service_interactions__,
__formal_correctness_proofs__
__ML-like_languages__
__rigorous_analysis__.
__based_model__,
__OWL_ontology__.
__abstract_state_machine__
__aspect_weaving__.
__abstract_classes__.
__recursive_descent_parsing__
__web-applications__.
__modelling_tool__.
__technology_selection__.
__message-passing_primitives__.
__distributed_CSPs__.
__case_tool__
__human_translator__
__process-based__,
__dialogue_agent__
__user_interface_management_system__.
__causal_loop__
__user_interface_construction__
__user_guided__
__makes_three_important_contributions__.
__drawing_program__
__object_behaviour__.
__design_methods__:
__computational_structures__.
__graphical_notation__.
__map_algebra__
__interface_description__
__I/O_automata__.
__schema_transformations__,
__preference_queries__.
__generic_components__,
__Event_Analyzer__
__CORBA_security__
__wiki_markup__
__identification_techniques__.
__high_level_Petri_nets__.
__validation_tool__,
__system's_capabilities__
__video_documentaries__.
__hypertext_versioning__
__program_generators__.
__prototyping_process__.
__inter-procedural__,
__explanation-based_learning__,
__XML-GL__
__codesign_methodology__
__LOTOS_specification__
__COSMOS__,
__HW/SW_interfaces__
__data-intensive_Web_applications__
__translational_semantics__
__semantic_analyser__
__MVC-based__
__abstract_data_types__:
__linguistic_engineering__
__syntactic/semantic__
__control-flow_and_data-flow__
__database_semantics__.
__LOTOS_specifications__
__CSP_framework__
__Matlab_functions__
__SA-RT__
__transformation_tools__,
__domain-neutral__
__concurrent_components__.
__executable_specification_language__
__program_representations__.
__IP_encapsulation__
__functional_features__,
__component_adaptation__.
__component-based_software_architecture__
__formal_proof__.
__version_management__.
__component_specification__.
__scenario_description__
__component_specification__,
__SDL_specifications__.
__goal-oriented__,
__repeatable_manner__.
__aspect-oriented_approach__
__behavior_specification__.
__Web_service_compositions__.
__Object-Z_specifications__.
__coordination_aspects__
__verifying_concurrent_systems__.
__distributed_algorithms__:
__coordination_languages__,
__Reo_circuits__
__requirement_driven__
__communicating_automata__
__train_rescheduling__
__scenario-based_specifications__.
__embodiment_design__
__exhaustive_verification__
__language_level__,
__constraint-programming__
__structured_analysis__.
__advanced_transactional__
__formal_modeling__,
__Symbolic_Model_Verifier__
__reusable_modules__.
__graphical_editors__.
__situated_agent__
__component_compositions__
__knowledge-based_system__,
__collective_commitment__
__reuse-driven__
__modeling_formalism__,
__authorization_language__
__declassification_policies__
__perceptual_components__.
__property-oriented__
__Data_Independent_Accessing_Model__
__architectural_recovery__
__graphical_specification__
__verification_methodology__.
__Data_Definition_Language__
__design_specification__,
__reverse_engineering_environment__.
__nonprocedural_language__
__program_conversion__.
__preparation_phase__
__Feature_Oriented_Programming__
__secondary_contribution__
__automated_software_testing__.
__tabular_notation__
__Web_service_orchestration__
__reflective_languages__
__commitment_protocols__.
__access-control_policies__.
__schema-evolution__
__neural_information_processing__
__component-based_development_process__
__aspect_mechanisms__.
__test_sequence_generation__.
__multidimensional_schemas__
__graphical_interaction__.
__process_description__.
__logic_queries__.
__explicit-state_model_checking__
__dynamic_software_adaptation__.
__RTL_implementation__.
__resolving_conflicts__.
__logical_layer__
__behavioral_requirements__.
__declarative_knowledge_representation__
__ology__
__qualitative_models__,
__finite_state_models__
__state_transition_machine__.
__executable_processes__
__BDI-style__
__verification_framework__,
__coupling_metrics__,
__UML_statecharts__,
__representation_formalism__,
__cell_spaces__
__Abstract_state_machines__
__Theme/UML__
__office_layout__
__process_modeling_languages__.
__RESTful_Web_services__
__BPMN_diagrams__
__process_fragments__.
__event_composition__
__two-level_morphology__.
__temporal_plans__.
__asset_reuse__
__interactive_agents__.
__a_pragmatic_approach__.
__predicate/transition_net__
__control-flow_analysis__.
__component-based_embedded_systems__
__round-trip_engineering__.
__tool_demo__
__architectural_views__,
__concurrent_logic_programs__.
__business_process_model__.
__visual_debugging__
__BETA-BINDERS__
__graphical_modeling_tool__
__extraction_tool__.
__stepwise_refinements__
__forced_simulation__
__OO_design__.
__agent-based_simulation__,
__logged_data__.
__general-purpose__.
__an_algebraic_approach__,
__higher-level_language__
__tiling_patterns__.
__behavior-preserving_transformations__
__communicating_X-machines__
__COSMIC_measurement__
__parser_construction__
__multimodal_language_processing__
__morphological_processor__
__temporal_integrity__
__object-oriented_systems__:
__program_termination_verification__
__argumentative_agents__
__compatibility_and_replaceability__
__purpose-driven__
__Markov_regenerative__
__Head-driven_Phrase_Structure_Grammar__
__storage_optimization__.
__user_interface_specification__.
__semantics-directed_compiler__
__modelling_notation__
__query_rewriting_mechanism__
__semistructured_documents__,
__first-order_theorem_proving__.
__safety_policies__.
__behavioral_subtyping__.
__long-running_transactions__.
__structured_design__,
__separate_modules__.
__high-level_parallel_programming__
__Coverage_criteria__
__tree_visualization__
__MAS_infrastructure__
__Query_By_Example__
__Petri-nets__
__Reactive_planning__
__content_determination__
__flexible_workflow__
__Practical_approaches__
__assembly_programs__.
__performance_prediction_tool__
__UML_interaction_diagrams__
__compositional_performance_analysis__
__high_level_goals__
__profiling_tools__.
__attributed_grammars__
__software_binaries__.
__business_data_processing__.
__model-checker__,
__reflective_language__
__model-based_debugging__
__platform_architecture__,
__automatic_testing__.
__Development_process__
__domain-specific_modeling__.
__language_syntax__,
__declarative_models__.
__annotation_layers__,
__metadata_model__,
__the_Spin_model_checker__.
__object_oriented_software_systems__.
__knowledge_processing_middleware__
__RDF_graph__.
__an_evolutionary__,
__shared_memory_parallel_programs__.
__Stochastic_Reward_Nets__
__object-oriented_specifications__.
__Wide_Spectrum_Language__
__hybrid_control_systems__
__feature_modelling__.
__deductive_database_systems__.
__variable_granularity__
__MARTE_profile__
__user_interface_description_language__
__Parsing_Expression_Grammars__
__multiple_granularity__
__reactive_systems__:
__activity_scanning__
__task-centered__
__preferential_choice__.
__interface_definition__.
__Estelle-based__
__multigrid_algorithms__.
__refinement_based__
__programming_abstractions__.
__safety_constraints__,
__final_conclusion__
__declarative_programming_language__
__software_architectural_style__
__agent_behaviours__.
__concurrent_reactive_systems__
__multimodal_user_interface__
__machine_descriptions__.
__Colored_Petri_net__
__SCA-based__
__state_machine_diagram__
__password_policies__.
__ontology_framework__.
__high-level_specification__
__database_architecture__.
__SDL_models__
__specification_patterns__.
__mobile_device_applications__.
__formal_notation__.
__ontology_alignments__.
__electronic_institution__
__Interaction_testing__
__ontology_language__.
__object-oriented_modeling_language__.
__declarative_paradigm__
__architectural_approach__,
__functional_model__,
__font_design__
__heterogeneous_reasoning__
__PEPA_models__.
__model-transformation__
__replication_technique__.
__authorisation_constraints__
__UML_semantics__
__a_model-driven_approach__,
__script_language__.
__vulnerability_signatures__.
__biological_modeling__.
__database_reverse_engineering__.
__role-based_access_control_model__.
__MS_Word__.
__functional_semantics__
__behavioural_analysis__.
__embedded_control_software__.
__formal_description_technique__
__Otho_Toolkit__
__deductive_reasoning__,
__data_access_layer__
__multiagent_framework__.
__meta-environment__
__dynamic_monitoring__.
"__bottom_up__"
__domain-specific_languages__:
__software_architecture_style__
__passive_testing_approach__
__declarative_programs__.
__workflow_specification__.
__OWL_DL_ontologies__.
__Parallel_DEVS__
__analysis_and_code_generation__.
__software_prototyping__.
__graph_grammar_formalism__.
__executable_language__
__Java_bytecode_programs__.
__goal_satisfaction__.
__BPEL_programs__
__RMI-based__
__Test_derivation__
__recursive_predicates__.
tool-__based_approach__
__BPEL_engine__.
__model-checking_techniques__.
__formal_ontologies__,
__networks_of_timed_automata__.
__discovery_algorithm__.
__program_generators__,
__variability_models__.
__ontological_analysis__.
__component_software__,
__task_modeling__.
__object-oriented_software_design__.
__Stacked_generalization__
__text_interpretation__.
__object-oriented_models__,
__workflow_processes__,
__content_layer__
__annotation_language__.
__textual_scenarios__
__program_dependencies__.
__Colored_Petri_nets__
__configuration_knowledge_bases__.
__verification_condition_generator__
__easy_extensibility__
.__NET_environment__.
__compatibility_analysis__.
__complex_embedded_systems__,
__computational_societies__.
__decision_logic__.
__automatic_reasoning__.
__temporal_ontology__
__implementation_experience__.
__certificate_path__
__multimodal_integration__.
__reengineering_process__,
__domain-specific_modeling_languages__.
__interactive_configuration__.
__engineering_perspective__,
__meta_model__.
__Formal_proof__
__example-based_machine_translation__
__Gillespie's_algorithm__
__high_level_of_abstraction__.
__natural_language_discourse__
__deployment_descriptor__
__BP-QL__
__structure_generation__.
__instructional_goals__
__object_perception__.
__interface_theories__
__UML_profile__.
__semantic_definition__.
__generic_software_framework__
__constraint_specifications__.
__dynamic_aspect__
__visual_programming_language__.
__Maude-NPA__
__domain-specific_modeling_language__
__resolution_strategies__.
__trace_assertion__
__human_negotiation__
__Delphi_process__.
__concurrency_concepts__
__declarative_planning__
__federation_architecture__
__partial_models__.
__UML_activity_diagram__.
__mechanical_verification__
__ladder_logic__
__Program_structure__
__a_Petri-net-based__
__automated_test_case_generation__.
__structured_specifications__
__ESC/Java2__.
__interface_automata__.
__pointer_logic__
__microprocessor_hardware__
__testing_criterion__.
__software_release_planning__.
__language_bindings__.
__UML_extension__
__independently_developed_components__.
__blackboard_systems__.
__long_running_transactions__.
__pattern_specification_language__
__user_interface_specification__
__meta-CASE__
__metamorphic_testing__,
__Hierarchical_Colored_Petri_Nets__
__coordination_middleware__
__model_transformation_techniques__.
__authorization_management__.
__flow-_and_context-sensitive_pointer__
__software_architecture_specifications__
__Directed_test_generation__
__composite_service__,
__structural_design_patterns__
__thought_processes__.
__PLC_program__
__AspectJ_aspects__
__Statistical_debugging__
__reusable_aspects__
__web_ontology_language__
__state_chart__
__behavioural_properties__.
__UML_class_diagram__.
__executable_process_models__
__Concept_location__
__flexible_structure__,
__Bio-PEPA__,
__auto-tuner__
__Property_Sequence_Chart__
__visual_sensing_strategies__
__physical_units__.
__aspect_mining__.
__black_box_testing__
__Separate_compilation__
__program_verifiers__
__dynamic_fault_trees__.
__multiparty_session__
__sensing_modality__
__code_templates__.
__adaptive_multi-agent_systems__.
__process_models__:
__MATLAB/Simulink__.
__decision-theoretic_planning__.
__contextual_graphs__
__visual_contracts__
__template_language__
__crypto_protocol__
__method_fragments__.
__model_weaving__
__DSL_grammars__
__Team_automata__
__execution_phases__.
__architectural_entities__
__mixed_multi-unit_combinatorial_auctions__.
__system's_specification__
__procedural_code__.
__partial_constraint_satisfaction_problems__.
__structural_metrics__.
__dependability_analysis__.
__combinator_library__
__An_event_driven__
__fault-tolerant_distributed_programs__.
__abstraction_layer__.
__engineering_approaches__.
__agent_organisations__.
__delay-insensitivity__
__workflow_language__,
__design_languages__.
__component_based_applications__.
__reverse_engineers__
__empirical_tuning__
__latency-insensitive_design__
__an_object-oriented_approach__,
__iterative_combinatorial_auctions__.
__Index_tuning__
__static_scope__
__interface_synthesis__.
__integration_strategy__.
__visual_formalisms__,
__state-machines__
__graph_pattern_matching__.
__code_selection__,
__formal_synthesis__
__multilayer_access_control__
__region-based_memory_management__.
__service_creation_environment__
__asynchronous_event_handling__
__UML_model__,
__CASE-tool__
__association_rule_mining_algorithm__.
__type_declarations__.
__programmed_graph_rewriting__
__contract_monitoring__.
__service_dependency__
__agent_development__.
__middle-out__
__process_specification__.
__restructuring_compilers__.
__ontology_model__,
__crosscutting_features__
__architectural_design_patterns__.
__software_process_model__,
__architecture-driven__
__split-level__
__Design/CPN__
__picture_description__
__graph_reduction__.
__conceptual_data_model__.
__J2ME_applications__.
(__Web_Modeling_Language__)
__literate_programming__,
__UML_specifications__.
__composing_components__
__parallel_program_execution__
__transformational_grammar__.
__architectural_modelling__
__Domain-driven__
__concept-learning__
__object_equality__
__adaptive_behaviors__.
__UML_activities__
__legacy_component__
__fuzzy_expert_systems__,
__engineering_methodology__.
__object-oriented_abstractions__
__JavaBeans_component__
__literate_programming__.
__Muse__,
__anytime_algorithms__,
__algebraic_languages__.
__compliance_checking__.
__systematic_literature_review__
__audio_synthesis__
__object-oriented_specification_language__
__logical_level__.
__metamorphic_testing__.
__avionics_domain__.
__reactive_real-time_systems__.
__Z_notation__,
__Frama-C__
__RFID_application__.
__protocol_verifier__
__collection_classes__.
__language_workbench__.
__automatic_programming__,
__pluggable_type_systems__
__event_manager__
__dynamic_taxonomies__,
__efficient_verification__
__dialog_control__
__logical_assertions__.
__semi-formal__,
__object-oriented_program__
__conceptual_modelling_language__
__cosimulation_environment__
__QoS_contract_negotiation__
__synthesis_technique__,
__thispaper_presents__
__structured_description__
__dataflow_testing__
__locality_optimization__.
__checking_consistency__.
__model_checker_FDR__.
__conversation_policies__
__primitive_actions__.
__human_mind__
__request_language__
__automated_test_generation__.
__interorganizational_workflows__
__model-based_approach__,
__grid_workflow_applications__
__Petri_Net__)
__algebraic_Petri_nets__.
__object-oriented_Petri_net__
__Dynamic_Parallel_Schedules__
__formal_transformation__
__program_verifier__
__nested_data_parallelism__
__protocol_compatibility__
__Stochastic_Well-formed_Nets__
__PEPA_nets__
__modification_operations__.
__interactive_programming__.
__pattern_catalog__
__calling_conventions__.
__rights_expression_languages__.
__XML_parsing__.
__an_event-driven__,
__workflow-based_applications__.
__parametric_modeling__,
__data_manipulation_language__.
__tabular_expressions__.
__multimedia_scenarios__
__ESTELLE__
__requirement_specification_language__
__policy_composition__
__Secure_information_flow__
__design_pattern_recovery__
__safety_requirement__
__web_warehousing__
__Eclipse_plug-ins__.
__security_assurance__,
__ETL_workflows__
__model-based_approach__.
__dynamic_metrics__.
__ViSta__
__Lightweight_Coordination_Calculus__
__functional_ATPG__
__step-wise_refinement__
__personalization_recommendation__
__timing_issues__.
__compositional_models__
__transparent_shaping__
__Cicero__
__situated_multi-agent_systems__
__conceptual_information_retrieval__
__simplification_rules__,
__coordination_paradigm__.
__methodological_framework__.
__workflow_logs__
__reasoning_rules__,
__application_domain_knowledge__.
__security-policy__
__tuple_centres__.
__multiple_tuple_spaces__
__component-oriented_programming__
__accelerated_rendering__
__formal_specification_language__,
__Atlas_Transformation_Language__
__MOF_compliant__
__event_specification__
__observable_behavior__.
__OBDD_based__
__timing-accurate__
__Design_intent__
__VLSI_synthesis__,
__aspect_weaver__
__textual_notation__.
__real-time_reactive_systems__,
__behavioural_modelling__
__APi-calculus__
__abstract_workflows__
__speech_understanding_systems__.
__Simulink®__
__feature-centric__
__VDM_specifications__
__WWW_applications__,
__simulation_and_model_checking__
__test-cases__,
__causal_message_logging__.
__context_inference__.
__model_checker_SPIN__
__register_transfer_language__
__syntax-directed_editors__.
__explanation-oriented__
__MDA_tools__
__formal_models__:
__Ada_tasks__
__enterprise_viewpoint__
__preference_reasoning__
__activity_diagram__.
__Agent-based_modeling_and_simulation__
__case-based_planning__.
__reasoning_framework__.
__online_reconfiguration__
__task-flow__
__multi-agent_organisations__.
__early_requirements__.
__domain-specific_ontologies__.
__program_generator__.
__OT_algorithms__.
__securing_XML_documents__.
__Information_flow_security__
__semantics-directed__
__semantically-based__
__UML_class_and_sequence_diagrams__.
__attributed_grammars__.
__flow_charts__,
__extraction_tool__,
__database_evolution__
__behavioral_views__
__health_diagnosis__.
__custom_solutions__.
__provably-correct__
__variability_mechanisms__
__aspectual_requirements__.
__UML_notations__.
__bit-level_concurrent__
__adaptive_web_applications__.
__Web_service_compositions__,
__Grid_programming_environment__
__diagnosing_errors__
__security_kernel__.
__home_video_editing__.
__design_optimisation__.
__domain-specific_modelling_languages__
__temporal_logic_properties__
__genetic_regulatory_networks__,
__basic_LOTOS__
__adaptive_presentation__
__graphical_features__.
__SystemC_code__.
__design-space_exploration__,
__refinement_techniques__,
__usability_principles__,
__automated_instrumentation__
__coverage-driven__
__unambiguous_description__
__theorem_proving_and_model_checking__.
__asynchronous_communication_mechanisms__
__structural_subtyping__,
__typed_attributed_graph_transformation__
system-__user_interaction__
__interactive_visual_analysis__
__construction_grammar__
__hardware/software_systems__,
__MS_Excel__,
__exception_handling_constructs__
__behavioral_diagrams__
__database_tuning__.
__J-Sim__.
__autonomic_manager__.
__visual_programming_language__,
__problem-solving_environment__.
__Modeling_approach__
__discrete-event_control__
__agile_parsing__
__media_assets__.
__conformance_analysis__
__Static_Driver_Verifier__
__dynamic_code_generation__.
__source_transformation__.
__intended_behavior__.
__navigational_models__
__source_control_repositories__.
__Clouseau__
__aggregation_protocols__.
__process-control_systems__.
__dynamic_frames__.
__HW/SW_co-simulation__.
__locking_primitives__.
__synchronous_specifications__.
__mutual-exclusion__
__an_object_oriented_approach__
__synchronous_specifications__
__GALS_architectures__.
__IMS-LD__.
__Esterel_programs__.
__ontology_creation__,
__fine-grained_version_control__
__coverage_metric__.
__hierarchical_taxonomy__
__intelligent_assistance__.
__Grover's_algorithm__.
__reference_immutability__.
__power_management_policy__,
__pluggable_type_systems__.
__functional_abstraction__,
__runtime_analysis__,
__Web_user_interfaces__
__human_feelings__.
__object-oriented_software_testing__
__synchronous_dataflow__.
__OSI_networks__.
__population_learning_algorithm__
__observer/controller_architecture__
__wrapper_generation__.
__process_discovery__.
__semantic_computing__.
__behavior_modeling__,
__conformance_test_suite__
__Interface_automata__
__proof_assistant__,
__Decision_procedures__
__smart-card_application__
__maturity_assessment__.
__event-B__
__defect-density__
__operating_guidelines__
Object-__Z_notation__
__orchestration_language__.
__data-intensive_Web_applications__.
__schema_transformations__
__CO-OPN__/2
__typed_feature_structures__,
(__Specification_and_Description_Language__)
__hierarchical_partitioning__.
__trace_diagrams__
__safety_specifications__.
__SDL_specification__.
__aspect-oriented_software_development__.
__symbolic_simulator__
__hierarchical_predicate_transition_nets__
__peephole_optimizer__
__BDI_agent-based__
model-to-__code_transformations__
__UML_state_diagrams__,
__formal_definition__,
__flexible_processes__.
__building_reusable__
__reverse_architecting__
__program_manipulation__.
__advanced_transactions__.
__Object_serialization__
__termination_tools__.
__Enabling_dynamic__
__algorithmic_programs__
__cost/benefit_analysis__
__Box_structures__
__coordination_policies__.
__structural_adaptation__.
__workflow_process_definition__
__food_webs__
__Ada_code__.
__structural_modeling__.
__firing_rule__.
(__Finite_State_Machine__)
__concurrent_programs__:
__interaction_systems__,
__agent-oriented_software_development__.
__two-phase_locking_protocol__,
__incrementally_modular_abstraction_hierarchy__
__symbolic_analysis__,
__interactive_prototyping__
__platform_independent_model__
__Verification_methods__
__object_oriented_programs__
multi-__structured_documents__.
__UML_modeling__.
__wireless_routing_protocols__.
__interaction_traces__.
__set-theory__
__refinement_planning__
__tactic_language__
__text_planning__
__executable_UML_models__
__Modular_SOS__
__entity-relationship_diagrams__,
(__Unified_Modeling_Language__).
__context_representation__.
__QoS_specifications__.
__business_process_monitoring__
__fault_tolerant_software__.
__object_deputy_database__
__actor_programs__
__conceptual_schemes__
__object-oriented_queries__
__robot_design__.
__methodological_approach__,
__object_orientated__
__lexical_databases__.
__simulation_facility__
__secure_protocols__,
__generative_programming_techniques__
__bug_hunting__
__execution_environment__;
__Lula__
__placement_heuristics__
__assume-guarantee_style__
__manufacturing_equipment__.
__program_supervision__
__agent_orientation__
__OWL-DL_ontologies__.
__program_refinement__.
__fast-prototyping__
__transformation_framework__,
__AspectJ_compiler__.
__Self-adjusting_computation__
__using_colored_Petri_nets__.
__testing_profile__
__Action_Notation__
__user_interface_development_environment__.
__model-driven_security__
__prototype_generation__.
__database_reorganization__.
__Query_Language__),
__shrink_wrap__
__programmed_logic__
__software_reconnaissance__
__equivalence_partitioning__
__interactive_debugging__.
__behaviour_specification__
__end_user_programming__.
__Haskell_program__
__exact_real_arithmetic__,
__Petri_Net_Markup_Language__
__extended_FSM__
__description_techniques__,
__formal_description__.
__individual_agent's__
__incremental_design__.
__temporal_assertions__
__HTN_planner__
__multimedia_integration__.
__architecture_description_language__,
__analyzing_security_protocols__
__Hybrid_automata__
__Ada_source_code__.
__dialog_model__.
__hybrid_MPI+OpenMP__
__wireless_network_simulators__.
__structure_mapping__,
__test-case_generation__.
__safety_engineers__,
__Constraint_Language__)
__expressive_music_performance__.
__dynamic_adaptive_systems__.
__code_clone_analysis__.
__programming_practice__.
__module_composition__
__Codd's_relational_model__
__specification_driven__
__hybrid_functional_Petri__
__higher-level_languages__
__extension_mechanism__,
__execution_stack__
__high_cohesion__.
__Compiler_generation__
__Caddie__
__imperative_code__.
__computational_cognitive_model__
__trusted_computing_platforms__.
__multi-paradigm__,
__reference_corpus__
__surgical_interventions__.
__syntax_diagrams__
__program_validation__.
__automatic_program_synthesis__
__mock_objects__.
__Image_computation__
__application-level_checkpointing__.
__modular_monadic__
__magnetic_bubble_memories__
__geographic_ontology__
__evolvable_fuzzy__
__viewpoint-oriented__
__a_model_driven_approach__.
__SDL_language__
__constructive_cost_model__
__task_farm__
__UI_development__
__model_driven_architecture__.
__transport_service__.
__constraint_acquisition__
__prolog_programs__.
__hardware_description_languages__:
__usability_guidelines__.
__reusable_libraries__.
__ontological_reasoning__.
__data_structuring__.
__component_assemblies__.
__secure_information_sharing__.
__encapsulation_mechanism__
__deductive_techniques__
__deadlock_analysis__.
__Black-box_testing__
__aspect-oriented_design__.
__agent-oriented_programming__,
__UML_use_cases__
__language_specifications__.
__language_Esterel__.
__behavioral_representations__
__neglected_conditions__
__MUSE__,
__firewall_rule__
__tracing_tool__
__semi-automated__,
__long_term_memory__.
__automatically_generating__,
__A_transformational_approach__
__normalization_process__.
__tag_propagation__
__extended_static_checking__
__metadata_generation__.
__abductive_inference__.
__BDI-agents__
__aspect_oriented_programming__,
__ECA_rule-based__
__UML_diagrams__:
__human_machine__
__group_communication_protocols__.
__distributed_programs__:
__media_gateways__.
__Coloured_Petri_nets__.
__visual_editors__,
__component-oriented__,
__specification_tool__.
__feature_configuration__
__simulation-based_verification__.
__shared_conceptualization__
__graphically-based__
__language_workbench__
__long-running_business_transactions__
__proof_editor__
__runtime_evolution__
__standardized_description__
__architectural_concepts__,
__interprocedural_data-flow__
__meta_patterns__
__conformance_checking__.
__Estelle_specifications__
__JavaBeans_components__.
__deadline_driven__
__administration_policies__
__behavioral_correctness__
__abstract_specifications__.
__UML_collaboration_diagrams__
__business_process_change__.
__rich_user_interface__
__testing_methodology__,
__algorithmic_transformations__
__formal_verification__:
__PDF_documents__,
__modelling_environment__,
__scenario_generation__.
__embedded_real-time_systems__:
__variability_in_software_product_lines__.
__inductive_proofs__.
__categorical_perspective__.
__process_driven__
__generating_executable__
__loop_structure__.
__problem-solving_methods__,
__action_semantics__,
__feature_composition__.
__functional_modelling__
__air_combat_simulation__
__scope-bounded__
__interactive_user_interface__.
__Stochastic_Activity_Network__
__Modelica_language__.
(__Business_Process__
__adaptive_courseware__
__library_modules__.
__MDE_approach__
__desired_functionality__.
__object-oriented_modeling_language__
__true-concurrency__
__causality_graph__
__design-pattern__
__production_control_systems__.
__behavior_diagrams__
__architectural_change__.
__QoS_specification__.
__formal_engineering__
__process_patterns__,
__architectural_design_patterns__
__Web_service_discovery_and_composition__
__aspect_orientation__
__software_requirements_specification__.
__ontology_modularization__.
__semantic_data_model__.
__OCL_specifications__
__graphical_form__,
__aspect-oriented_software__.
__software_development_paradigm__,
__Ada-95__.
__Petri_net_representation__.
__guideline_representation__
__hardware/software_implementation__.
__ISiS__
__refinement_transformations__.
__semantic_tableaux__
__object_oriented_metrics__
__pipelined_schedules__.
__semantic-preserving__
(__CP-nets__
__visual_syntax__.
__incomplete_specifications__.
__component_behaviour__
__semi-formal_and_formal__
__Reference_Attributed_Grammars__
__multi-formalism_modeling__
__BitTorrent_protocol__
__mathematical_foundations__.
__use-case-driven__
__control_abstraction__.
__web_services_technologies__.
__web_service_description__
__call_stack__.
__aspect_extension__
__Eclipse_platform__
__handling_failures__.
__diabetes_mellitus_type_2__
__simulation_interoperability__.
__specification_styles__
__Previous_publications__
__Temporal-RBAC__
__string_analysis__.
__RBAC_models__,
__state_machine_based__
__hierarchical_modeling__,
__Object_Z__
__law-governed__
__domain_modelling__.
__Sequence_diagram__
__generalized_stochastic_Petri_net__
__automatic_test_data_generation__.
__executable_specifications__,
__asynchronous_pipelines__
__Secure_Tropos__,
__Petri_Nets_formalism__
__SymTA/S__
__block_diagram__.
__nondeterministic_behavior__.
__earth_observation_data__.
__aspect-oriented_extension__
__subsequent_releases__.
__Markov_reward_model__
__constraint_description__
__generalized_semi-Markov_process__
__active_database_rules__
__conceptual_mapping__
__adequacy_criteria__.
__executable_specification__.
__gaining_wide_acceptance__
__software_sizing__.
__CPN_models__.
__conformance_tests__.
__specialist_knowledge__
__verification_toolbox__
__computation_theory__.
__interactive_hypermedia__
__counter_abstraction__.
__Heuristic_optimization__
__DEVS_based__
__systematic_validation__
__industrial_parts__,
__Petri_net_model__.
__hierarchical_test_generation__.
__purely_functional_programming__
__discrete_controller_synthesis__
__interface_specification_language__
__BPMN_models__.
__functional_design__,
__Japanese_language__.
__requirements_driven__
__cross-compilation__
__BDI_agent_architecture__
__conversation_structures__
__Security_properties__
__test_models__,
__concern-oriented__
__Hobbes__
__knowledge_acquisition_and_representation__
__building_user_interfaces__
__behavioral_contracts__
__JESS__,
__code_synthesis__.
__situated_MAS__.
__test_framework__,
__dynamic_software_architectures__
__social_simulation__,
__Locator__,
__component-based_software_architectures__.
__relational_Bayesian_networks__
(__Object_Constraint_Language__)
__interoperability_tests__
__independent_manner__,
__protocol_state_machines__.
__CATHEDRAL-II__
__XPath_processor__
__agent-oriented_programming_language__
__coordination_scheme__.
__designer's_point_of_view__,
__OWL_reasoner__,
__niche_technology__,
__semantic_preserving__
__upper-level_ontology__
__cross-organizational_business_process__
